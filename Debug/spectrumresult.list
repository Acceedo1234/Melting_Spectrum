
spectrumresult.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f154  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  0800f2e4  0800f2e4  0001f2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f688  0800f688  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f688  0800f688  0001f688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f690  0800f690  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f690  0800f690  0001f690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f698  0800f698  0001f698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800f6a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cc8  200000f0  0800f790  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002db8  0800f790  00022db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021ad1  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000572b  00000000  00000000  00041bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  00047320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a40  00000000  00000000  00048f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008da4  00000000  00000000  0004a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000240b9  00000000  00000000  0005371c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4141  00000000  00000000  000777d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b916  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f38  00000000  00000000  0015b968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f2cc 	.word	0x0800f2cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	0800f2cc 	.word	0x0800f2cc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_TIM_PeriodElapsedCallback>:
uint16_t seq1_remaining_time_total_min,seq2_remaining_time_total_min;
uint8_t seq1_remaining_time_Hr,seq1_remaining_time_min,seq2_remaining_time_Hr,seq2_remaining_time_min;
uint8_t Two_Second_Count;

 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 	if(htim == &htim7)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a21      	ldr	r2, [pc, #132]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d102      	bne.n	80005aa <HAL_TIM_PeriodElapsedCallback+0x16>
 	{
 		Flag1MS=1;
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
 	}
 	if(htim == &htim6)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a1f      	ldr	r2, [pc, #124]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d133      	bne.n	800061a <HAL_TIM_PeriodElapsedCallback+0x86>
	{
 		Flag100milliSeconds=1;
 80005b2:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
 		if(++LocCount1S >= 10)
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80005c2:	701a      	strb	r2, [r3, #0]
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b09      	cmp	r3, #9
 80005ca:	d926      	bls.n	800061a <HAL_TIM_PeriodElapsedCallback+0x86>
		{
			LocCount1S=0;
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
			if(++SimCount >= 20)
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80005dc:	701a      	strb	r2, [r3, #0]
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b13      	cmp	r3, #19
 80005e4:	d906      	bls.n	80005f4 <HAL_TIM_PeriodElapsedCallback+0x60>
			{
				SimCount=0;
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, RELAY4_Pin);
 80005ec:	2120      	movs	r1, #32
 80005ee:	4813      	ldr	r0, [pc, #76]	; (800063c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80005f0:	f009 f9c0 	bl	8009974 <HAL_GPIO_TogglePin>
			}
			Flag1Second =1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
			if(++Two_Second_Count >1){
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d905      	bls.n	800061a <HAL_TIM_PeriodElapsedCallback+0x86>
				Two_Second_Count=0;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
				Flag2Second=1;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
		}


	}
 
 }
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000884 	.word	0x20000884
 8000628:	2000010c 	.word	0x2000010c
 800062c:	20000838 	.word	0x20000838
 8000630:	2000010f 	.word	0x2000010f
 8000634:	20000111 	.word	0x20000111
 8000638:	20000110 	.word	0x20000110
 800063c:	48000800 	.word	0x48000800
 8000640:	2000010d 	.word	0x2000010d
 8000644:	20000112 	.word	0x20000112
 8000648:	2000010e 	.word	0x2000010e

0800064c <HAL_UART_RxCpltCallback>:

extern uint8_t Rxseqdecoder;
extern void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a53      	ldr	r2, [pc, #332]	; (80007a4 <HAL_UART_RxCpltCallback+0x158>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d15e      	bne.n	800071a <HAL_UART_RxCpltCallback+0xce>
	{
		if((Rx_Dwin_Buff[0] ==0x83)&&(Rx_Dwin_Point==0))
 800065c:	4b52      	ldr	r3, [pc, #328]	; (80007a8 <HAL_UART_RxCpltCallback+0x15c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b83      	cmp	r3, #131	; 0x83
 8000662:	d107      	bne.n	8000674 <HAL_UART_RxCpltCallback+0x28>
 8000664:	4b51      	ldr	r3, [pc, #324]	; (80007ac <HAL_UART_RxCpltCallback+0x160>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d103      	bne.n	8000674 <HAL_UART_RxCpltCallback+0x28>
		{
			Rx_Dwin_Point=1;
 800066c:	4b4f      	ldr	r3, [pc, #316]	; (80007ac <HAL_UART_RxCpltCallback+0x160>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	e04d      	b.n	8000710 <HAL_UART_RxCpltCallback+0xc4>
		}
		else if(Rx_Dwin_Point==1)
 8000674:	4b4d      	ldr	r3, [pc, #308]	; (80007ac <HAL_UART_RxCpltCallback+0x160>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d10b      	bne.n	8000694 <HAL_UART_RxCpltCallback+0x48>
		{
			if(Rx_Dwin_Buff[0] == 0x30){
 800067c:	4b4a      	ldr	r3, [pc, #296]	; (80007a8 <HAL_UART_RxCpltCallback+0x15c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b30      	cmp	r3, #48	; 0x30
 8000682:	d103      	bne.n	800068c <HAL_UART_RxCpltCallback+0x40>
				Rx_Dwin_Point=2;
 8000684:	4b49      	ldr	r3, [pc, #292]	; (80007ac <HAL_UART_RxCpltCallback+0x160>)
 8000686:	2202      	movs	r2, #2
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e041      	b.n	8000710 <HAL_UART_RxCpltCallback+0xc4>
			}
			else{
				Rx_Dwin_Point=0;
 800068c:	4b47      	ldr	r3, [pc, #284]	; (80007ac <HAL_UART_RxCpltCallback+0x160>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	e03d      	b.n	8000710 <HAL_UART_RxCpltCallback+0xc4>
			}
		}
		else if((Rx_Dwin_Buff[0] == 0x00)&&(Rx_Dwin_Point==2))
 8000694:	4b44      	ldr	r3, [pc, #272]	; (80007a8 <HAL_UART_RxCpltCallback+0x15c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d107      	bne.n	80006ac <HAL_UART_RxCpltCallback+0x60>
 800069c:	4b43      	ldr	r3, [pc, #268]	; (80007ac <HAL_UART_RxCpltCallback+0x160>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d103      	bne.n	80006ac <HAL_UART_RxCpltCallback+0x60>
		{
			Rx_Dwin_Point=3;
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <HAL_UART_RxCpltCallback+0x160>)
 80006a6:	2203      	movs	r2, #3
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e031      	b.n	8000710 <HAL_UART_RxCpltCallback+0xc4>
		}
		else if(Rx_Dwin_Point==3)
 80006ac:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <HAL_UART_RxCpltCallback+0x160>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d10c      	bne.n	80006ce <HAL_UART_RxCpltCallback+0x82>
		{
			Rx_Dwin_Point=4;
 80006b4:	4b3d      	ldr	r3, [pc, #244]	; (80007ac <HAL_UART_RxCpltCallback+0x160>)
 80006b6:	2204      	movs	r2, #4
 80006b8:	701a      	strb	r2, [r3, #0]
			No_Of_Dwin_Bytes = Rx_Dwin_Buff[0]*2;
 80006ba:	4b3b      	ldr	r3, [pc, #236]	; (80007a8 <HAL_UART_RxCpltCallback+0x15c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <HAL_UART_RxCpltCallback+0x164>)
 80006c4:	701a      	strb	r2, [r3, #0]
			Rx_Dwin_Data_Buff_Point = 0;
 80006c6:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <HAL_UART_RxCpltCallback+0x168>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	e020      	b.n	8000710 <HAL_UART_RxCpltCallback+0xc4>
		}
		else if(Rx_Dwin_Point==4)
 80006ce:	4b37      	ldr	r3, [pc, #220]	; (80007ac <HAL_UART_RxCpltCallback+0x160>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d11c      	bne.n	8000710 <HAL_UART_RxCpltCallback+0xc4>
		{
			//Rx_Dwin_Point=4;
			Rx_Dwin_Data_Buff[Rx_Dwin_Data_Buff_Point]= Rx_Dwin_Buff[0];
 80006d6:	4b37      	ldr	r3, [pc, #220]	; (80007b4 <HAL_UART_RxCpltCallback+0x168>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	4b32      	ldr	r3, [pc, #200]	; (80007a8 <HAL_UART_RxCpltCallback+0x15c>)
 80006de:	7819      	ldrb	r1, [r3, #0]
 80006e0:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <HAL_UART_RxCpltCallback+0x16c>)
 80006e2:	5499      	strb	r1, [r3, r2]
			No_Of_Dwin_Bytes = No_Of_Dwin_Bytes-1;
 80006e4:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <HAL_UART_RxCpltCallback+0x164>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <HAL_UART_RxCpltCallback+0x164>)
 80006ee:	701a      	strb	r2, [r3, #0]
			Rx_Dwin_Data_Buff_Point = Rx_Dwin_Data_Buff_Point+1;
 80006f0:	4b30      	ldr	r3, [pc, #192]	; (80007b4 <HAL_UART_RxCpltCallback+0x168>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <HAL_UART_RxCpltCallback+0x168>)
 80006fa:	701a      	strb	r2, [r3, #0]
			if(No_Of_Dwin_Bytes==0){
 80006fc:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <HAL_UART_RxCpltCallback+0x164>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d105      	bne.n	8000710 <HAL_UART_RxCpltCallback+0xc4>
				Rx_Dwin_Complete = 1;
 8000704:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <HAL_UART_RxCpltCallback+0x170>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
				Rx_Dwin_Point=0;
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <HAL_UART_RxCpltCallback+0x160>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
			}
		}
			HAL_UART_Receive_IT(&hlpuart1,Rx_Dwin_Buff,1);
 8000710:	2201      	movs	r2, #1
 8000712:	4925      	ldr	r1, [pc, #148]	; (80007a8 <HAL_UART_RxCpltCallback+0x15c>)
 8000714:	4823      	ldr	r0, [pc, #140]	; (80007a4 <HAL_UART_RxCpltCallback+0x158>)
 8000716:	f00c f89b 	bl	800c850 <HAL_UART_Receive_IT>
	}

	if(huart == &huart1)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a28      	ldr	r2, [pc, #160]	; (80007c0 <HAL_UART_RxCpltCallback+0x174>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d13c      	bne.n	800079c <HAL_UART_RxCpltCallback+0x150>
	{
		HAL_UART_Receive_IT(&huart1,rxTempBuff,1);
 8000722:	2201      	movs	r2, #1
 8000724:	4927      	ldr	r1, [pc, #156]	; (80007c4 <HAL_UART_RxCpltCallback+0x178>)
 8000726:	4826      	ldr	r0, [pc, #152]	; (80007c0 <HAL_UART_RxCpltCallback+0x174>)
 8000728:	f00c f892 	bl	800c850 <HAL_UART_Receive_IT>
		if((rxTempBuff[0] == '$')&&(startrxframe==0))
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <HAL_UART_RxCpltCallback+0x178>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b24      	cmp	r3, #36	; 0x24
 8000732:	d109      	bne.n	8000748 <HAL_UART_RxCpltCallback+0xfc>
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <HAL_UART_RxCpltCallback+0x17c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d105      	bne.n	8000748 <HAL_UART_RxCpltCallback+0xfc>
		{
			startrxframe=1;
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <HAL_UART_RxCpltCallback+0x17c>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
			reference=0;
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <HAL_UART_RxCpltCallback+0x180>)
 8000744:	2200      	movs	r2, #0
 8000746:	801a      	strh	r2, [r3, #0]
		}
		if(startrxframe==1)
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <HAL_UART_RxCpltCallback+0x17c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d125      	bne.n	800079c <HAL_UART_RxCpltCallback+0x150>
		{
			checkbuff[reference]= rxTempBuff[0];
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <HAL_UART_RxCpltCallback+0x180>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_UART_RxCpltCallback+0x178>)
 8000758:	7819      	ldrb	r1, [r3, #0]
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <HAL_UART_RxCpltCallback+0x184>)
 800075c:	5499      	strb	r1, [r3, r2]
			reference++;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_UART_RxCpltCallback+0x180>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	b29a      	uxth	r2, r3
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <HAL_UART_RxCpltCallback+0x180>)
 8000768:	801a      	strh	r2, [r3, #0]
			if(rxTempBuff[0] == '#')
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <HAL_UART_RxCpltCallback+0x178>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b23      	cmp	r3, #35	; 0x23
 8000770:	d114      	bne.n	800079c <HAL_UART_RxCpltCallback+0x150>
			{
				startrxframe=0;
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_UART_RxCpltCallback+0x17c>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
				memcpy(raw_furnace_result,checkbuff,500);
 8000778:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <HAL_UART_RxCpltCallback+0x188>)
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_UART_RxCpltCallback+0x184>)
 800077c:	4610      	mov	r0, r2
 800077e:	4619      	mov	r1, r3
 8000780:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000784:	461a      	mov	r2, r3
 8000786:	f00d fb8d 	bl	800dea4 <memcpy>
				memset(checkbuff,0,sizeof(checkbuff));
 800078a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800078e:	2100      	movs	r1, #0
 8000790:	480f      	ldr	r0, [pc, #60]	; (80007d0 <HAL_UART_RxCpltCallback+0x184>)
 8000792:	f00d fb95 	bl	800dec0 <memset>
				SuccessfulResultRx = 1;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_UART_RxCpltCallback+0x18c>)
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
			}
		}

	}
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000598 	.word	0x20000598
 80007a8:	2000011c 	.word	0x2000011c
 80007ac:	2000011f 	.word	0x2000011f
 80007b0:	20000122 	.word	0x20000122
 80007b4:	20000120 	.word	0x20000120
 80007b8:	20000124 	.word	0x20000124
 80007bc:	20000121 	.word	0x20000121
 80007c0:	2000061c 	.word	0x2000061c
 80007c4:	20000114 	.word	0x20000114
 80007c8:	20000542 	.word	0x20000542
 80007cc:	20000540 	.word	0x20000540
 80007d0:	20000158 	.word	0x20000158
 80007d4:	2000034c 	.word	0x2000034c
 80007d8:	20000543 	.word	0x20000543

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f008 fd0e 	bl	8009200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f84c 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 faba 	bl	8000d60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ec:	f000 f936 	bl	8000a5c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007f0:	f000 f898 	bl	8000924 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007f4:	f000 f902 	bl	80009fc <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80007f8:	f000 fa44 	bl	8000c84 <MX_TIM6_Init>
  MX_SPI2_Init();
 80007fc:	f000 f9a6 	bl	8000b4c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000800:	f000 f9ec 	bl	8000bdc <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 8000804:	f000 f8ce 	bl	80009a4 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000808:	f000 f958 	bl	8000abc <MX_SPI1_Init>
  MX_TIM7_Init();
 800080c:	f000 fa70 	bl	8000cf0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000810:	4814      	ldr	r0, [pc, #80]	; (8000864 <main+0x88>)
 8000812:	f00b fb7b 	bl	800bf0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000816:	4814      	ldr	r0, [pc, #80]	; (8000868 <main+0x8c>)
 8000818:	f00b fb78 	bl	800bf0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 800081c:	4813      	ldr	r0, [pc, #76]	; (800086c <main+0x90>)
 800081e:	f00b fb29 	bl	800be74 <HAL_TIM_Base_Start>
//  for(i=0;i<=250;i++)
//  {
//	  data[i]=i;
//  }

  HAL_UART_Receive_IT(&huart1,rxTempBuff,1);
 8000822:	2201      	movs	r2, #1
 8000824:	4912      	ldr	r1, [pc, #72]	; (8000870 <main+0x94>)
 8000826:	4813      	ldr	r0, [pc, #76]	; (8000874 <main+0x98>)
 8000828:	f00c f812 	bl	800c850 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f009 f885 	bl	8009944 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800083a:	2002      	movs	r0, #2
 800083c:	f008 fd54 	bl	80092e8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f009 f87b 	bl	8009944 <HAL_GPIO_WritePin>


  W25qxx_Init();
 800084e:	f000 fff3 	bl	8001838 <W25qxx_Init>


  HAL_UART_Receive_IT(&hlpuart1,Rx_Dwin_Buff,1);
 8000852:	2201      	movs	r2, #1
 8000854:	4908      	ldr	r1, [pc, #32]	; (8000878 <main+0x9c>)
 8000856:	4809      	ldr	r0, [pc, #36]	; (800087c <main+0xa0>)
 8000858:	f00b fffa 	bl	800c850 <HAL_UART_Receive_IT>
  //rtc_set_time(13,14,30);
  //rtc_set_date(2,20,2,23);
  while (1)
  {
	  cppMain();
 800085c:	f008 fc5e 	bl	800911c <cppMain>
 8000860:	e7fc      	b.n	800085c <main+0x80>
 8000862:	bf00      	nop
 8000864:	20000838 	.word	0x20000838
 8000868:	20000884 	.word	0x20000884
 800086c:	200007ec 	.word	0x200007ec
 8000870:	20000114 	.word	0x20000114
 8000874:	2000061c 	.word	0x2000061c
 8000878:	2000011c 	.word	0x2000011c
 800087c:	20000598 	.word	0x20000598

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b096      	sub	sp, #88	; 0x58
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2244      	movs	r2, #68	; 0x44
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f00d fb16 	bl	800dec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008a6:	f009 f9b3 	bl	8009c10 <HAL_PWREx_ControlVoltageScaling>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008b0:	f000 fb48 	bl	8000f44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008b4:	2310      	movs	r3, #16
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008c0:	2360      	movs	r3, #96	; 0x60
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c4:	2302      	movs	r3, #2
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008c8:	2301      	movs	r3, #1
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 86;
 80008d0:	2356      	movs	r3, #86	; 0x56
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008d4:	2307      	movs	r3, #7
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008d8:	2302      	movs	r3, #2
 80008da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80008dc:	2308      	movs	r3, #8
 80008de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4618      	mov	r0, r3
 80008e6:	f009 f9e9 	bl	8009cbc <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008f0:	f000 fb28 	bl	8000f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
 80008f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	2303      	movs	r3, #3
 80008fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	2102      	movs	r1, #2
 800090c:	4618      	mov	r0, r3
 800090e:	f009 fde9 	bl	800a4e4 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000918:	f000 fb14 	bl	8000f44 <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3758      	adds	r7, #88	; 0x58
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_I2C1_Init+0x74>)
 800092a:	4a1c      	ldr	r2, [pc, #112]	; (800099c <MX_I2C1_Init+0x78>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A7FD;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_I2C1_Init+0x74>)
 8000930:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <MX_I2C1_Init+0x7c>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_I2C1_Init+0x74>)
 800093c:	2201      	movs	r2, #1
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_I2C1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_I2C1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095e:	480e      	ldr	r0, [pc, #56]	; (8000998 <MX_I2C1_Init+0x74>)
 8000960:	f009 f822 	bl	80099a8 <HAL_I2C_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800096a:	f000 faeb 	bl	8000f44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096e:	2100      	movs	r1, #0
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <MX_I2C1_Init+0x74>)
 8000972:	f009 f8a8 	bl	8009ac6 <HAL_I2CEx_ConfigAnalogFilter>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800097c:	f000 fae2 	bl	8000f44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_I2C1_Init+0x74>)
 8000984:	f009 f8ea 	bl	8009b5c <HAL_I2CEx_ConfigDigitalFilter>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800098e:	f000 fad9 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000544 	.word	0x20000544
 800099c:	40005400 	.word	0x40005400
 80009a0:	00a0a7fd 	.word	0x00a0a7fd

080009a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_LPUART1_UART_Init+0x50>)
 80009aa:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <MX_LPUART1_UART_Init+0x54>)
 80009ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_LPUART1_UART_Init+0x50>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_LPUART1_UART_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <MX_LPUART1_UART_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_LPUART1_UART_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <MX_LPUART1_UART_Init+0x50>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_LPUART1_UART_Init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <MX_LPUART1_UART_Init+0x50>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_LPUART1_UART_Init+0x50>)
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_LPUART1_UART_Init+0x50>)
 80009e2:	f00b fe79 	bl	800c6d8 <HAL_UART_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80009ec:	f000 faaa 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000598 	.word	0x20000598
 80009f8:	40008000 	.word	0x40008000

080009fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <MX_USART1_UART_Init+0x5c>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a40:	f00b fe4a 	bl	800c6d8 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a4a:	f000 fa7b 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000061c 	.word	0x2000061c
 8000a58:	40013800 	.word	0x40013800

08000a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <MX_USART2_UART_Init+0x5c>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART2_UART_Init+0x58>)
 8000aa0:	f00b fe1a 	bl	800c6d8 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aaa:	f000 fa4b 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200006a0 	.word	0x200006a0
 8000ab8:	40004400 	.word	0x40004400

08000abc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000ac2:	4a20      	ldr	r2, [pc, #128]	; (8000b44 <MX_SPI1_Init+0x88>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000ad6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ada:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000af2:	2210      	movs	r2, #16
 8000af4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000b0a:	2207      	movs	r2, #7
 8000b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000b16:	2208      	movs	r2, #8
 8000b18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <MX_SPI1_Init+0x84>)
 8000b1c:	f00a fa42 	bl	800afa4 <HAL_SPI_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b26:	f000 fa0d 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi2);
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_SPI1_Init+0x8c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <MX_SPI1_Init+0x8c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b38:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000724 	.word	0x20000724
 8000b44:	40013000 	.word	0x40013000
 8000b48:	20000788 	.word	0x20000788

08000b4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000b52:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <MX_SPI2_Init+0x88>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000b66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b6a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000b82:	2208      	movs	r2, #8
 8000b84:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000b9a:	2207      	movs	r2, #7
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000baa:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <MX_SPI2_Init+0x84>)
 8000bac:	f00a f9fa 	bl	800afa4 <HAL_SPI_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000bb6:	f000 f9c5 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_SPI2_Init+0x8c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <MX_SPI2_Init+0x8c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bc8:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000788 	.word	0x20000788
 8000bd4:	40003800 	.word	0x40003800
 8000bd8:	20000724 	.word	0x20000724

08000bdc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <MX_TIM1_Init+0xa0>)
 8000bfc:	4a20      	ldr	r2, [pc, #128]	; (8000c80 <MX_TIM1_Init+0xa4>)
 8000bfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c00:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <MX_TIM1_Init+0xa0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_TIM1_Init+0xa0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_TIM1_Init+0xa0>)
 8000c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MX_TIM1_Init+0xa0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_TIM1_Init+0xa0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_TIM1_Init+0xa0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c26:	4815      	ldr	r0, [pc, #84]	; (8000c7c <MX_TIM1_Init+0xa0>)
 8000c28:	f00b f8cc 	bl	800bdc4 <HAL_TIM_Base_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c32:	f000 f987 	bl	8000f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4619      	mov	r1, r3
 8000c42:	480e      	ldr	r0, [pc, #56]	; (8000c7c <MX_TIM1_Init+0xa0>)
 8000c44:	f00b fad5 	bl	800c1f2 <HAL_TIM_ConfigClockSource>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c4e:	f000 f979 	bl	8000f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <MX_TIM1_Init+0xa0>)
 8000c64:	f00b fcb4 	bl	800c5d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c6e:	f000 f969 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200007ec 	.word	0x200007ec
 8000c80:	40012c00 	.word	0x40012c00

08000c84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_TIM6_Init+0x64>)
 8000c96:	4a15      	ldr	r2, [pc, #84]	; (8000cec <MX_TIM6_Init+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 43000-1;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_TIM6_Init+0x64>)
 8000c9c:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8000ca0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_TIM6_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_TIM6_Init+0x64>)
 8000caa:	2264      	movs	r2, #100	; 0x64
 8000cac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_TIM6_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <MX_TIM6_Init+0x64>)
 8000cb6:	f00b f885 	bl	800bdc4 <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000cc0:	f000 f940 	bl	8000f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_TIM6_Init+0x64>)
 8000cd2:	f00b fc7d 	bl	800c5d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000cdc:	f000 f932 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000838 	.word	0x20000838
 8000cec:	40001000 	.word	0x40001000

08000cf0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <MX_TIM7_Init+0x68>)
 8000d02:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <MX_TIM7_Init+0x6c>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 43000-1;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_TIM7_Init+0x68>)
 8000d08:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8000d0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MX_TIM7_Init+0x68>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_TIM7_Init+0x68>)
 8000d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d1a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_TIM7_Init+0x68>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d22:	480d      	ldr	r0, [pc, #52]	; (8000d58 <MX_TIM7_Init+0x68>)
 8000d24:	f00b f84e 	bl	800bdc4 <HAL_TIM_Base_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000d2e:	f000 f909 	bl	8000f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <MX_TIM7_Init+0x68>)
 8000d40:	f00b fc46 	bl	800c5d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000d4a:	f000 f8fb 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000884 	.word	0x20000884
 8000d5c:	40001400 	.word	0x40001400

08000d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	4b6f      	ldr	r3, [pc, #444]	; (8000f34 <MX_GPIO_Init+0x1d4>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a6e      	ldr	r2, [pc, #440]	; (8000f34 <MX_GPIO_Init+0x1d4>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b6c      	ldr	r3, [pc, #432]	; (8000f34 <MX_GPIO_Init+0x1d4>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b69      	ldr	r3, [pc, #420]	; (8000f34 <MX_GPIO_Init+0x1d4>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a68      	ldr	r2, [pc, #416]	; (8000f34 <MX_GPIO_Init+0x1d4>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b66      	ldr	r3, [pc, #408]	; (8000f34 <MX_GPIO_Init+0x1d4>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b63      	ldr	r3, [pc, #396]	; (8000f34 <MX_GPIO_Init+0x1d4>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a62      	ldr	r2, [pc, #392]	; (8000f34 <MX_GPIO_Init+0x1d4>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <MX_GPIO_Init+0x1d4>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	4b5d      	ldr	r3, [pc, #372]	; (8000f34 <MX_GPIO_Init+0x1d4>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a5c      	ldr	r2, [pc, #368]	; (8000f34 <MX_GPIO_Init+0x1d4>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b5a      	ldr	r3, [pc, #360]	; (8000f34 <MX_GPIO_Init+0x1d4>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 8000ddc:	4856      	ldr	r0, [pc, #344]	; (8000f38 <MX_GPIO_Init+0x1d8>)
 8000dde:	f008 fdb1 	bl	8009944 <HAL_GPIO_WritePin>
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|GLCDEN_Pin|GLCDCS2_Pin
                          |GLCDRW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY2_Pin|LCDRS_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2112      	movs	r1, #18
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dea:	f008 fdab 	bl	8009944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2125      	movs	r1, #37	; 0x25
 8000df2:	4852      	ldr	r0, [pc, #328]	; (8000f3c <MX_GPIO_Init+0x1dc>)
 8000df4:	f008 fda6 	bl	8009944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dfe:	484f      	ldr	r0, [pc, #316]	; (8000f3c <MX_GPIO_Init+0x1dc>)
 8000e00:	f008 fda0 	bl	8009944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	484b      	ldr	r0, [pc, #300]	; (8000f38 <MX_GPIO_Init+0x1d8>)
 8000e0a:	f008 fd9b 	bl	8009944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(InputMachine_GPIO_Port, InputMachine_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f008 fd94 	bl	8009944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2104      	movs	r1, #4
 8000e20:	4847      	ldr	r0, [pc, #284]	; (8000f40 <MX_GPIO_Init+0x1e0>)
 8000e22:	f008 fd8f 	bl	8009944 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCDD6_Pin LCDD5_Pin LCDD4_Pin LCDD3_Pin
                           LCDD2_Pin LCDD1_Pin LCDD0_Pin RELAY3_Pin
                           RELAY4_Pin W5500_INT_Pin W5500RST_Pin */
  GPIO_InitStruct.Pin = LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 8000e26:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8000e2a:	617b      	str	r3, [r7, #20]
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|W5500RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	483e      	ldr	r0, [pc, #248]	; (8000f38 <MX_GPIO_Init+0x1d8>)
 8000e40:	f008 fc06 	bl	8009650 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY2_Pin InputMachine_Pin */
  GPIO_InitStruct.Pin = RELAY2_Pin|InputMachine_Pin;
 8000e44:	f241 0302 	movw	r3, #4098	; 0x1002
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f008 fbf6 	bl	8009650 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDRS_Pin */
  GPIO_InitStruct.Pin = LCDRS_Pin;
 8000e64:	2310      	movs	r3, #16
 8000e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCDRS_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f008 fbe7 	bl	8009650 <HAL_GPIO_Init>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin WIFIRST_Pin LCDD7_Pin */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin;
 8000e82:	2325      	movs	r3, #37	; 0x25
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4828      	ldr	r0, [pc, #160]	; (8000f3c <MX_GPIO_Init+0x1dc>)
 8000e9a:	f008 fbd9 	bl	8009650 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4821      	ldr	r0, [pc, #132]	; (8000f3c <MX_GPIO_Init+0x1dc>)
 8000eb8:	f008 fbca 	bl	8009650 <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine1_Pin InputMachine2_Pin */
  GPIO_InitStruct.Pin = InputMachine1_Pin|InputMachine2_Pin;
 8000ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4819      	ldr	r0, [pc, #100]	; (8000f38 <MX_GPIO_Init+0x1d8>)
 8000ed2:	f008 fbbd 	bl	8009650 <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine3_Pin InputMachine4_Pin InputMachine5_Pin InputMachine6_Pin */
  GPIO_InitStruct.Pin = InputMachine3_Pin|InputMachine4_Pin|InputMachine5_Pin|InputMachine6_Pin;
 8000ed6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f008 fbaf 	bl	8009650 <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCDEN_Pin GLCDCS2_Pin GLCDRW_Pin */
  GPIO_InitStruct.Pin = GLCDEN_Pin|GLCDCS2_Pin|GLCDRW_Pin;
 8000ef2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480b      	ldr	r0, [pc, #44]	; (8000f38 <MX_GPIO_Init+0x1d8>)
 8000f0c:	f008 fba0 	bl	8009650 <HAL_GPIO_Init>

  /*Configure GPIO pin : GLCDCS1_Pin */
  GPIO_InitStruct.Pin = GLCDCS1_Pin;
 8000f10:	2304      	movs	r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GLCDCS1_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <MX_GPIO_Init+0x1e0>)
 8000f28:	f008 fb92 	bl	8009650 <HAL_GPIO_Init>

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000
 8000f38:	48000800 	.word	0x48000800
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	48000c00 	.word	0x48000c00

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <Error_Handler+0x8>
	...

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_MspInit+0x44>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <HAL_MspInit+0x44>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6613      	str	r3, [r2, #96]	; 0x60
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <HAL_MspInit+0x44>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_MspInit+0x44>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_MspInit+0x44>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_MspInit+0x44>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000

08000f98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0a2      	sub	sp, #136	; 0x88
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2260      	movs	r2, #96	; 0x60
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f00c ff81 	bl	800dec0 <memset>
  if(hi2c->Instance==I2C1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a20      	ldr	r2, [pc, #128]	; (8001044 <HAL_I2C_MspInit+0xac>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d138      	bne.n	800103a <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fc8:	2340      	movs	r3, #64	; 0x40
 8000fca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f009 fca9 	bl	800a92c <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fe0:	f7ff ffb0 	bl	8000f44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_I2C_MspInit+0xb0>)
 8000fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_I2C_MspInit+0xb0>)
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_I2C_MspInit+0xb0>)
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ffc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001000:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001002:	2312      	movs	r3, #18
 8001004:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001010:	2304      	movs	r3, #4
 8001012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800101a:	4619      	mov	r1, r3
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <HAL_I2C_MspInit+0xb4>)
 800101e:	f008 fb17 	bl	8009650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_I2C_MspInit+0xb0>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_I2C_MspInit+0xb0>)
 8001028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800102c:	6593      	str	r3, [r2, #88]	; 0x58
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_I2C_MspInit+0xb0>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3788      	adds	r7, #136	; 0x88
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40005400 	.word	0x40005400
 8001048:	40021000 	.word	0x40021000
 800104c:	48000400 	.word	0x48000400

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0a6      	sub	sp, #152	; 0x98
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106c:	2260      	movs	r2, #96	; 0x60
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f00c ff25 	bl	800dec0 <memset>
  if(huart->Instance==LPUART1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a6b      	ldr	r2, [pc, #428]	; (8001228 <HAL_UART_MspInit+0x1d8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d144      	bne.n	800110a <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001080:	2320      	movs	r3, #32
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001084:	2300      	movs	r3, #0
 8001086:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	4618      	mov	r0, r3
 800108e:	f009 fc4d 	bl	800a92c <HAL_RCCEx_PeriphCLKConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001098:	f7ff ff54 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800109c:	4b63      	ldr	r3, [pc, #396]	; (800122c <HAL_UART_MspInit+0x1dc>)
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	4a62      	ldr	r2, [pc, #392]	; (800122c <HAL_UART_MspInit+0x1dc>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80010a8:	4b60      	ldr	r3, [pc, #384]	; (800122c <HAL_UART_MspInit+0x1dc>)
 80010aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
 80010b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b4:	4b5d      	ldr	r3, [pc, #372]	; (800122c <HAL_UART_MspInit+0x1dc>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	4a5c      	ldr	r2, [pc, #368]	; (800122c <HAL_UART_MspInit+0x1dc>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c0:	4b5a      	ldr	r3, [pc, #360]	; (800122c <HAL_UART_MspInit+0x1dc>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80010e6:	2308      	movs	r3, #8
 80010e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80010f0:	4619      	mov	r1, r3
 80010f2:	484f      	ldr	r0, [pc, #316]	; (8001230 <HAL_UART_MspInit+0x1e0>)
 80010f4:	f008 faac 	bl	8009650 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2046      	movs	r0, #70	; 0x46
 80010fe:	f008 f9f2 	bl	80094e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001102:	2046      	movs	r0, #70	; 0x46
 8001104:	f008 fa0b 	bl	800951e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001108:	e089      	b.n	800121e <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a49      	ldr	r2, [pc, #292]	; (8001234 <HAL_UART_MspInit+0x1e4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d143      	bne.n	800119c <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001114:	2301      	movs	r3, #1
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001118:	2300      	movs	r3, #0
 800111a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	4618      	mov	r0, r3
 8001122:	f009 fc03 	bl	800a92c <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800112c:	f7ff ff0a 	bl	8000f44 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001130:	4b3e      	ldr	r3, [pc, #248]	; (800122c <HAL_UART_MspInit+0x1dc>)
 8001132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001134:	4a3d      	ldr	r2, [pc, #244]	; (800122c <HAL_UART_MspInit+0x1dc>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113a:	6613      	str	r3, [r2, #96]	; 0x60
 800113c:	4b3b      	ldr	r3, [pc, #236]	; (800122c <HAL_UART_MspInit+0x1dc>)
 800113e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001148:	4b38      	ldr	r3, [pc, #224]	; (800122c <HAL_UART_MspInit+0x1dc>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	4a37      	ldr	r2, [pc, #220]	; (800122c <HAL_UART_MspInit+0x1dc>)
 800114e:	f043 0302 	orr.w	r3, r3, #2
 8001152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001154:	4b35      	ldr	r3, [pc, #212]	; (800122c <HAL_UART_MspInit+0x1dc>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001160:	23c0      	movs	r3, #192	; 0xc0
 8001162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001178:	2307      	movs	r3, #7
 800117a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001182:	4619      	mov	r1, r3
 8001184:	482a      	ldr	r0, [pc, #168]	; (8001230 <HAL_UART_MspInit+0x1e0>)
 8001186:	f008 fa63 	bl	8009650 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2025      	movs	r0, #37	; 0x25
 8001190:	f008 f9a9 	bl	80094e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001194:	2025      	movs	r0, #37	; 0x25
 8001196:	f008 f9c2 	bl	800951e <HAL_NVIC_EnableIRQ>
}
 800119a:	e040      	b.n	800121e <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a25      	ldr	r2, [pc, #148]	; (8001238 <HAL_UART_MspInit+0x1e8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d13b      	bne.n	800121e <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	4618      	mov	r0, r3
 80011b4:	f009 fbba 	bl	800a92c <HAL_RCCEx_PeriphCLKConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_UART_MspInit+0x172>
      Error_Handler();
 80011be:	f7ff fec1 	bl	8000f44 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_UART_MspInit+0x1dc>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	4a19      	ldr	r2, [pc, #100]	; (800122c <HAL_UART_MspInit+0x1dc>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	6593      	str	r3, [r2, #88]	; 0x58
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_UART_MspInit+0x1dc>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_UART_MspInit+0x1dc>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a13      	ldr	r2, [pc, #76]	; (800122c <HAL_UART_MspInit+0x1dc>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_UART_MspInit+0x1dc>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011f2:	230c      	movs	r3, #12
 80011f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800120a:	2307      	movs	r3, #7
 800120c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001214:	4619      	mov	r1, r3
 8001216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121a:	f008 fa19 	bl	8009650 <HAL_GPIO_Init>
}
 800121e:	bf00      	nop
 8001220:	3798      	adds	r7, #152	; 0x98
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40008000 	.word	0x40008000
 800122c:	40021000 	.word	0x40021000
 8001230:	48000400 	.word	0x48000400
 8001234:	40013800 	.word	0x40013800
 8001238:	40004400 	.word	0x40004400

0800123c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	; 0x30
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a2f      	ldr	r2, [pc, #188]	; (8001318 <HAL_SPI_MspInit+0xdc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d129      	bne.n	80012b2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <HAL_SPI_MspInit+0xe0>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001262:	4a2e      	ldr	r2, [pc, #184]	; (800131c <HAL_SPI_MspInit+0xe0>)
 8001264:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001268:	6613      	str	r3, [r2, #96]	; 0x60
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <HAL_SPI_MspInit+0xe0>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b29      	ldr	r3, [pc, #164]	; (800131c <HAL_SPI_MspInit+0xe0>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a28      	ldr	r2, [pc, #160]	; (800131c <HAL_SPI_MspInit+0xe0>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <HAL_SPI_MspInit+0xe0>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800128e:	23e0      	movs	r3, #224	; 0xe0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800129e:	2305      	movs	r3, #5
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ac:	f008 f9d0 	bl	8009650 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012b0:	e02d      	b.n	800130e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a1a      	ldr	r2, [pc, #104]	; (8001320 <HAL_SPI_MspInit+0xe4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d128      	bne.n	800130e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_SPI_MspInit+0xe0>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	4a16      	ldr	r2, [pc, #88]	; (800131c <HAL_SPI_MspInit+0xe0>)
 80012c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c6:	6593      	str	r3, [r2, #88]	; 0x58
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_SPI_MspInit+0xe0>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_SPI_MspInit+0xe0>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_SPI_MspInit+0xe0>)
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_SPI_MspInit+0xe0>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012fe:	2305      	movs	r3, #5
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <HAL_SPI_MspInit+0xe8>)
 800130a:	f008 f9a1 	bl	8009650 <HAL_GPIO_Init>
}
 800130e:	bf00      	nop
 8001310:	3730      	adds	r7, #48	; 0x30
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40013000 	.word	0x40013000
 800131c:	40021000 	.word	0x40021000
 8001320:	40003800 	.word	0x40003800
 8001324:	48000400 	.word	0x48000400

08001328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <HAL_TIM_Base_MspInit+0x9c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d10c      	bne.n	8001354 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133e:	4a22      	ldr	r2, [pc, #136]	; (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 8001340:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001344:	6613      	str	r3, [r2, #96]	; 0x60
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001352:	e032      	b.n	80013ba <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <HAL_TIM_Base_MspInit+0xa4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d114      	bne.n	8001388 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 8001364:	f043 0310 	orr.w	r3, r3, #16
 8001368:	6593      	str	r3, [r2, #88]	; 0x58
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2036      	movs	r0, #54	; 0x36
 800137c:	f008 f8b3 	bl	80094e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001380:	2036      	movs	r0, #54	; 0x36
 8001382:	f008 f8cc 	bl	800951e <HAL_NVIC_EnableIRQ>
}
 8001386:	e018      	b.n	80013ba <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <HAL_TIM_Base_MspInit+0xa8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d113      	bne.n	80013ba <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	6593      	str	r3, [r2, #88]	; 0x58
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	f003 0320 	and.w	r3, r3, #32
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	2037      	movs	r0, #55	; 0x37
 80013b0:	f008 f899 	bl	80094e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80013b4:	2037      	movs	r0, #55	; 0x37
 80013b6:	f008 f8b2 	bl	800951e <HAL_NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40012c00 	.word	0x40012c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40001000 	.word	0x40001000
 80013d0:	40001400 	.word	0x40001400

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f007 ff42 	bl	80092a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <USART1_IRQHandler+0x10>)
 800142e:	f00b fa65 	bl	800c8fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000061c 	.word	0x2000061c

0800143c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <TIM6_DAC_IRQHandler+0x10>)
 8001442:	f00a fdb7 	bl	800bfb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000838 	.word	0x20000838

08001450 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <TIM7_IRQHandler+0x10>)
 8001456:	f00a fdad 	bl	800bfb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000884 	.word	0x20000884

08001464 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <LPUART1_IRQHandler+0x10>)
 800146a:	f00b fa47 	bl	800c8fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000598 	.word	0x20000598

08001478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	return 1;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <_kill>:

int _kill(int pid, int sig)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001492:	f00c fccd 	bl	800de30 <__errno>
 8001496:	4603      	mov	r3, r0
 8001498:	2216      	movs	r2, #22
 800149a:	601a      	str	r2, [r3, #0]
	return -1;
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_exit>:

void _exit (int status)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ffe7 	bl	8001488 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ba:	e7fe      	b.n	80014ba <_exit+0x12>

080014bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	e00a      	b.n	80014e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ce:	f3af 8000 	nop.w
 80014d2:	4601      	mov	r1, r0
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	60ba      	str	r2, [r7, #8]
 80014da:	b2ca      	uxtb	r2, r1
 80014dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dbf0      	blt.n	80014ce <_read+0x12>
	}

return len;
 80014ec:	687b      	ldr	r3, [r7, #4]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e009      	b.n	800151c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbf1      	blt.n	8001508 <_write+0x12>
	}
	return len;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_close>:

int _close(int file)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
	return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001556:	605a      	str	r2, [r3, #4]
	return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_isatty>:

int _isatty(int file)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	return 1;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
	return 0;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a0:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <_sbrk+0x5c>)
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <_sbrk+0x60>)
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <_sbrk+0x64>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <_sbrk+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d207      	bcs.n	80015d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c8:	f00c fc32 	bl	800de30 <__errno>
 80015cc:	4603      	mov	r3, r0
 80015ce:	220c      	movs	r2, #12
 80015d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	e009      	b.n	80015ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <_sbrk+0x64>)
 80015e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20010000 	.word	0x20010000
 80015f8:	00000400 	.word	0x00000400
 80015fc:	200008d0 	.word	0x200008d0
 8001600:	20002db8 	.word	0x20002db8

08001604 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <SystemInit+0x20>)
 800160a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <SystemInit+0x20>)
 8001610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af02      	add	r7, sp, #8
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001632:	f107 020f 	add.w	r2, r7, #15
 8001636:	1df9      	adds	r1, r7, #7
 8001638:	2364      	movs	r3, #100	; 0x64
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <W25qxx_Spi+0x28>)
 8001640:	f009 fff1 	bl	800b626 <HAL_SPI_TransmitReceive>
	return ret;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000724 	.word	0x20000724

08001654 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2101      	movs	r1, #1
 800166e:	4813      	ldr	r0, [pc, #76]	; (80016bc <W25qxx_ReadID+0x68>)
 8001670:	f008 f968 	bl	8009944 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001674:	209f      	movs	r0, #159	; 0x9f
 8001676:	f7ff ffd7 	bl	8001628 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800167a:	20a5      	movs	r0, #165	; 0xa5
 800167c:	f7ff ffd4 	bl	8001628 <W25qxx_Spi>
 8001680:	4603      	mov	r3, r0
 8001682:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001684:	20a5      	movs	r0, #165	; 0xa5
 8001686:	f7ff ffcf 	bl	8001628 <W25qxx_Spi>
 800168a:	4603      	mov	r3, r0
 800168c:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800168e:	20a5      	movs	r0, #165	; 0xa5
 8001690:	f7ff ffca 	bl	8001628 <W25qxx_Spi>
 8001694:	4603      	mov	r3, r0
 8001696:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2101      	movs	r1, #1
 800169c:	4807      	ldr	r0, [pc, #28]	; (80016bc <W25qxx_ReadID+0x68>)
 800169e:	f008 f951 	bl	8009944 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	041a      	lsls	r2, r3, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	4313      	orrs	r3, r2
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
	return Temp;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	48000400 	.word	0x48000400

080016c0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2101      	movs	r1, #1
 80016ca:	4816      	ldr	r0, [pc, #88]	; (8001724 <W25qxx_ReadUniqID+0x64>)
 80016cc:	f008 f93a 	bl	8009944 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80016d0:	204b      	movs	r0, #75	; 0x4b
 80016d2:	f7ff ffa9 	bl	8001628 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	71fb      	strb	r3, [r7, #7]
 80016da:	e005      	b.n	80016e8 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80016dc:	20a5      	movs	r0, #165	; 0xa5
 80016de:	f7ff ffa3 	bl	8001628 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	3301      	adds	r3, #1
 80016e6:	71fb      	strb	r3, [r7, #7]
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d9f6      	bls.n	80016dc <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	71bb      	strb	r3, [r7, #6]
 80016f2:	e00b      	b.n	800170c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80016f4:	79bc      	ldrb	r4, [r7, #6]
 80016f6:	20a5      	movs	r0, #165	; 0xa5
 80016f8:	f7ff ff96 	bl	8001628 <W25qxx_Spi>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <W25qxx_ReadUniqID+0x68>)
 8001702:	4423      	add	r3, r4
 8001704:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8001706:	79bb      	ldrb	r3, [r7, #6]
 8001708:	3301      	adds	r3, #1
 800170a:	71bb      	strb	r3, [r7, #6]
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	2b07      	cmp	r3, #7
 8001710:	d9f0      	bls.n	80016f4 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001712:	2201      	movs	r2, #1
 8001714:	2101      	movs	r1, #1
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <W25qxx_ReadUniqID+0x64>)
 8001718:	f008 f914 	bl	8009944 <HAL_GPIO_WritePin>
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bd90      	pop	{r4, r7, pc}
 8001724:	48000400 	.word	0x48000400
 8001728:	200008d4 	.word	0x200008d4

0800172c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2101      	movs	r1, #1
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <W25qxx_WriteEnable+0x28>)
 8001736:	f008 f905 	bl	8009944 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800173a:	2006      	movs	r0, #6
 800173c:	f7ff ff74 	bl	8001628 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001740:	2201      	movs	r2, #1
 8001742:	2101      	movs	r1, #1
 8001744:	4803      	ldr	r0, [pc, #12]	; (8001754 <W25qxx_WriteEnable+0x28>)
 8001746:	f008 f8fd 	bl	8009944 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800174a:	2001      	movs	r0, #1
 800174c:	f007 fdcc 	bl	80092e8 <HAL_Delay>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	48000400 	.word	0x48000400

08001758 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	2101      	movs	r1, #1
 800176a:	481c      	ldr	r0, [pc, #112]	; (80017dc <W25qxx_ReadStatusRegister+0x84>)
 800176c:	f008 f8ea 	bl	8009944 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10c      	bne.n	8001790 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8001776:	2005      	movs	r0, #5
 8001778:	f7ff ff56 	bl	8001628 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800177c:	20a5      	movs	r0, #165	; 0xa5
 800177e:	f7ff ff53 	bl	8001628 <W25qxx_Spi>
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001786:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <W25qxx_ReadStatusRegister+0x88>)
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800178e:	e01b      	b.n	80017c8 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d10c      	bne.n	80017b0 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8001796:	2035      	movs	r0, #53	; 0x35
 8001798:	f7ff ff46 	bl	8001628 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800179c:	20a5      	movs	r0, #165	; 0xa5
 800179e:	f7ff ff43 	bl	8001628 <W25qxx_Spi>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80017a6:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <W25qxx_ReadStatusRegister+0x88>)
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80017ae:	e00b      	b.n	80017c8 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80017b0:	2015      	movs	r0, #21
 80017b2:	f7ff ff39 	bl	8001628 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80017b6:	20a5      	movs	r0, #165	; 0xa5
 80017b8:	f7ff ff36 	bl	8001628 <W25qxx_Spi>
 80017bc:	4603      	mov	r3, r0
 80017be:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <W25qxx_ReadStatusRegister+0x88>)
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2101      	movs	r1, #1
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <W25qxx_ReadStatusRegister+0x84>)
 80017ce:	f008 f8b9 	bl	8009944 <HAL_GPIO_WritePin>
	return status;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	48000400 	.word	0x48000400
 80017e0:	200008d4 	.word	0x200008d4

080017e4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f007 fd7d 	bl	80092e8 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2101      	movs	r1, #1
 80017f2:	480f      	ldr	r0, [pc, #60]	; (8001830 <W25qxx_WaitForWriteEnd+0x4c>)
 80017f4:	f008 f8a6 	bl	8009944 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80017f8:	2005      	movs	r0, #5
 80017fa:	f7ff ff15 	bl	8001628 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80017fe:	20a5      	movs	r0, #165	; 0xa5
 8001800:	f7ff ff12 	bl	8001628 <W25qxx_Spi>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <W25qxx_WaitForWriteEnd+0x50>)
 800180a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800180e:	2001      	movs	r0, #1
 8001810:	f007 fd6a 	bl	80092e8 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <W25qxx_WaitForWriteEnd+0x50>)
 8001816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ed      	bne.n	80017fe <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001822:	2201      	movs	r2, #1
 8001824:	2101      	movs	r1, #1
 8001826:	4802      	ldr	r0, [pc, #8]	; (8001830 <W25qxx_WaitForWriteEnd+0x4c>)
 8001828:	f008 f88c 	bl	8009944 <HAL_GPIO_WritePin>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	48000400 	.word	0x48000400
 8001834:	200008d4 	.word	0x200008d4

08001838 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800183e:	4b65      	ldr	r3, [pc, #404]	; (80019d4 <W25qxx_Init+0x19c>)
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8001846:	e002      	b.n	800184e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8001848:	2001      	movs	r0, #1
 800184a:	f007 fd4d 	bl	80092e8 <HAL_Delay>
	while (HAL_GetTick() < 100)
 800184e:	f007 fd3f 	bl	80092d0 <HAL_GetTick>
 8001852:	4603      	mov	r3, r0
 8001854:	2b63      	cmp	r3, #99	; 0x63
 8001856:	d9f7      	bls.n	8001848 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2101      	movs	r1, #1
 800185c:	485e      	ldr	r0, [pc, #376]	; (80019d8 <W25qxx_Init+0x1a0>)
 800185e:	f008 f871 	bl	8009944 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8001862:	2064      	movs	r0, #100	; 0x64
 8001864:	f007 fd40 	bl	80092e8 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8001868:	f7ff fef4 	bl	8001654 <W25qxx_ReadID>
 800186c:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	3b11      	subs	r3, #17
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d86c      	bhi.n	8001952 <W25qxx_Init+0x11a>
 8001878:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <W25qxx_Init+0x48>)
 800187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187e:	bf00      	nop
 8001880:	08001945 	.word	0x08001945
 8001884:	08001937 	.word	0x08001937
 8001888:	08001929 	.word	0x08001929
 800188c:	0800191b 	.word	0x0800191b
 8001890:	0800190d 	.word	0x0800190d
 8001894:	080018ff 	.word	0x080018ff
 8001898:	080018f1 	.word	0x080018f1
 800189c:	080018e1 	.word	0x080018e1
 80018a0:	080018d1 	.word	0x080018d1
 80018a4:	08001953 	.word	0x08001953
 80018a8:	08001953 	.word	0x08001953
 80018ac:	08001953 	.word	0x08001953
 80018b0:	08001953 	.word	0x08001953
 80018b4:	08001953 	.word	0x08001953
 80018b8:	08001953 	.word	0x08001953
 80018bc:	080018c1 	.word	0x080018c1
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80018c0:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <W25qxx_Init+0x19c>)
 80018c2:	220a      	movs	r2, #10
 80018c4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80018c6:	4b43      	ldr	r3, [pc, #268]	; (80019d4 <W25qxx_Init+0x19c>)
 80018c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018cc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 80018ce:	e046      	b.n	800195e <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80018d0:	4b40      	ldr	r3, [pc, #256]	; (80019d4 <W25qxx_Init+0x19c>)
 80018d2:	2209      	movs	r2, #9
 80018d4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80018d6:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <W25qxx_Init+0x19c>)
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 80018de:	e03e      	b.n	800195e <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80018e0:	4b3c      	ldr	r3, [pc, #240]	; (80019d4 <W25qxx_Init+0x19c>)
 80018e2:	2208      	movs	r2, #8
 80018e4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80018e6:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <W25qxx_Init+0x19c>)
 80018e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 80018ee:	e036      	b.n	800195e <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80018f0:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <W25qxx_Init+0x19c>)
 80018f2:	2207      	movs	r2, #7
 80018f4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80018f6:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <W25qxx_Init+0x19c>)
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80018fc:	e02f      	b.n	800195e <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80018fe:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <W25qxx_Init+0x19c>)
 8001900:	2206      	movs	r2, #6
 8001902:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8001904:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <W25qxx_Init+0x19c>)
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800190a:	e028      	b.n	800195e <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800190c:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <W25qxx_Init+0x19c>)
 800190e:	2205      	movs	r2, #5
 8001910:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8001912:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <W25qxx_Init+0x19c>)
 8001914:	2220      	movs	r2, #32
 8001916:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8001918:	e021      	b.n	800195e <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <W25qxx_Init+0x19c>)
 800191c:	2204      	movs	r2, #4
 800191e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8001920:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <W25qxx_Init+0x19c>)
 8001922:	2210      	movs	r2, #16
 8001924:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8001926:	e01a      	b.n	800195e <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <W25qxx_Init+0x19c>)
 800192a:	2203      	movs	r2, #3
 800192c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800192e:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <W25qxx_Init+0x19c>)
 8001930:	2208      	movs	r2, #8
 8001932:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8001934:	e013      	b.n	800195e <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8001936:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <W25qxx_Init+0x19c>)
 8001938:	2202      	movs	r2, #2
 800193a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <W25qxx_Init+0x19c>)
 800193e:	2204      	movs	r2, #4
 8001940:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8001942:	e00c      	b.n	800195e <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <W25qxx_Init+0x19c>)
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <W25qxx_Init+0x19c>)
 800194c:	2202      	movs	r2, #2
 800194e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8001950:	e005      	b.n	800195e <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <W25qxx_Init+0x19c>)
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800195a:	2300      	movs	r3, #0
 800195c:	e036      	b.n	80019cc <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <W25qxx_Init+0x19c>)
 8001960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001964:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <W25qxx_Init+0x19c>)
 8001968:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800196c:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <W25qxx_Init+0x19c>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <W25qxx_Init+0x19c>)
 8001976:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <W25qxx_Init+0x19c>)
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <W25qxx_Init+0x19c>)
 800197e:	6912      	ldr	r2, [r2, #16]
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <W25qxx_Init+0x19c>)
 8001986:	8952      	ldrh	r2, [r2, #10]
 8001988:	fbb3 f3f2 	udiv	r3, r3, r2
 800198c:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <W25qxx_Init+0x19c>)
 800198e:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <W25qxx_Init+0x19c>)
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <W25qxx_Init+0x19c>)
 8001998:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <W25qxx_Init+0x19c>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <W25qxx_Init+0x19c>)
 80019a0:	6912      	ldr	r2, [r2, #16]
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	0a9b      	lsrs	r3, r3, #10
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <W25qxx_Init+0x19c>)
 80019aa:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80019ac:	f7ff fe88 	bl	80016c0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7ff fed1 	bl	8001758 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80019b6:	2002      	movs	r0, #2
 80019b8:	f7ff fece 	bl	8001758 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80019bc:	2003      	movs	r0, #3
 80019be:	f7ff fecb 	bl	8001758 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <W25qxx_Init+0x19c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200008d4 	.word	0x200008d4
 80019d8:	48000400 	.word	0x48000400

080019dc <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80019e4:	e002      	b.n	80019ec <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f007 fc7e 	bl	80092e8 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <W25qxx_EraseSector+0xa8>)
 80019ee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d0f7      	beq.n	80019e6 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <W25qxx_EraseSector+0xa8>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 80019fe:	f7ff fef1 	bl	80017e4 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <W25qxx_EraseSector+0xa8>)
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8001a0e:	f7ff fe8d 	bl	800172c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2101      	movs	r1, #1
 8001a16:	481c      	ldr	r0, [pc, #112]	; (8001a88 <W25qxx_EraseSector+0xac>)
 8001a18:	f007 ff94 	bl	8009944 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <W25qxx_EraseSector+0xa8>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d909      	bls.n	8001a38 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8001a24:	2021      	movs	r0, #33	; 0x21
 8001a26:	f7ff fdff 	bl	8001628 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	0e1b      	lsrs	r3, r3, #24
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fdf9 	bl	8001628 <W25qxx_Spi>
 8001a36:	e002      	b.n	8001a3e <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8001a38:	2020      	movs	r0, #32
 8001a3a:	f7ff fdf5 	bl	8001628 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	0c1b      	lsrs	r3, r3, #16
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fdef 	bl	8001628 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fde9 	bl	8001628 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fde4 	bl	8001628 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	2101      	movs	r1, #1
 8001a64:	4808      	ldr	r0, [pc, #32]	; (8001a88 <W25qxx_EraseSector+0xac>)
 8001a66:	f007 ff6d 	bl	8009944 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8001a6a:	f7ff febb 	bl	80017e4 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f007 fc3a 	bl	80092e8 <HAL_Delay>
	w25qxx.Lock = 0;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <W25qxx_EraseSector+0xa8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200008d4 	.word	0x200008d4
 8001a88:	48000400 	.word	0x48000400

08001a8c <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <W25qxx_SectorToPage+0x28>)
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <W25qxx_SectorToPage+0x28>)
 8001aa0:	8952      	ldrh	r2, [r2, #10]
 8001aa2:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200008d4 	.word	0x200008d4

08001ab8 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8001ac6:	e002      	b.n	8001ace <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f007 fc0d 	bl	80092e8 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8001ace:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <W25qxx_WritePage+0xfc>)
 8001ad0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d0f7      	beq.n	8001ac8 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <W25qxx_WritePage+0xfc>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a33      	ldr	r2, [pc, #204]	; (8001bb4 <W25qxx_WritePage+0xfc>)
 8001ae8:	8952      	ldrh	r2, [r2, #10]
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d802      	bhi.n	8001af4 <W25qxx_WritePage+0x3c>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d105      	bne.n	8001b00 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <W25qxx_WritePage+0xfc>)
 8001af6:	895b      	ldrh	r3, [r3, #10]
 8001af8:	461a      	mov	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a2b      	ldr	r2, [pc, #172]	; (8001bb4 <W25qxx_WritePage+0xfc>)
 8001b08:	8952      	ldrh	r2, [r2, #10]
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d905      	bls.n	8001b1a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001b0e:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <W25qxx_WritePage+0xfc>)
 8001b10:	895b      	ldrh	r3, [r3, #10]
 8001b12:	461a      	mov	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8001b1a:	f7ff fe63 	bl	80017e4 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8001b1e:	f7ff fe05 	bl	800172c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	4824      	ldr	r0, [pc, #144]	; (8001bb8 <W25qxx_WritePage+0x100>)
 8001b28:	f007 ff0c 	bl	8009944 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <W25qxx_WritePage+0xfc>)
 8001b2e:	895b      	ldrh	r3, [r3, #10]
 8001b30:	461a      	mov	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <W25qxx_WritePage+0xfc>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d909      	bls.n	8001b5a <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8001b46:	2012      	movs	r0, #18
 8001b48:	f7ff fd6e 	bl	8001628 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	0e1b      	lsrs	r3, r3, #24
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fd68 	bl	8001628 <W25qxx_Spi>
 8001b58:	e002      	b.n	8001b60 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f7ff fd64 	bl	8001628 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fd5e 	bl	8001628 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	0a1b      	lsrs	r3, r3, #8
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fd58 	bl	8001628 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fd53 	bl	8001628 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	2364      	movs	r3, #100	; 0x64
 8001b88:	68f9      	ldr	r1, [r7, #12]
 8001b8a:	480c      	ldr	r0, [pc, #48]	; (8001bbc <W25qxx_WritePage+0x104>)
 8001b8c:	f009 faad 	bl	800b0ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001b90:	2201      	movs	r2, #1
 8001b92:	2101      	movs	r1, #1
 8001b94:	4808      	ldr	r0, [pc, #32]	; (8001bb8 <W25qxx_WritePage+0x100>)
 8001b96:	f007 fed5 	bl	8009944 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8001b9a:	f7ff fe23 	bl	80017e4 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f007 fba2 	bl	80092e8 <HAL_Delay>
	w25qxx.Lock = 0;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <W25qxx_WritePage+0xfc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200008d4 	.word	0x200008d4
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	20000724 	.word	0x20000724

08001bc0 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8001bce:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <W25qxx_WriteSector+0xc0>)
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d802      	bhi.n	8001bde <W25qxx_WriteSector+0x1e>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <W25qxx_WriteSector+0xc0>)
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8001be4:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <W25qxx_WriteSector+0xc0>)
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d243      	bcs.n	8001c76 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	441a      	add	r2, r3
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <W25qxx_WriteSector+0xc0>)
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d905      	bls.n	8001c08 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <W25qxx_WriteSector+0xc0>)
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	e001      	b.n	8001c0c <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8001c0c:	68b8      	ldr	r0, [r7, #8]
 8001c0e:	f7ff ff3d 	bl	8001a8c <W25qxx_SectorToPage>
 8001c12:	4602      	mov	r2, r0
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <W25qxx_WriteSector+0xc0>)
 8001c16:	895b      	ldrh	r3, [r3, #10]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c20:	4413      	add	r3, r2
 8001c22:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <W25qxx_WriteSector+0xc0>)
 8001c26:	895b      	ldrh	r3, [r3, #10]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c30:	fb01 f202 	mul.w	r2, r1, r2
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	69f9      	ldr	r1, [r7, #28]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f7ff ff3a 	bl	8001ab8 <W25qxx_WritePage>
		StartPage++;
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	3301      	adds	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <W25qxx_WriteSector+0xc0>)
 8001c4c:	895b      	ldrh	r3, [r3, #10]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	1a9a      	subs	r2, r3, r2
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	4413      	add	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <W25qxx_WriteSector+0xc0>)
 8001c5c:	895b      	ldrh	r3, [r3, #10]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	dce1      	bgt.n	8001c38 <W25qxx_WriteSector+0x78>
 8001c74:	e000      	b.n	8001c78 <W25qxx_WriteSector+0xb8>
		return;
 8001c76:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200008d4 	.word	0x200008d4

08001c84 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8001c92:	e002      	b.n	8001c9a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f007 fb27 	bl	80092e8 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8001c9a:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <W25qxx_ReadPage+0xf0>)
 8001c9c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d0f7      	beq.n	8001c94 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8001ca4:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <W25qxx_ReadPage+0xf0>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8001cac:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <W25qxx_ReadPage+0xf0>)
 8001cae:	895b      	ldrh	r3, [r3, #10]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d802      	bhi.n	8001cbe <W25qxx_ReadPage+0x3a>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <W25qxx_ReadPage+0xf0>)
 8001cc0:	895b      	ldrh	r3, [r3, #10]
 8001cc2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a2a      	ldr	r2, [pc, #168]	; (8001d74 <W25qxx_ReadPage+0xf0>)
 8001ccc:	8952      	ldrh	r2, [r2, #10]
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d905      	bls.n	8001cde <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001cd2:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <W25qxx_ReadPage+0xf0>)
 8001cd4:	895b      	ldrh	r3, [r3, #10]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8001cde:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <W25qxx_ReadPage+0xf0>)
 8001ce0:	895b      	ldrh	r3, [r3, #10]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4820      	ldr	r0, [pc, #128]	; (8001d78 <W25qxx_ReadPage+0xf4>)
 8001cf6:	f007 fe25 	bl	8009944 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <W25qxx_ReadPage+0xf0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d909      	bls.n	8001d16 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8001d02:	200c      	movs	r0, #12
 8001d04:	f7ff fc90 	bl	8001628 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	0e1b      	lsrs	r3, r3, #24
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fc8a 	bl	8001628 <W25qxx_Spi>
 8001d14:	e002      	b.n	8001d1c <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8001d16:	200b      	movs	r0, #11
 8001d18:	f7ff fc86 	bl	8001628 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	0c1b      	lsrs	r3, r3, #16
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fc80 	bl	8001628 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fc7a 	bl	8001628 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fc75 	bl	8001628 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff fc72 	bl	8001628 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	2364      	movs	r3, #100	; 0x64
 8001d4a:	68f9      	ldr	r1, [r7, #12]
 8001d4c:	480b      	ldr	r0, [pc, #44]	; (8001d7c <W25qxx_ReadPage+0xf8>)
 8001d4e:	f009 fb3a 	bl	800b3c6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	2101      	movs	r1, #1
 8001d56:	4808      	ldr	r0, [pc, #32]	; (8001d78 <W25qxx_ReadPage+0xf4>)
 8001d58:	f007 fdf4 	bl	8009944 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f007 fac3 	bl	80092e8 <HAL_Delay>
	w25qxx.Lock = 0;
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <W25qxx_ReadPage+0xf0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200008d4 	.word	0x200008d4
 8001d78:	48000400 	.word	0x48000400
 8001d7c:	20000724 	.word	0x20000724

08001d80 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <W25qxx_ReadSector+0xc0>)
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d802      	bhi.n	8001d9e <W25qxx_ReadSector+0x1e>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8001d9e:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <W25qxx_ReadSector+0xc0>)
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <W25qxx_ReadSector+0xc0>)
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d243      	bcs.n	8001e36 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	441a      	add	r2, r3
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <W25qxx_ReadSector+0xc0>)
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d905      	bls.n	8001dc8 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8001dbc:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <W25qxx_ReadSector+0xc0>)
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	e001      	b.n	8001dcc <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8001dcc:	68b8      	ldr	r0, [r7, #8]
 8001dce:	f7ff fe5d 	bl	8001a8c <W25qxx_SectorToPage>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <W25qxx_ReadSector+0xc0>)
 8001dd6:	895b      	ldrh	r3, [r3, #10]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de0:	4413      	add	r3, r2
 8001de2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <W25qxx_ReadSector+0xc0>)
 8001de6:	895b      	ldrh	r3, [r3, #10]
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	fbb3 f1f2 	udiv	r1, r3, r2
 8001df0:	fb01 f202 	mul.w	r2, r1, r2
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	69f9      	ldr	r1, [r7, #28]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff ff40 	bl	8001c84 <W25qxx_ReadPage>
		StartPage++;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	3301      	adds	r3, #1
 8001e08:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <W25qxx_ReadSector+0xc0>)
 8001e0c:	895b      	ldrh	r3, [r3, #10]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	1a9a      	subs	r2, r3, r2
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	4413      	add	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <W25qxx_ReadSector+0xc0>)
 8001e1c:	895b      	ldrh	r3, [r3, #10]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	dce1      	bgt.n	8001df8 <W25qxx_ReadSector+0x78>
 8001e34:	e000      	b.n	8001e38 <W25qxx_ReadSector+0xb8>
		return;
 8001e36:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200008d4 	.word	0x200008d4

08001e44 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001e4c:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <WIZCHIP_READ+0x94>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001e52:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <WIZCHIP_READ+0x94>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <WIZCHIP_READ+0x94>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <WIZCHIP_READ+0x24>
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <WIZCHIP_READ+0x94>)
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d114      	bne.n	8001e92 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <WIZCHIP_READ+0x94>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	0c12      	lsrs	r2, r2, #16
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	4610      	mov	r0, r2
 8001e74:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <WIZCHIP_READ+0x94>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	0a12      	lsrs	r2, r2, #8
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	4610      	mov	r0, r2
 8001e82:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <WIZCHIP_READ+0x94>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4798      	blx	r3
 8001e90:	e011      	b.n	8001eb6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0c1b      	lsrs	r3, r3, #16
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <WIZCHIP_READ+0x94>)
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	f107 020c 	add.w	r2, r7, #12
 8001eb0:	2103      	movs	r1, #3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <WIZCHIP_READ+0x94>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4798      	blx	r3
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <WIZCHIP_READ+0x94>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <WIZCHIP_READ+0x94>)
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	4798      	blx	r3
   return ret;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000058 	.word	0x20000058

08001edc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <WIZCHIP_WRITE+0x98>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <WIZCHIP_WRITE+0x98>)
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001efc:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <WIZCHIP_WRITE+0x98>)
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d119      	bne.n	8001f38 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <WIZCHIP_WRITE+0x98>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	0c12      	lsrs	r2, r2, #16
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <WIZCHIP_WRITE+0x98>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	0a12      	lsrs	r2, r2, #8
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <WIZCHIP_WRITE+0x98>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <WIZCHIP_WRITE+0x98>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	4610      	mov	r0, r2
 8001f34:	4798      	blx	r3
 8001f36:	e013      	b.n	8001f60 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <WIZCHIP_WRITE+0x98>)
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	f107 020c 	add.w	r2, r7, #12
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <WIZCHIP_WRITE+0x98>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001f66:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <WIZCHIP_WRITE+0x98>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	4798      	blx	r3
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000058 	.word	0x20000058

08001f78 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	4613      	mov	r3, r2
 8001f84:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001f86:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <WIZCHIP_READ_BUF+0xbc>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001f8c:	4b29      	ldr	r3, [pc, #164]	; (8002034 <WIZCHIP_READ_BUF+0xbc>)
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001f92:	4b28      	ldr	r3, [pc, #160]	; (8002034 <WIZCHIP_READ_BUF+0xbc>)
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <WIZCHIP_READ_BUF+0x2a>
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <WIZCHIP_READ_BUF+0xbc>)
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d126      	bne.n	8001ff0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <WIZCHIP_READ_BUF+0xbc>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	0c12      	lsrs	r2, r2, #16
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	4610      	mov	r0, r2
 8001fae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001fb0:	4b20      	ldr	r3, [pc, #128]	; (8002034 <WIZCHIP_READ_BUF+0xbc>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	0a12      	lsrs	r2, r2, #8
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <WIZCHIP_READ_BUF+0xbc>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	82fb      	strh	r3, [r7, #22]
 8001fce:	e00a      	b.n	8001fe6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <WIZCHIP_READ_BUF+0xbc>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	8afa      	ldrh	r2, [r7, #22]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	188c      	adds	r4, r1, r2
 8001fda:	4798      	blx	r3
 8001fdc:	4603      	mov	r3, r0
 8001fde:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001fe0:	8afb      	ldrh	r3, [r7, #22]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	82fb      	strh	r3, [r7, #22]
 8001fe6:	8afa      	ldrh	r2, [r7, #22]
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d3f0      	bcc.n	8001fd0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001fee:	e017      	b.n	8002020 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <WIZCHIP_READ_BUF+0xbc>)
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	f107 0210 	add.w	r2, r7, #16
 800200e:	2103      	movs	r1, #3
 8002010:	4610      	mov	r0, r2
 8002012:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <WIZCHIP_READ_BUF+0xbc>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	88fa      	ldrh	r2, [r7, #6]
 800201a:	4611      	mov	r1, r2
 800201c:	68b8      	ldr	r0, [r7, #8]
 800201e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <WIZCHIP_READ_BUF+0xbc>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002026:	4b03      	ldr	r3, [pc, #12]	; (8002034 <WIZCHIP_READ_BUF+0xbc>)
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	4798      	blx	r3
}
 800202c:	bf00      	nop
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd90      	pop	{r4, r7, pc}
 8002034:	20000058 	.word	0x20000058

08002038 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	4613      	mov	r3, r2
 8002044:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002046:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800204c:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <WIZCHIP_WRITE_BUF+0xbc>)
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <WIZCHIP_WRITE_BUF+0xbc>)
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	2b00      	cmp	r3, #0
 8002060:	d126      	bne.n	80020b0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002062:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	0c12      	lsrs	r2, r2, #16
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	4610      	mov	r0, r2
 800206e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	0a12      	lsrs	r2, r2, #8
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	4610      	mov	r0, r2
 800207c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	4610      	mov	r0, r2
 8002088:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800208a:	2300      	movs	r3, #0
 800208c:	82fb      	strh	r3, [r7, #22]
 800208e:	e00a      	b.n	80020a6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	8afa      	ldrh	r2, [r7, #22]
 8002096:	68b9      	ldr	r1, [r7, #8]
 8002098:	440a      	add	r2, r1
 800209a:	7812      	ldrb	r2, [r2, #0]
 800209c:	4610      	mov	r0, r2
 800209e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80020a0:	8afb      	ldrh	r3, [r7, #22]
 80020a2:	3301      	adds	r3, #1
 80020a4:	82fb      	strh	r3, [r7, #22]
 80020a6:	8afa      	ldrh	r2, [r7, #22]
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d3f0      	bcc.n	8002090 <WIZCHIP_WRITE_BUF+0x58>
 80020ae:	e017      	b.n	80020e0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	0c1b      	lsrs	r3, r3, #16
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <WIZCHIP_WRITE_BUF+0xbc>)
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	f107 0210 	add.w	r2, r7, #16
 80020ce:	2103      	movs	r1, #3
 80020d0:	4610      	mov	r0, r2
 80020d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <WIZCHIP_WRITE_BUF+0xbc>)
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	88fa      	ldrh	r2, [r7, #6]
 80020da:	4611      	mov	r1, r2
 80020dc:	68b8      	ldr	r0, [r7, #8]
 80020de:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <WIZCHIP_WRITE_BUF+0xbc>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80020e6:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <WIZCHIP_WRITE_BUF+0xbc>)
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	4798      	blx	r3
}
 80020ec:	bf00      	nop
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000058 	.word	0x20000058

080020f8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002102:	2300      	movs	r3, #0
 8002104:	81fb      	strh	r3, [r7, #14]
 8002106:	2300      	movs	r3, #0
 8002108:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	3301      	adds	r3, #1
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fe94 	bl	8001e44 <WIZCHIP_READ>
 800211c:	4603      	mov	r3, r0
 800211e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002120:	89bb      	ldrh	r3, [r7, #12]
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	b29c      	uxth	r4, r3
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	3301      	adds	r3, #1
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fe86 	bl	8001e44 <WIZCHIP_READ>
 8002138:	4603      	mov	r3, r0
 800213a:	b29b      	uxth	r3, r3
 800213c:	4423      	add	r3, r4
 800213e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002140:	89bb      	ldrh	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01a      	beq.n	800217c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	3301      	adds	r3, #1
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fe76 	bl	8001e44 <WIZCHIP_READ>
 8002158:	4603      	mov	r3, r0
 800215a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800215c:	89fb      	ldrh	r3, [r7, #14]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	b29c      	uxth	r4, r3
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	3301      	adds	r3, #1
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fe68 	bl	8001e44 <WIZCHIP_READ>
 8002174:	4603      	mov	r3, r0
 8002176:	b29b      	uxth	r3, r3
 8002178:	4423      	add	r3, r4
 800217a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800217c:	89fa      	ldrh	r2, [r7, #14]
 800217e:	89bb      	ldrh	r3, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d1c2      	bne.n	800210a <getSn_TX_FSR+0x12>
   return val;
 8002184:	89fb      	ldrh	r3, [r7, #14]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}

0800218e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800218e:	b590      	push	{r4, r7, lr}
 8002190:	b085      	sub	sp, #20
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002198:	2300      	movs	r3, #0
 800219a:	81fb      	strh	r3, [r7, #14]
 800219c:	2300      	movs	r3, #0
 800219e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	3301      	adds	r3, #1
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fe49 	bl	8001e44 <WIZCHIP_READ>
 80021b2:	4603      	mov	r3, r0
 80021b4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80021b6:	89bb      	ldrh	r3, [r7, #12]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	b29c      	uxth	r4, r3
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	3301      	adds	r3, #1
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fe3b 	bl	8001e44 <WIZCHIP_READ>
 80021ce:	4603      	mov	r3, r0
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4423      	add	r3, r4
 80021d4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80021d6:	89bb      	ldrh	r3, [r7, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01a      	beq.n	8002212 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	3301      	adds	r3, #1
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fe2b 	bl	8001e44 <WIZCHIP_READ>
 80021ee:	4603      	mov	r3, r0
 80021f0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80021f2:	89fb      	ldrh	r3, [r7, #14]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	b29c      	uxth	r4, r3
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	3301      	adds	r3, #1
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fe1d 	bl	8001e44 <WIZCHIP_READ>
 800220a:	4603      	mov	r3, r0
 800220c:	b29b      	uxth	r3, r3
 800220e:	4423      	add	r3, r4
 8002210:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002212:	89fa      	ldrh	r2, [r7, #14]
 8002214:	89bb      	ldrh	r3, [r7, #12]
 8002216:	429a      	cmp	r2, r3
 8002218:	d1c2      	bne.n	80021a0 <getSn_RX_RSR+0x12>
   return val;
 800221a:	89fb      	ldrh	r3, [r7, #14]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	bd90      	pop	{r4, r7, pc}

08002224 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
 8002230:	4613      	mov	r3, r2
 8002232:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800223c:	88bb      	ldrh	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d048      	beq.n	80022d4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	3301      	adds	r3, #1
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fdf8 	bl	8001e44 <WIZCHIP_READ>
 8002254:	4603      	mov	r3, r0
 8002256:	b29b      	uxth	r3, r3
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	b29c      	uxth	r4, r3
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	3301      	adds	r3, #1
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fdeb 	bl	8001e44 <WIZCHIP_READ>
 800226e:	4603      	mov	r3, r0
 8002270:	b29b      	uxth	r3, r3
 8002272:	4423      	add	r3, r4
 8002274:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002276:	89fb      	ldrh	r3, [r7, #14]
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	79fa      	ldrb	r2, [r7, #7]
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	3202      	adds	r2, #2
 8002280:	00d2      	lsls	r2, r2, #3
 8002282:	4413      	add	r3, r2
 8002284:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002286:	88bb      	ldrh	r3, [r7, #4]
 8002288:	461a      	mov	r2, r3
 800228a:	6839      	ldr	r1, [r7, #0]
 800228c:	68b8      	ldr	r0, [r7, #8]
 800228e:	f7ff fed3 	bl	8002038 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002292:	89fa      	ldrh	r2, [r7, #14]
 8002294:	88bb      	ldrh	r3, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	3301      	adds	r3, #1
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80022a6:	461a      	mov	r2, r3
 80022a8:	89fb      	ldrh	r3, [r7, #14]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f7ff fe12 	bl	8001edc <WIZCHIP_WRITE>
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	3301      	adds	r3, #1
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80022c4:	461a      	mov	r2, r3
 80022c6:	89fb      	ldrh	r3, [r7, #14]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	4619      	mov	r1, r3
 80022cc:	4610      	mov	r0, r2
 80022ce:	f7ff fe05 	bl	8001edc <WIZCHIP_WRITE>
 80022d2:	e000      	b.n	80022d6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80022d4:	bf00      	nop
}
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}

080022dc <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	4613      	mov	r3, r2
 80022ea:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80022f4:	88bb      	ldrh	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d048      	beq.n	800238c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	3301      	adds	r3, #1
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fd9c 	bl	8001e44 <WIZCHIP_READ>
 800230c:	4603      	mov	r3, r0
 800230e:	b29b      	uxth	r3, r3
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	b29c      	uxth	r4, r3
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	3301      	adds	r3, #1
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fd8f 	bl	8001e44 <WIZCHIP_READ>
 8002326:	4603      	mov	r3, r0
 8002328:	b29b      	uxth	r3, r3
 800232a:	4423      	add	r3, r4
 800232c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800232e:	89fb      	ldrh	r3, [r7, #14]
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	79fa      	ldrb	r2, [r7, #7]
 8002334:	0092      	lsls	r2, r2, #2
 8002336:	3203      	adds	r2, #3
 8002338:	00d2      	lsls	r2, r2, #3
 800233a:	4413      	add	r3, r2
 800233c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800233e:	88bb      	ldrh	r3, [r7, #4]
 8002340:	461a      	mov	r2, r3
 8002342:	6839      	ldr	r1, [r7, #0]
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f7ff fe17 	bl	8001f78 <WIZCHIP_READ_BUF>
   ptr += len;
 800234a:	89fa      	ldrh	r2, [r7, #14]
 800234c:	88bb      	ldrh	r3, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	3301      	adds	r3, #1
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800235e:	461a      	mov	r2, r3
 8002360:	89fb      	ldrh	r3, [r7, #14]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	b29b      	uxth	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4619      	mov	r1, r3
 800236a:	4610      	mov	r0, r2
 800236c:	f7ff fdb6 	bl	8001edc <WIZCHIP_WRITE>
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	3301      	adds	r3, #1
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800237c:	461a      	mov	r2, r3
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	4619      	mov	r1, r3
 8002384:	4610      	mov	r0, r2
 8002386:	f7ff fda9 	bl	8001edc <WIZCHIP_WRITE>
 800238a:	e000      	b.n	800238e <wiz_recv_data+0xb2>
   if(len == 0) return;
 800238c:	bf00      	nop
}
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}

08002394 <httpc_init>:
192.168.0.206
*/
/* Public & Private functions ------------------------------------------------*/

uint8_t httpc_init(uint8_t sock, uint8_t * ip, uint16_t port, uint8_t * sbuf, uint8_t * rbuf)
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	4603      	mov	r3, r0
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	4613      	mov	r3, r2
 80023a4:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = HTTPC_FALSE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	75fb      	strb	r3, [r7, #23]

	if(sock <= _WIZCHIP_SOCK_NUM_)
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d81e      	bhi.n	80023ee <httpc_init+0x5a>
	{
		// Hardware socket number for HTTP client (0 ~ 7)
		httpsock = sock;
 80023b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <httpc_init+0x68>)
 80023b6:	701a      	strb	r2, [r3, #0]

		// Shared buffers: HTTP Send / Recevice
		httpc_send_buf = sbuf;
 80023b8:	4a11      	ldr	r2, [pc, #68]	; (8002400 <httpc_init+0x6c>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6013      	str	r3, [r2, #0]
		httpc_recv_buf = rbuf;
 80023be:	4a11      	ldr	r2, [pc, #68]	; (8002404 <httpc_init+0x70>)
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	6013      	str	r3, [r2, #0]

		// Destination IP address and Port number
		// (Destination = HTTP server)
		dest_ip[0] = ip[0];
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <httpc_init+0x74>)
 80023ca:	701a      	strb	r2, [r3, #0]
		dest_ip[1] = ip[1];
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	785a      	ldrb	r2, [r3, #1]
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <httpc_init+0x74>)
 80023d2:	705a      	strb	r2, [r3, #1]
		dest_ip[2] = ip[2];
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	789a      	ldrb	r2, [r3, #2]
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <httpc_init+0x74>)
 80023da:	709a      	strb	r2, [r3, #2]
		dest_ip[3] = ip[3];
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	78da      	ldrb	r2, [r3, #3]
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <httpc_init+0x74>)
 80023e2:	70da      	strb	r2, [r3, #3]
		dest_port = port;
 80023e4:	4a09      	ldr	r2, [pc, #36]	; (800240c <httpc_init+0x78>)
 80023e6:	89bb      	ldrh	r3, [r7, #12]
 80023e8:	8013      	strh	r3, [r2, #0]

		ret = HTTPC_TRUE;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	20000904 	.word	0x20000904
 8002400:	200008fc 	.word	0x200008fc
 8002404:	20000900 	.word	0x20000900
 8002408:	2000001c 	.word	0x2000001c
 800240c:	20000020 	.word	0x20000020

08002410 <httpc_connection_handler>:


// return: true / false
uint8_t httpc_connection_handler()
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
	uint8_t ret = HTTPC_FALSE;
 8002416:	2300      	movs	r3, #0
 8002418:	71fb      	strb	r3, [r7, #7]
#ifdef _HTTPCLIENT_DEBUG_
	uint8_t destip[4] = {0, };
	uint16_t destport = 80;
#endif

	uint8_t state = getSn_SR(httpsock);
 800241a:	4b53      	ldr	r3, [pc, #332]	; (8002568 <httpc_connection_handler+0x158>)
 800241c:	f993 3000 	ldrsb.w	r3, [r3]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	3301      	adds	r3, #1
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fd0a 	bl	8001e44 <WIZCHIP_READ>
 8002430:	4603      	mov	r3, r0
 8002432:	71bb      	strb	r3, [r7, #6]
	switch(state)
 8002434:	79bb      	ldrb	r3, [r7, #6]
 8002436:	2b1c      	cmp	r3, #28
 8002438:	f200 808d 	bhi.w	8002556 <httpc_connection_handler+0x146>
 800243c:	a201      	add	r2, pc, #4	; (adr r2, 8002444 <httpc_connection_handler+0x34>)
 800243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002442:	bf00      	nop
 8002444:	08002513 	.word	0x08002513
 8002448:	08002557 	.word	0x08002557
 800244c:	08002557 	.word	0x08002557
 8002450:	08002557 	.word	0x08002557
 8002454:	08002557 	.word	0x08002557
 8002458:	08002557 	.word	0x08002557
 800245c:	08002557 	.word	0x08002557
 8002460:	08002557 	.word	0x08002557
 8002464:	08002557 	.word	0x08002557
 8002468:	08002557 	.word	0x08002557
 800246c:	08002557 	.word	0x08002557
 8002470:	08002557 	.word	0x08002557
 8002474:	08002557 	.word	0x08002557
 8002478:	08002557 	.word	0x08002557
 800247c:	08002557 	.word	0x08002557
 8002480:	08002557 	.word	0x08002557
 8002484:	08002557 	.word	0x08002557
 8002488:	08002557 	.word	0x08002557
 800248c:	08002557 	.word	0x08002557
 8002490:	080024b9 	.word	0x080024b9
 8002494:	08002557 	.word	0x08002557
 8002498:	08002557 	.word	0x08002557
 800249c:	08002557 	.word	0x08002557
 80024a0:	080024bf 	.word	0x080024bf
 80024a4:	08002513 	.word	0x08002513
 80024a8:	08002557 	.word	0x08002557
 80024ac:	08002557 	.word	0x08002557
 80024b0:	08002557 	.word	0x08002557
 80024b4:	08002503 	.word	0x08002503
	{
		case SOCK_INIT:
			// state: connect
			ret = HTTPC_TRUE;
 80024b8:	2301      	movs	r3, #1
 80024ba:	71fb      	strb	r3, [r7, #7]
			break;
 80024bc:	e04e      	b.n	800255c <httpc_connection_handler+0x14c>

		case SOCK_ESTABLISHED:
			if(getSn_IR(httpsock) & Sn_IR_CON)
 80024be:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <httpc_connection_handler+0x158>)
 80024c0:	f993 3000 	ldrsb.w	r3, [r3]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	3301      	adds	r3, #1
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fcb8 	bl	8001e44 <WIZCHIP_READ>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00e      	beq.n	80024fc <httpc_connection_handler+0xec>
				// Serial debug message printout
				getsockopt(httpsock, SO_DESTIP, &destip);
				getsockopt(httpsock, SO_DESTPORT, &destport);
				printf(" > HTTP CLIENT: CONNECTED TO - %d.%d.%d.%d : %d\r\n",destip[0], destip[1], destip[2], destip[3], destport);
#endif
				httpc_isConnected = HTTPC_TRUE;
 80024de:	4b23      	ldr	r3, [pc, #140]	; (800256c <httpc_connection_handler+0x15c>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
				//receivehttpcheck();
				setSn_IR(httpsock, Sn_IR_CON);
 80024e4:	4b20      	ldr	r3, [pc, #128]	; (8002568 <httpc_connection_handler+0x158>)
 80024e6:	f993 3000 	ldrsb.w	r3, [r3]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	3301      	adds	r3, #1
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80024f4:	2101      	movs	r1, #1
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fcf0 	bl	8001edc <WIZCHIP_WRITE>
			}

			//httpc_isReceived = getSn_RX_RSR(httpsock);
			ret = HTTPC_CONNECTED;
 80024fc:	2302      	movs	r3, #2
 80024fe:	71fb      	strb	r3, [r7, #7]
			break;
 8002500:	e02c      	b.n	800255c <httpc_connection_handler+0x14c>

		case SOCK_CLOSE_WAIT:
			disconnect(httpsock);
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <httpc_connection_handler+0x158>)
 8002504:	f993 3000 	ldrsb.w	r3, [r3]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fc00 	bl	8002d10 <disconnect>
			break;
 8002510:	e024      	b.n	800255c <httpc_connection_handler+0x14c>

		case SOCK_FIN_WAIT:
		case SOCK_CLOSED:
			httpc_isSockOpen = HTTPC_FALSE;
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <httpc_connection_handler+0x160>)
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
			httpc_isConnected = HTTPC_FALSE;
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <httpc_connection_handler+0x15c>)
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]

			source_port = get_httpc_any_port();
 800251e:	f000 f92b 	bl	8002778 <get_httpc_any_port>
 8002522:	4603      	mov	r3, r0
 8002524:	80bb      	strh	r3, [r7, #4]
#ifdef _HTTPCLIENT_DEBUG_
			printf(" > HTTP CLIENT: source_port = %d\r\n", source_port);
#endif

			if(socket(httpsock, Sn_MR_TCP, source_port, Sn_MR_ND) == httpsock)
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <httpc_connection_handler+0x158>)
 8002528:	f993 3000 	ldrsb.w	r3, [r3]
 800252c:	b2d8      	uxtb	r0, r3
 800252e:	88ba      	ldrh	r2, [r7, #4]
 8002530:	2320      	movs	r3, #32
 8002532:	2101      	movs	r1, #1
 8002534:	f000 f982 	bl	800283c <socket>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <httpc_connection_handler+0x158>)
 800253e:	f993 3000 	ldrsb.w	r3, [r3]
 8002542:	429a      	cmp	r2, r3
 8002544:	d109      	bne.n	800255a <httpc_connection_handler+0x14a>
			{
				if(httpc_isSockOpen == HTTPC_FALSE)
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <httpc_connection_handler+0x160>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <httpc_connection_handler+0x14a>
				{
#ifdef _HTTPCLIENT_DEBUG_
					printf(" > HTTP CLIENT: SOCKOPEN\r\n");
#endif
					httpc_isSockOpen = HTTPC_TRUE;
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <httpc_connection_handler+0x160>)
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
				}
			}


			break;
 8002554:	e001      	b.n	800255a <httpc_connection_handler+0x14a>

		default:
			break;
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <httpc_connection_handler+0x14c>
			break;
 800255a:	bf00      	nop
	}

	return ret;
 800255c:	79fb      	ldrb	r3, [r7, #7]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000904 	.word	0x20000904
 800256c:	20000909 	.word	0x20000909
 8002570:	20000908 	.word	0x20000908

08002574 <httpc_connect>:


// return: socket status
uint8_t httpc_connect()
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
	uint8_t ret = HTTPC_FALSE;
 800257a:	2300      	movs	r3, #0
 800257c:	71fb      	strb	r3, [r7, #7]

	if(httpsock >= 0)
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <httpc_connect+0x54>)
 8002580:	f993 3000 	ldrsb.w	r3, [r3]
 8002584:	2b00      	cmp	r3, #0
 8002586:	db1a      	blt.n	80025be <httpc_connect+0x4a>
	{
		if(httpc_isSockOpen == HTTPC_TRUE)
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <httpc_connect+0x58>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d116      	bne.n	80025be <httpc_connect+0x4a>
		{
			// TCP connect
			ret = checkret = connect(httpsock, dest_ip, dest_port);
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <httpc_connect+0x54>)
 8002592:	f993 3000 	ldrsb.w	r3, [r3]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4a0d      	ldr	r2, [pc, #52]	; (80025d0 <httpc_connect+0x5c>)
 800259a:	8812      	ldrh	r2, [r2, #0]
 800259c:	490d      	ldr	r1, [pc, #52]	; (80025d4 <httpc_connect+0x60>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fad0 	bl	8002b44 <connect>
 80025a4:	4603      	mov	r3, r0
 80025a6:	461a      	mov	r2, r3
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <httpc_connect+0x64>)
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <httpc_connect+0x64>)
 80025ae:	f993 3000 	ldrsb.w	r3, [r3]
 80025b2:	71fb      	strb	r3, [r7, #7]
			if(ret == SOCK_OK) ret = HTTPC_TRUE;
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <httpc_connect+0x4a>
 80025ba:	2301      	movs	r3, #1
 80025bc:	71fb      	strb	r3, [r7, #7]
		}
	}

	return ret;
 80025be:	79fb      	ldrb	r3, [r7, #7]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000904 	.word	0x20000904
 80025cc:	20000908 	.word	0x20000908
 80025d0:	20000020 	.word	0x20000020
 80025d4:	2000001c 	.word	0x2000001c
 80025d8:	2000110c 	.word	0x2000110c

080025dc <httpc_send>:
}


// return: sent data length
uint16_t httpc_send(HttpRequest * req, uint8_t * buf, uint8_t * body, uint16_t content_len)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint16_t len;
	uint8_t http_header_generated = HTTPC_FAILED;
 80025ea:	2300      	movs	r3, #0
 80025ec:	74fb      	strb	r3, [r7, #19]

	if(httpc_isConnected == HTTPC_TRUE)
 80025ee:	4b56      	ldr	r3, [pc, #344]	; (8002748 <httpc_send+0x16c>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	f040 80a0 	bne.w	8002738 <httpc_send+0x15c>
	{
		do
		{
			memset(buf, 0x00, DATA_BUF_SIZE);
 80025f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025fc:	2100      	movs	r1, #0
 80025fe:	68b8      	ldr	r0, [r7, #8]
 8002600:	f00b fc5e 	bl	800dec0 <memset>

			/* HTTP request header */
			len = sprintf((char *)buf, "%s %s HTTP/1.1\r\n", req->method, req->uri);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	494f      	ldr	r1, [pc, #316]	; (800274c <httpc_send+0x170>)
 800260e:	68b8      	ldr	r0, [r7, #8]
 8002610:	f00b fd8c 	bl	800e12c <siprintf>
 8002614:	4603      	mov	r3, r0
 8002616:	82bb      	strh	r3, [r7, #20]
			len += sprintf((char *)buf+len, "Host: %s\r\n", req->host);
 8002618:	8abb      	ldrh	r3, [r7, #20]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	18d0      	adds	r0, r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	461a      	mov	r2, r3
 8002624:	494a      	ldr	r1, [pc, #296]	; (8002750 <httpc_send+0x174>)
 8002626:	f00b fd81 	bl	800e12c <siprintf>
 800262a:	4603      	mov	r3, r0
 800262c:	b29a      	uxth	r2, r3
 800262e:	8abb      	ldrh	r3, [r7, #20]
 8002630:	4413      	add	r3, r2
 8002632:	82bb      	strh	r3, [r7, #20]
			len += sprintf((char *)buf+len, "Connection: %s\r\n", req->connection);
 8002634:	8abb      	ldrh	r3, [r7, #20]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	18d0      	adds	r0, r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	461a      	mov	r2, r3
 8002640:	4944      	ldr	r1, [pc, #272]	; (8002754 <httpc_send+0x178>)
 8002642:	f00b fd73 	bl	800e12c <siprintf>
 8002646:	4603      	mov	r3, r0
 8002648:	b29a      	uxth	r2, r3
 800264a:	8abb      	ldrh	r3, [r7, #20]
 800264c:	4413      	add	r3, r2
 800264e:	82bb      	strh	r3, [r7, #20]

			// HTTP content type: POST / PUT only
			if(content_len > 0)
 8002650:	887b      	ldrh	r3, [r7, #2]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d032      	beq.n	80026bc <httpc_send+0xe0>
			{
				len += sprintf((char *)buf+len, "Content-Length: %d\r\n", content_len);
 8002656:	8abb      	ldrh	r3, [r7, #20]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	4413      	add	r3, r2
 800265c:	887a      	ldrh	r2, [r7, #2]
 800265e:	493e      	ldr	r1, [pc, #248]	; (8002758 <httpc_send+0x17c>)
 8002660:	4618      	mov	r0, r3
 8002662:	f00b fd63 	bl	800e12c <siprintf>
 8002666:	4603      	mov	r3, r0
 8002668:	b29a      	uxth	r2, r3
 800266a:	8abb      	ldrh	r3, [r7, #20]
 800266c:	4413      	add	r3, r2
 800266e:	82bb      	strh	r3, [r7, #20]

				if(strcmp((char *)req->content_type, HTTP_CTYPE_MULTIPART_FORM) == 0)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4939      	ldr	r1, [pc, #228]	; (800275c <httpc_send+0x180>)
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd fdaa 	bl	80001d0 <strcmp>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10e      	bne.n	80026a0 <httpc_send+0xc4>
				{
					// HTTP content type: multipart/form-data
					len += sprintf((char *)buf+len, "Content-Type: %s; boundary=%s\r\n", req->content_type, formDataBoundary);
 8002682:	8abb      	ldrh	r3, [r7, #20]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	18d0      	adds	r0, r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	4b34      	ldr	r3, [pc, #208]	; (8002760 <httpc_send+0x184>)
 800268e:	4935      	ldr	r1, [pc, #212]	; (8002764 <httpc_send+0x188>)
 8002690:	f00b fd4c 	bl	800e12c <siprintf>
 8002694:	4603      	mov	r3, r0
 8002696:	b29a      	uxth	r2, r3
 8002698:	8abb      	ldrh	r3, [r7, #20]
 800269a:	4413      	add	r3, r2
 800269c:	82bb      	strh	r3, [r7, #20]
 800269e:	e00d      	b.n	80026bc <httpc_send+0xe0>
				}
				else
				{
					// HTTP content type: others
					len += sprintf((char *)buf+len, "Content-Type: %s\r\n", req->content_type); // HTTP content type: others
 80026a0:	8abb      	ldrh	r3, [r7, #20]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	18d0      	adds	r0, r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	461a      	mov	r2, r3
 80026ac:	492e      	ldr	r1, [pc, #184]	; (8002768 <httpc_send+0x18c>)
 80026ae:	f00b fd3d 	bl	800e12c <siprintf>
 80026b2:	4603      	mov	r3, r0
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	8abb      	ldrh	r3, [r7, #20]
 80026b8:	4413      	add	r3, r2
 80026ba:	82bb      	strh	r3, [r7, #20]
				}
			}
			len += sprintf((char *)buf+len, "\r\n");
 80026bc:	8abb      	ldrh	r3, [r7, #20]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	4413      	add	r3, r2
 80026c2:	492a      	ldr	r1, [pc, #168]	; (800276c <httpc_send+0x190>)
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00b fd31 	bl	800e12c <siprintf>
 80026ca:	4603      	mov	r3, r0
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	8abb      	ldrh	r3, [r7, #20]
 80026d0:	4413      	add	r3, r2
 80026d2:	82bb      	strh	r3, [r7, #20]

			// Avoiding buffer overflow
			if((len + content_len) > DATA_BUF_SIZE) {
 80026d4:	8aba      	ldrh	r2, [r7, #20]
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	4413      	add	r3, r2
 80026da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026de:	dd04      	ble.n	80026ea <httpc_send+0x10e>
				content_len = DATA_BUF_SIZE - len; // HTTP request header re-generation (do-while)
 80026e0:	8abb      	ldrh	r3, [r7, #20]
 80026e2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80026e6:	807b      	strh	r3, [r7, #2]
 80026e8:	e001      	b.n	80026ee <httpc_send+0x112>
				//http_header_generated = FAILED;
			} else {
				http_header_generated = HTTPC_SUCCESS;
 80026ea:	2301      	movs	r3, #1
 80026ec:	74fb      	strb	r3, [r7, #19]
			}
		} while(http_header_generated != HTTPC_SUCCESS);
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d181      	bne.n	80025f8 <httpc_send+0x1c>

		/* HTTP request body */
		for(i = 0; i < content_len; i++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	82fb      	strh	r3, [r7, #22]
 80026f8:	e00d      	b.n	8002716 <httpc_send+0x13a>
		{
			buf[len++] = body[i];
 80026fa:	8afb      	ldrh	r3, [r7, #22]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	441a      	add	r2, r3
 8002700:	8abb      	ldrh	r3, [r7, #20]
 8002702:	1c59      	adds	r1, r3, #1
 8002704:	82b9      	strh	r1, [r7, #20]
 8002706:	4619      	mov	r1, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	440b      	add	r3, r1
 800270c:	7812      	ldrb	r2, [r2, #0]
 800270e:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < content_len; i++)
 8002710:	8afb      	ldrh	r3, [r7, #22]
 8002712:	3301      	adds	r3, #1
 8002714:	82fb      	strh	r3, [r7, #22]
 8002716:	8afa      	ldrh	r2, [r7, #22]
 8002718:	887b      	ldrh	r3, [r7, #2]
 800271a:	429a      	cmp	r2, r3
 800271c:	d3ed      	bcc.n	80026fa <httpc_send+0x11e>
#ifdef _HTTPCLIENT_DEBUG_
		printf(" >> HTTP Request - Method: %s, URI: %s, Content-Length: %d\r\n", req->method, req->uri, content_len);
		for(i = 0; i < len; i++) printf("%c", buf[i]);
		printf("\r\n");
#endif
		http_send_status = send(httpsock, buf, len);
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <httpc_send+0x194>)
 8002720:	f993 3000 	ldrsb.w	r3, [r3]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	8aba      	ldrh	r2, [r7, #20]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fb66 	bl	8002dfc <send>
 8002730:	4603      	mov	r3, r0
 8002732:	4a10      	ldr	r2, [pc, #64]	; (8002774 <httpc_send+0x198>)
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e001      	b.n	800273c <httpc_send+0x160>
	}
	else
	{
		len = HTTPC_FAILED;
 8002738:	2300      	movs	r3, #0
 800273a:	82bb      	strh	r3, [r7, #20]
	}

	return len;
 800273c:	8abb      	ldrh	r3, [r7, #20]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000909 	.word	0x20000909
 800274c:	0800f30c 	.word	0x0800f30c
 8002750:	0800f320 	.word	0x0800f320
 8002754:	0800f32c 	.word	0x0800f32c
 8002758:	0800f340 	.word	0x0800f340
 800275c:	0800f358 	.word	0x0800f358
 8002760:	0800f36c 	.word	0x0800f36c
 8002764:	0800f394 	.word	0x0800f394
 8002768:	0800f3b4 	.word	0x0800f3b4
 800276c:	0800f3cc 	.word	0x0800f3cc
 8002770:	20000904 	.word	0x20000904
 8002774:	20001110 	.word	0x20001110

08002778 <get_httpc_any_port>:
}


// return: source port number for tcp client
uint16_t get_httpc_any_port(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
	if(httpc_any_port)
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <get_httpc_any_port+0x74>)
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d014      	beq.n	80027ae <get_httpc_any_port+0x36>
	{
		if((httpc_any_port >= HTTP_CLIENT_PORT_MIN) && (httpc_any_port < HTTP_CLIENT_PORT_MAX)) {
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <get_httpc_any_port+0x74>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	f5b3 4f30 	cmp.w	r3, #45056	; 0xb000
 800278c:	d30c      	bcc.n	80027a8 <get_httpc_any_port+0x30>
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <get_httpc_any_port+0x74>)
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002796:	4293      	cmp	r3, r2
 8002798:	d006      	beq.n	80027a8 <get_httpc_any_port+0x30>
			httpc_any_port++;
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <get_httpc_any_port+0x74>)
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <get_httpc_any_port+0x74>)
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	e002      	b.n	80027ae <get_httpc_any_port+0x36>
		} else {
			httpc_any_port = 0;
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <get_httpc_any_port+0x74>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	801a      	strh	r2, [r3, #0]
		}
	}

	if(httpc_any_port < HTTP_CLIENT_PORT_MIN)
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <get_httpc_any_port+0x74>)
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	f5b3 4f30 	cmp.w	r3, #45056	; 0xb000
 80027b6:	d214      	bcs.n	80027e2 <get_httpc_any_port+0x6a>
	{
		// todo: get random seed value
		httpc_any_port = (rand() % 10000) + 46000; // 46000 ~ 55999
 80027b8:	f00b fc6a 	bl	800e090 <rand>
 80027bc:	4603      	mov	r3, r0
 80027be:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <get_httpc_any_port+0x78>)
 80027c0:	fb82 1203 	smull	r1, r2, r2, r3
 80027c4:	1311      	asrs	r1, r2, #12
 80027c6:	17da      	asrs	r2, r3, #31
 80027c8:	1a8a      	subs	r2, r1, r2
 80027ca:	f242 7110 	movw	r1, #10000	; 0x2710
 80027ce:	fb01 f202 	mul.w	r2, r1, r2
 80027d2:	1a9a      	subs	r2, r3, r2
 80027d4:	b293      	uxth	r3, r2
 80027d6:	f5a3 4398 	sub.w	r3, r3, #19456	; 0x4c00
 80027da:	3b50      	subs	r3, #80	; 0x50
 80027dc:	b29a      	uxth	r2, r3
 80027de:	4b03      	ldr	r3, [pc, #12]	; (80027ec <get_httpc_any_port+0x74>)
 80027e0:	801a      	strh	r2, [r3, #0]
	}

	return httpc_any_port;
 80027e2:	4b02      	ldr	r3, [pc, #8]	; (80027ec <get_httpc_any_port+0x74>)
 80027e4:	881b      	ldrh	r3, [r3, #0]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000906 	.word	0x20000906
 80027f0:	68db8bad 	.word	0x68db8bad

080027f4 <receivehttpcheck>:

void receivehttpcheck(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0

	//uint8_t filtereddata[200];
	valhttp = getSn_RX_RSR(httpsock);
 80027f8:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <receivehttpcheck+0x3c>)
 80027fa:	f993 3000 	ldrsb.w	r3, [r3]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fcc4 	bl	800218e <getSn_RX_RSR>
 8002806:	4603      	mov	r3, r0
 8002808:	461a      	mov	r2, r3
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <receivehttpcheck+0x40>)
 800280c:	801a      	strh	r2, [r3, #0]

	if(valhttp>0){
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <receivehttpcheck+0x40>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <receivehttpcheck+0x36>
		//httpc_recv(rxBufhttp,valhttp);
		recv(httpsock, rxBufhttp, valhttp);
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <receivehttpcheck+0x3c>)
 8002818:	f993 3000 	ldrsb.w	r3, [r3]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <receivehttpcheck+0x40>)
 8002820:	8812      	ldrh	r2, [r2, #0]
 8002822:	4905      	ldr	r1, [pc, #20]	; (8002838 <receivehttpcheck+0x44>)
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fbe3 	bl	8002ff0 <recv>
	}
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000904 	.word	0x20000904
 8002834:	2000090a 	.word	0x2000090a
 8002838:	2000090c 	.word	0x2000090c

0800283c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	4604      	mov	r4, r0
 8002844:	4608      	mov	r0, r1
 8002846:	4611      	mov	r1, r2
 8002848:	461a      	mov	r2, r3
 800284a:	4623      	mov	r3, r4
 800284c:	71fb      	strb	r3, [r7, #7]
 800284e:	4603      	mov	r3, r0
 8002850:	71bb      	strb	r3, [r7, #6]
 8002852:	460b      	mov	r3, r1
 8002854:	80bb      	strh	r3, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d902      	bls.n	8002866 <socket+0x2a>
 8002860:	f04f 33ff 	mov.w	r3, #4294967295
 8002864:	e0f2      	b.n	8002a4c <socket+0x210>
	switch(protocol)
 8002866:	79bb      	ldrb	r3, [r7, #6]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d005      	beq.n	8002878 <socket+0x3c>
 800286c:	2b00      	cmp	r3, #0
 800286e:	dd11      	ble.n	8002894 <socket+0x58>
 8002870:	3b02      	subs	r3, #2
 8002872:	2b02      	cmp	r3, #2
 8002874:	d80e      	bhi.n	8002894 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002876:	e011      	b.n	800289c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	2204      	movs	r2, #4
 800287e:	4619      	mov	r1, r3
 8002880:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002884:	f7ff fb78 	bl	8001f78 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <socket+0x5e>
 800288e:	f06f 0302 	mvn.w	r3, #2
 8002892:	e0db      	b.n	8002a4c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002894:	f06f 0304 	mvn.w	r3, #4
 8002898:	e0d8      	b.n	8002a4c <socket+0x210>
	    break;
 800289a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <socket+0x70>
 80028a6:	f06f 0305 	mvn.w	r3, #5
 80028aa:	e0cf      	b.n	8002a4c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d025      	beq.n	80028fe <socket+0xc2>
	{
   	switch(protocol)
 80028b2:	79bb      	ldrb	r3, [r7, #6]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d002      	beq.n	80028be <socket+0x82>
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d008      	beq.n	80028ce <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80028bc:	e024      	b.n	8002908 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d11c      	bne.n	8002902 <socket+0xc6>
 80028c8:	f06f 0305 	mvn.w	r3, #5
 80028cc:	e0be      	b.n	8002a4c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d006      	beq.n	80028e6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80028d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db02      	blt.n	80028e6 <socket+0xaa>
 80028e0:	f06f 0305 	mvn.w	r3, #5
 80028e4:	e0b2      	b.n	8002a4c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80028f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db06      	blt.n	8002906 <socket+0xca>
 80028f8:	f06f 0305 	mvn.w	r3, #5
 80028fc:	e0a6      	b.n	8002a4c <socket+0x210>
   	}
   }
 80028fe:	bf00      	nop
 8002900:	e002      	b.n	8002908 <socket+0xcc>
   	      break;
 8002902:	bf00      	nop
 8002904:	e000      	b.n	8002908 <socket+0xcc>
   	      break;
 8002906:	bf00      	nop
	close(sn);
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f8ac 	bl	8002a68 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	3301      	adds	r3, #1
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4618      	mov	r0, r3
 800291a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800291e:	f023 030f 	bic.w	r3, r3, #15
 8002922:	b25a      	sxtb	r2, r3
 8002924:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002928:	4313      	orrs	r3, r2
 800292a:	b25b      	sxtb	r3, r3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	4619      	mov	r1, r3
 8002930:	f7ff fad4 	bl	8001edc <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002934:	88bb      	ldrh	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d110      	bne.n	800295c <socket+0x120>
	{
	   port = sock_any_port++;
 800293a:	4b46      	ldr	r3, [pc, #280]	; (8002a54 <socket+0x218>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	b291      	uxth	r1, r2
 8002942:	4a44      	ldr	r2, [pc, #272]	; (8002a54 <socket+0x218>)
 8002944:	8011      	strh	r1, [r2, #0]
 8002946:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002948:	4b42      	ldr	r3, [pc, #264]	; (8002a54 <socket+0x218>)
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002950:	4293      	cmp	r3, r2
 8002952:	d103      	bne.n	800295c <socket+0x120>
 8002954:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <socket+0x218>)
 8002956:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800295a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	3301      	adds	r3, #1
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002968:	461a      	mov	r2, r3
 800296a:	88bb      	ldrh	r3, [r7, #4]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	b29b      	uxth	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	4619      	mov	r1, r3
 8002974:	4610      	mov	r0, r2
 8002976:	f7ff fab1 	bl	8001edc <WIZCHIP_WRITE>
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	3301      	adds	r3, #1
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	461a      	mov	r2, r3
 8002988:	88bb      	ldrh	r3, [r7, #4]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f7ff faa4 	bl	8001edc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	3301      	adds	r3, #1
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80029a0:	2101      	movs	r1, #1
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fa9a 	bl	8001edc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80029a8:	bf00      	nop
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	3301      	adds	r3, #1
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fa44 	bl	8001e44 <WIZCHIP_READ>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f3      	bne.n	80029aa <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	2201      	movs	r2, #1
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	b21b      	sxth	r3, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	b21a      	sxth	r2, r3
 80029d0:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <socket+0x21c>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b21b      	sxth	r3, r3
 80029d6:	4013      	ands	r3, r2
 80029d8:	b21b      	sxth	r3, r3
 80029da:	b29a      	uxth	r2, r3
 80029dc:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <socket+0x21c>)
 80029de:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f003 0201 	and.w	r2, r3, #1
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	b21a      	sxth	r2, r3
 80029ee:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <socket+0x21c>)
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	b21b      	sxth	r3, r3
 80029f4:	4313      	orrs	r3, r2
 80029f6:	b21b      	sxth	r3, r3
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <socket+0x21c>)
 80029fc:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	2201      	movs	r2, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <socket+0x220>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	4013      	ands	r3, r2
 8002a14:	b21b      	sxth	r3, r3
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <socket+0x220>)
 8002a1a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <socket+0x224>)
 8002a20:	2100      	movs	r1, #0
 8002a22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <socket+0x228>)
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002a2e:	bf00      	nop
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	3301      	adds	r3, #1
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fa01 	bl	8001e44 <WIZCHIP_READ>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f3      	beq.n	8002a30 <socket+0x1f4>
   return (int8_t)sn;
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd90      	pop	{r4, r7, pc}
 8002a54:	20000022 	.word	0x20000022
 8002a58:	20001114 	.word	0x20001114
 8002a5c:	20001116 	.word	0x20001116
 8002a60:	20001118 	.word	0x20001118
 8002a64:	20001128 	.word	0x20001128

08002a68 <close>:

int8_t close(uint8_t sn)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d902      	bls.n	8002a7e <close+0x16>
 8002a78:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7c:	e055      	b.n	8002b2a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	3301      	adds	r3, #1
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a8a:	2110      	movs	r1, #16
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fa25 	bl	8001edc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002a92:	bf00      	nop
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	3301      	adds	r3, #1
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff f9cf 	bl	8001e44 <WIZCHIP_READ>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f3      	bne.n	8002a94 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ab8:	211f      	movs	r1, #31
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fa0e 	bl	8001edc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	b21a      	sxth	r2, r3
 8002ace:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <close+0xcc>)
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b21b      	sxth	r3, r3
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	b21b      	sxth	r3, r3
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <close+0xcc>)
 8002adc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	b21b      	sxth	r3, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	b21a      	sxth	r2, r3
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <close+0xd0>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b21b      	sxth	r3, r3
 8002af2:	4013      	ands	r3, r2
 8002af4:	b21b      	sxth	r3, r3
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <close+0xd0>)
 8002afa:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	4a0f      	ldr	r2, [pc, #60]	; (8002b3c <close+0xd4>)
 8002b00:	2100      	movs	r1, #0
 8002b02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <close+0xd8>)
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002b0e:	bf00      	nop
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	3301      	adds	r3, #1
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff f991 	bl	8001e44 <WIZCHIP_READ>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f3      	bne.n	8002b10 <close+0xa8>
	return SOCK_OK;
 8002b28:	2301      	movs	r3, #1
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20001114 	.word	0x20001114
 8002b38:	20001116 	.word	0x20001116
 8002b3c:	20001118 	.word	0x20001118
 8002b40:	20001128 	.word	0x20001128

08002b44 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
 8002b50:	4613      	mov	r3, r2
 8002b52:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d902      	bls.n	8002b60 <connect+0x1c>
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5e:	e0d0      	b.n	8002d02 <connect+0x1be>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	3301      	adds	r3, #1
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff f96b 	bl	8001e44 <WIZCHIP_READ>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d002      	beq.n	8002b7e <connect+0x3a>
 8002b78:	f06f 0304 	mvn.w	r3, #4
 8002b7c:	e0c1      	b.n	8002d02 <connect+0x1be>
   setSn_CR(sn,Sn_CR_OPEN);
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	3301      	adds	r3, #1
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f9a5 	bl	8001edc <WIZCHIP_WRITE>
   CHECK_SOCKINIT();
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	3301      	adds	r3, #1
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f950 	bl	8001e44 <WIZCHIP_READ>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b13      	cmp	r3, #19
 8002ba8:	d002      	beq.n	8002bb0 <connect+0x6c>
 8002baa:	f06f 0302 	mvn.w	r3, #2
 8002bae:	e0a8      	b.n	8002d02 <connect+0x1be>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	3201      	adds	r2, #1
 8002bbe:	7812      	ldrb	r2, [r2, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	3202      	adds	r2, #2
 8002bcc:	7812      	ldrb	r2, [r2, #0]
 8002bce:	4413      	add	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	3203      	adds	r2, #3
 8002bda:	7812      	ldrb	r2, [r2, #0]
 8002bdc:	4413      	add	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be6:	d002      	beq.n	8002bee <connect+0xaa>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <connect+0xb0>
 8002bee:	f06f 030b 	mvn.w	r3, #11
 8002bf2:	e086      	b.n	8002d02 <connect+0x1be>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8002bf4:	88bb      	ldrh	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <connect+0xbc>
 8002bfa:	f06f 030a 	mvn.w	r3, #10
 8002bfe:	e080      	b.n	8002d02 <connect+0x1be>
	setSn_DIPR(sn,addr);
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	3301      	adds	r3, #1
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	6839      	ldr	r1, [r7, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fa11 	bl	8002038 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c22:	461a      	mov	r2, r3
 8002c24:	88bb      	ldrh	r3, [r7, #4]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	f7ff f954 	bl	8001edc <WIZCHIP_WRITE>
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	3301      	adds	r3, #1
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002c40:	461a      	mov	r2, r3
 8002c42:	88bb      	ldrh	r3, [r7, #4]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	4619      	mov	r1, r3
 8002c48:	4610      	mov	r0, r2
 8002c4a:	f7ff f947 	bl	8001edc <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	3301      	adds	r3, #1
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c5a:	2104      	movs	r1, #4
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff f93d 	bl	8001edc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002c62:	bf00      	nop
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	3301      	adds	r3, #1
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff f8e7 	bl	8001e44 <WIZCHIP_READ>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f3      	bne.n	8002c64 <connect+0x120>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002c7c:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <connect+0x1c8>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	fa42 f303 	asr.w	r3, r2, r3
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d02b      	beq.n	8002ce8 <connect+0x1a4>
 8002c90:	2300      	movs	r3, #0
 8002c92:	e036      	b.n	8002d02 <connect+0x1be>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	3301      	adds	r3, #1
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff f8cf 	bl	8001e44 <WIZCHIP_READ>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00c      	beq.n	8002cca <connect+0x186>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002cbc:	2108      	movs	r1, #8
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff f90c 	bl	8001edc <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8002cc4:	f06f 030c 	mvn.w	r3, #12
 8002cc8:	e01b      	b.n	8002d02 <connect+0x1be>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	3301      	adds	r3, #1
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff f8b4 	bl	8001e44 <WIZCHIP_READ>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <connect+0x1a4>
		{
			return SOCKERR_SOCKCLOSED;
 8002ce2:	f06f 0303 	mvn.w	r3, #3
 8002ce6:	e00c      	b.n	8002d02 <connect+0x1be>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	3301      	adds	r3, #1
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff f8a5 	bl	8001e44 <WIZCHIP_READ>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b17      	cmp	r3, #23
 8002cfe:	d1c9      	bne.n	8002c94 <connect+0x150>
		}
	}
   
   return SOCK_OK;
 8002d00:	2301      	movs	r3, #1
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20001114 	.word	0x20001114

08002d10 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d902      	bls.n	8002d26 <disconnect+0x16>
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	e062      	b.n	8002dec <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff f888 	bl	8001e44 <WIZCHIP_READ>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d002      	beq.n	8002d44 <disconnect+0x34>
 8002d3e:	f06f 0304 	mvn.w	r3, #4
 8002d42:	e053      	b.n	8002dec <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	3301      	adds	r3, #1
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d50:	2108      	movs	r1, #8
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f8c2 	bl	8001edc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002d58:	bf00      	nop
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	3301      	adds	r3, #1
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f86c 	bl	8001e44 <WIZCHIP_READ>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f3      	bne.n	8002d5a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	2201      	movs	r2, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	b21b      	sxth	r3, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	b21a      	sxth	r2, r3
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <disconnect+0xe4>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b21b      	sxth	r3, r3
 8002d86:	4013      	ands	r3, r2
 8002d88:	b21b      	sxth	r3, r3
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <disconnect+0xe4>)
 8002d8e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <disconnect+0xe8>)
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	fa42 f303 	asr.w	r3, r2, r3
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d016      	beq.n	8002dd2 <disconnect+0xc2>
 8002da4:	2300      	movs	r3, #0
 8002da6:	e021      	b.n	8002dec <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	3301      	adds	r3, #1
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff f845 	bl	8001e44 <WIZCHIP_READ>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d006      	beq.n	8002dd2 <disconnect+0xc2>
	   {
	      close(sn);
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fe4e 	bl	8002a68 <close>
	      return SOCKERR_TIMEOUT;
 8002dcc:	f06f 030c 	mvn.w	r3, #12
 8002dd0:	e00c      	b.n	8002dec <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff f830 	bl	8001e44 <WIZCHIP_READ>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1de      	bne.n	8002da8 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8002dea:	2301      	movs	r3, #1
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20001116 	.word	0x20001116
 8002df8:	20001114 	.word	0x20001114

08002dfc <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	71fb      	strb	r3, [r7, #7]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d902      	bls.n	8002e20 <send+0x24>
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	e0de      	b.n	8002fde <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	3301      	adds	r3, #1
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff f80b 	bl	8001e44 <WIZCHIP_READ>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d002      	beq.n	8002e3e <send+0x42>
 8002e38:	f06f 0304 	mvn.w	r3, #4
 8002e3c:	e0cf      	b.n	8002fde <send+0x1e2>
   CHECK_SOCKDATA();
 8002e3e:	88bb      	ldrh	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <send+0x4e>
 8002e44:	f06f 030d 	mvn.w	r3, #13
 8002e48:	e0c9      	b.n	8002fde <send+0x1e2>
   tmp = getSn_SR(sn);
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	3301      	adds	r3, #1
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe fff4 	bl	8001e44 <WIZCHIP_READ>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b17      	cmp	r3, #23
 8002e64:	d005      	beq.n	8002e72 <send+0x76>
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	2b1c      	cmp	r3, #28
 8002e6a:	d002      	beq.n	8002e72 <send+0x76>
 8002e6c:	f06f 0306 	mvn.w	r3, #6
 8002e70:	e0b5      	b.n	8002fde <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8002e72:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <send+0x1ec>)
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	fa42 f303 	asr.w	r3, r2, r3
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d039      	beq.n	8002efa <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe ffd6 	bl	8001e44 <WIZCHIP_READ>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d019      	beq.n	8002ede <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	3301      	adds	r3, #1
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002eb6:	2110      	movs	r1, #16
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff f80f 	bl	8001edc <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	b21b      	sxth	r3, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	b21a      	sxth	r2, r3
 8002ecc:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <send+0x1ec>)
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	b21b      	sxth	r3, r3
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <send+0x1ec>)
 8002eda:	801a      	strh	r2, [r3, #0]
 8002edc:	e00d      	b.n	8002efa <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d006      	beq.n	8002ef6 <send+0xfa>
      {
         close(sn);
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fdbc 	bl	8002a68 <close>
         return SOCKERR_TIMEOUT;
 8002ef0:	f06f 030c 	mvn.w	r3, #12
 8002ef4:	e073      	b.n	8002fde <send+0x1e2>
      }
      else return SOCK_BUSY;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e071      	b.n	8002fde <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	3301      	adds	r3, #1
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe ff9c 	bl	8001e44 <WIZCHIP_READ>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	029b      	lsls	r3, r3, #10
 8002f12:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002f14:	88ba      	ldrh	r2, [r7, #4]
 8002f16:	89bb      	ldrh	r3, [r7, #12]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d901      	bls.n	8002f20 <send+0x124>
 8002f1c:	89bb      	ldrh	r3, [r7, #12]
 8002f1e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff f8e8 	bl	80020f8 <getSn_TX_FSR>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	3301      	adds	r3, #1
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe ff83 	bl	8001e44 <WIZCHIP_READ>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	2b17      	cmp	r3, #23
 8002f46:	d009      	beq.n	8002f5c <send+0x160>
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	2b1c      	cmp	r3, #28
 8002f4c:	d006      	beq.n	8002f5c <send+0x160>
      {
         close(sn);
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fd89 	bl	8002a68 <close>
         return SOCKERR_SOCKSTATUS;
 8002f56:	f06f 0306 	mvn.w	r3, #6
 8002f5a:	e040      	b.n	8002fde <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002f5c:	4b23      	ldr	r3, [pc, #140]	; (8002fec <send+0x1f0>)
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	fa42 f303 	asr.w	r3, r2, r3
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <send+0x180>
 8002f70:	88ba      	ldrh	r2, [r7, #4]
 8002f72:	89bb      	ldrh	r3, [r7, #12]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d901      	bls.n	8002f7c <send+0x180>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e030      	b.n	8002fde <send+0x1e2>
      if(len <= freesize) break;
 8002f7c:	88ba      	ldrh	r2, [r7, #4]
 8002f7e:	89bb      	ldrh	r3, [r7, #12]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d900      	bls.n	8002f86 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8002f84:	e7cc      	b.n	8002f20 <send+0x124>
      if(len <= freesize) break;
 8002f86:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002f88:	88ba      	ldrh	r2, [r7, #4]
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	6839      	ldr	r1, [r7, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff f948 	bl	8002224 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	3301      	adds	r3, #1
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002fa0:	2120      	movs	r1, #32
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe ff9a 	bl	8001edc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002fa8:	bf00      	nop
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	3301      	adds	r3, #1
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe ff44 	bl	8001e44 <WIZCHIP_READ>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f3      	bne.n	8002faa <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	b21a      	sxth	r2, r3
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <send+0x1ec>)
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	b21b      	sxth	r3, r3
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	b21b      	sxth	r3, r3
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <send+0x1ec>)
 8002fda:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002fdc:	88bb      	ldrh	r3, [r7, #4]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20001116 	.word	0x20001116
 8002fec:	20001114 	.word	0x20001114

08002ff0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	71fb      	strb	r3, [r7, #7]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b08      	cmp	r3, #8
 800300c:	d902      	bls.n	8003014 <recv+0x24>
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	e09c      	b.n	800314e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	3301      	adds	r3, #1
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe ff11 	bl	8001e44 <WIZCHIP_READ>
 8003022:	4603      	mov	r3, r0
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	2b01      	cmp	r3, #1
 800302a:	d002      	beq.n	8003032 <recv+0x42>
 800302c:	f06f 0304 	mvn.w	r3, #4
 8003030:	e08d      	b.n	800314e <recv+0x15e>
   CHECK_SOCKDATA();
 8003032:	88bb      	ldrh	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <recv+0x4e>
 8003038:	f06f 030d 	mvn.w	r3, #13
 800303c:	e087      	b.n	800314e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	3301      	adds	r3, #1
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe fefa 	bl	8001e44 <WIZCHIP_READ>
 8003050:	4603      	mov	r3, r0
 8003052:	b29b      	uxth	r3, r3
 8003054:	029b      	lsls	r3, r3, #10
 8003056:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003058:	89ba      	ldrh	r2, [r7, #12]
 800305a:	88bb      	ldrh	r3, [r7, #4]
 800305c:	429a      	cmp	r2, r3
 800305e:	d201      	bcs.n	8003064 <recv+0x74>
 8003060:	89bb      	ldrh	r3, [r7, #12]
 8003062:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff f891 	bl	800218e <getSn_RX_RSR>
 800306c:	4603      	mov	r3, r0
 800306e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	3301      	adds	r3, #1
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fee1 	bl	8001e44 <WIZCHIP_READ>
 8003082:	4603      	mov	r3, r0
 8003084:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	2b17      	cmp	r3, #23
 800308a:	d026      	beq.n	80030da <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b1c      	cmp	r3, #28
 8003090:	d11c      	bne.n	80030cc <recv+0xdc>
            {
               if(recvsize != 0) break;
 8003092:	89bb      	ldrh	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d133      	bne.n	8003100 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff f82c 	bl	80020f8 <getSn_TX_FSR>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461c      	mov	r4, r3
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	3301      	adds	r3, #1
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe fec7 	bl	8001e44 <WIZCHIP_READ>
 80030b6:	4603      	mov	r3, r0
 80030b8:	029b      	lsls	r3, r3, #10
 80030ba:	429c      	cmp	r4, r3
 80030bc:	d10d      	bne.n	80030da <recv+0xea>
               {
                  close(sn);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fcd1 	bl	8002a68 <close>
                  return SOCKERR_SOCKSTATUS;
 80030c6:	f06f 0306 	mvn.w	r3, #6
 80030ca:	e040      	b.n	800314e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fcca 	bl	8002a68 <close>
               return SOCKERR_SOCKSTATUS;
 80030d4:	f06f 0306 	mvn.w	r3, #6
 80030d8:	e039      	b.n	800314e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80030da:	4b1f      	ldr	r3, [pc, #124]	; (8003158 <recv+0x168>)
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	fa42 f303 	asr.w	r3, r2, r3
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d004      	beq.n	80030f8 <recv+0x108>
 80030ee:	89bb      	ldrh	r3, [r7, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <recv+0x108>
 80030f4:	2300      	movs	r3, #0
 80030f6:	e02a      	b.n	800314e <recv+0x15e>
         if(recvsize != 0) break;
 80030f8:	89bb      	ldrh	r3, [r7, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80030fe:	e7b1      	b.n	8003064 <recv+0x74>
               if(recvsize != 0) break;
 8003100:	bf00      	nop
 8003102:	e000      	b.n	8003106 <recv+0x116>
         if(recvsize != 0) break;
 8003104:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8003106:	89ba      	ldrh	r2, [r7, #12]
 8003108:	88bb      	ldrh	r3, [r7, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	d201      	bcs.n	8003112 <recv+0x122>
 800310e:	89bb      	ldrh	r3, [r7, #12]
 8003110:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8003112:	88ba      	ldrh	r2, [r7, #4]
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	6839      	ldr	r1, [r7, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff f8df 	bl	80022dc <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	3301      	adds	r3, #1
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800312a:	2140      	movs	r1, #64	; 0x40
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe fed5 	bl	8001edc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003132:	bf00      	nop
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	3301      	adds	r3, #1
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003140:	4618      	mov	r0, r3
 8003142:	f7fe fe7f 	bl	8001e44 <WIZCHIP_READ>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f3      	bne.n	8003134 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800314c:	88bb      	ldrh	r3, [r7, #4]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}
 8003156:	bf00      	nop
 8003158:	20001114 	.word	0x20001114

0800315c <wizchip_select>:
void ethernetHTTPRoutine(void);

void initializeHttp(void);

void wizchip_select(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin, GPIO_PIN_RESET);
 8003160:	2200      	movs	r2, #0
 8003162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003166:	4802      	ldr	r0, [pc, #8]	; (8003170 <wizchip_select+0x14>)
 8003168:	f006 fbec 	bl	8009944 <HAL_GPIO_WritePin>
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	48000400 	.word	0x48000400

08003174 <wizchip_deselect>:

void wizchip_deselect(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, W5500_CS_Pin, GPIO_PIN_SET);
 8003178:	2201      	movs	r2, #1
 800317a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800317e:	4802      	ldr	r0, [pc, #8]	; (8003188 <wizchip_deselect+0x14>)
 8003180:	f006 fbe0 	bl	8009944 <HAL_GPIO_WritePin>
}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}
 8003188:	48000400 	.word	0x48000400

0800318c <W5500_Spi>:
{
    HAL_SPI_Transmit(&_W5500_SPI,buff,len,HAL_MAX_DELAY) ;
}

uint8_t W5500_Spi(uint8_t Data)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af02      	add	r7, sp, #8
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W5500_SPI, &Data, &ret, 1, 100);
 8003196:	f107 020f 	add.w	r2, r7, #15
 800319a:	1df9      	adds	r1, r7, #7
 800319c:	2364      	movs	r3, #100	; 0x64
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2301      	movs	r3, #1
 80031a2:	4804      	ldr	r0, [pc, #16]	; (80031b4 <W5500_Spi+0x28>)
 80031a4:	f008 fa3f 	bl	800b626 <HAL_SPI_TransmitReceive>
	return ret;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000788 	.word	0x20000788

080031b8 <wiz5500Init>:
	wizchip_setnetinfo ( & net_info ) ;
}*/


void wiz5500Init(void)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0

	uint8_t memsize[2][8] = { {2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 80031be:	4b40      	ldr	r3, [pc, #256]	; (80032c0 <wiz5500Init+0x108>)
 80031c0:	f107 0408 	add.w	r4, r7, #8
 80031c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tmp;
	//hardware reset the module
	HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_RESET);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	483d      	ldr	r0, [pc, #244]	; (80032c4 <wiz5500Init+0x10c>)
 80031d0:	f006 fbb8 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_Delay(15000);
 80031d4:	f643 2098 	movw	r0, #15000	; 0x3a98
 80031d8:	f006 f886 	bl	80092e8 <HAL_Delay>
	HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_SET);
 80031dc:	2201      	movs	r2, #1
 80031de:	2180      	movs	r1, #128	; 0x80
 80031e0:	4838      	ldr	r0, [pc, #224]	; (80032c4 <wiz5500Init+0x10c>)
 80031e2:	f006 fbaf 	bl	8009944 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select,wizchip_deselect);
 80031e6:	4938      	ldr	r1, [pc, #224]	; (80032c8 <wiz5500Init+0x110>)
 80031e8:	4838      	ldr	r0, [pc, #224]	; (80032cc <wiz5500Init+0x114>)
 80031ea:	f000 f9d3 	bl	8003594 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_Spi,W5500_Spi);
 80031ee:	4938      	ldr	r1, [pc, #224]	; (80032d0 <wiz5500Init+0x118>)
 80031f0:	4837      	ldr	r0, [pc, #220]	; (80032d0 <wiz5500Init+0x118>)
 80031f2:	f000 f9f5 	bl	80035e0 <reg_wizchip_spi_cbfunc>
//	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff,W5500_WriteBuff);

	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 80031f6:	f107 0308 	add.w	r3, r7, #8
 80031fa:	4619      	mov	r1, r3
 80031fc:	2001      	movs	r0, #1
 80031fe:	f000 fa1b 	bl	8003638 <ctlwizchip>
 8003202:	4603      	mov	r3, r0
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d103      	bne.n	8003212 <wiz5500Init+0x5a>
	{
		statusChipInit=1;
 800320a:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <wiz5500Init+0x11c>)
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
		return;
 8003210:	e052      	b.n	80032b8 <wiz5500Init+0x100>
	}
	/* PHY link status check */
	do
	{
		if(ctlwizchip(CW_GET_PHYSTATUS, (void*)&tmp) == -1)
 8003212:	1dfb      	adds	r3, r7, #7
 8003214:	4619      	mov	r1, r3
 8003216:	200c      	movs	r0, #12
 8003218:	f000 fa0e 	bl	8003638 <ctlwizchip>
 800321c:	4603      	mov	r3, r0
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d103      	bne.n	800322c <wiz5500Init+0x74>
		{
			statusPhysLink=1;
 8003224:	4b2c      	ldr	r3, [pc, #176]	; (80032d8 <wiz5500Init+0x120>)
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
			return;
 800322a:	e045      	b.n	80032b8 <wiz5500Init+0x100>
		}
		statusPhysLink=0;
 800322c:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <wiz5500Init+0x120>)
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
	} while (tmp == PHY_LINK_OFF);
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ec      	beq.n	8003212 <wiz5500Init+0x5a>
	HAL_Delay(3000);
 8003238:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800323c:	f006 f854 	bl	80092e8 <HAL_Delay>
	//getVERSIONR();
	gWIZNETINFO.ip[0]=Ip_config_Ip[0];
 8003240:	4b26      	ldr	r3, [pc, #152]	; (80032dc <wiz5500Init+0x124>)
 8003242:	781a      	ldrb	r2, [r3, #0]
 8003244:	4b26      	ldr	r3, [pc, #152]	; (80032e0 <wiz5500Init+0x128>)
 8003246:	719a      	strb	r2, [r3, #6]
	gWIZNETINFO.ip[1]=Ip_config_Ip[1];
 8003248:	4b24      	ldr	r3, [pc, #144]	; (80032dc <wiz5500Init+0x124>)
 800324a:	785a      	ldrb	r2, [r3, #1]
 800324c:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <wiz5500Init+0x128>)
 800324e:	71da      	strb	r2, [r3, #7]
	gWIZNETINFO.ip[2]=Ip_config_Ip[2];
 8003250:	4b22      	ldr	r3, [pc, #136]	; (80032dc <wiz5500Init+0x124>)
 8003252:	789a      	ldrb	r2, [r3, #2]
 8003254:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <wiz5500Init+0x128>)
 8003256:	721a      	strb	r2, [r3, #8]
	gWIZNETINFO.ip[3]=Ip_config_Ip[3];
 8003258:	4b20      	ldr	r3, [pc, #128]	; (80032dc <wiz5500Init+0x124>)
 800325a:	78da      	ldrb	r2, [r3, #3]
 800325c:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <wiz5500Init+0x128>)
 800325e:	725a      	strb	r2, [r3, #9]

	gWIZNETINFO.sn[0]=Ip_Config_Subnet[0];
 8003260:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <wiz5500Init+0x12c>)
 8003262:	781a      	ldrb	r2, [r3, #0]
 8003264:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <wiz5500Init+0x128>)
 8003266:	729a      	strb	r2, [r3, #10]
	gWIZNETINFO.sn[1]=Ip_Config_Subnet[1];
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <wiz5500Init+0x12c>)
 800326a:	785a      	ldrb	r2, [r3, #1]
 800326c:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <wiz5500Init+0x128>)
 800326e:	72da      	strb	r2, [r3, #11]
	gWIZNETINFO.sn[2]=Ip_Config_Subnet[2];
 8003270:	4b1c      	ldr	r3, [pc, #112]	; (80032e4 <wiz5500Init+0x12c>)
 8003272:	789a      	ldrb	r2, [r3, #2]
 8003274:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <wiz5500Init+0x128>)
 8003276:	731a      	strb	r2, [r3, #12]
	gWIZNETINFO.sn[3]=Ip_Config_Subnet[3];
 8003278:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <wiz5500Init+0x12c>)
 800327a:	78da      	ldrb	r2, [r3, #3]
 800327c:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <wiz5500Init+0x128>)
 800327e:	735a      	strb	r2, [r3, #13]

	gWIZNETINFO.gw[0]=Ip_config_gateway[0];
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <wiz5500Init+0x130>)
 8003282:	781a      	ldrb	r2, [r3, #0]
 8003284:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <wiz5500Init+0x128>)
 8003286:	739a      	strb	r2, [r3, #14]
	gWIZNETINFO.gw[1]=Ip_config_gateway[1];
 8003288:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <wiz5500Init+0x130>)
 800328a:	785a      	ldrb	r2, [r3, #1]
 800328c:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <wiz5500Init+0x128>)
 800328e:	73da      	strb	r2, [r3, #15]
	gWIZNETINFO.gw[2]=Ip_config_gateway[2];
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <wiz5500Init+0x130>)
 8003292:	789a      	ldrb	r2, [r3, #2]
 8003294:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <wiz5500Init+0x128>)
 8003296:	741a      	strb	r2, [r3, #16]
	gWIZNETINFO.gw[3]=Ip_config_gateway[3];
 8003298:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <wiz5500Init+0x130>)
 800329a:	78da      	ldrb	r2, [r3, #3]
 800329c:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <wiz5500Init+0x128>)
 800329e:	745a      	strb	r2, [r3, #17]

	wizchip_setnetinfo(&gWIZNETINFO);
 80032a0:	480f      	ldr	r0, [pc, #60]	; (80032e0 <wiz5500Init+0x128>)
 80032a2:	f000 fd65 	bl	8003d70 <wizchip_setnetinfo>
	HAL_Delay(1000);
 80032a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032aa:	f006 f81d 	bl	80092e8 <HAL_Delay>


	//processDHCP();

	wizchip_getnetinfo(&checkgWIZNETINFO);
 80032ae:	480f      	ldr	r0, [pc, #60]	; (80032ec <wiz5500Init+0x134>)
 80032b0:	f000 fd9e 	bl	8003df0 <wizchip_getnetinfo>

	initializeHttp();
 80032b4:	f000 f81c 	bl	80032f0 <initializeHttp>

}
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd90      	pop	{r4, r7, pc}
 80032be:	bf00      	nop
 80032c0:	0800f3d0 	.word	0x0800f3d0
 80032c4:	48000800 	.word	0x48000800
 80032c8:	08003175 	.word	0x08003175
 80032cc:	0800315d 	.word	0x0800315d
 80032d0:	0800318d 	.word	0x0800318d
 80032d4:	20002372 	.word	0x20002372
 80032d8:	20002373 	.word	0x20002373
 80032dc:	20002d80 	.word	0x20002d80
 80032e0:	20000024 	.word	0x20000024
 80032e4:	20002d84 	.word	0x20002d84
 80032e8:	20002d88 	.word	0x20002d88
 80032ec:	20001130 	.word	0x20001130

080032f0 <initializeHttp>:
		}
	}
}

void initializeHttp(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af02      	add	r7, sp, #8
	Domain_IP[0] = Ip_config_Server[0];
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <initializeHttp+0x40>)
 80032f8:	781a      	ldrb	r2, [r3, #0]
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <initializeHttp+0x44>)
 80032fc:	701a      	strb	r2, [r3, #0]
	Domain_IP[1] = Ip_config_Server[1];
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <initializeHttp+0x40>)
 8003300:	785a      	ldrb	r2, [r3, #1]
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <initializeHttp+0x44>)
 8003304:	705a      	strb	r2, [r3, #1]
	Domain_IP[2] = Ip_config_Server[2];
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <initializeHttp+0x40>)
 8003308:	789a      	ldrb	r2, [r3, #2]
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <initializeHttp+0x44>)
 800330c:	709a      	strb	r2, [r3, #2]
	Domain_IP[3] = Ip_config_Server[3];
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <initializeHttp+0x40>)
 8003310:	78da      	ldrb	r2, [r3, #3]
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <initializeHttp+0x44>)
 8003314:	70da      	strb	r2, [r3, #3]

 	httpc_init(0, Domain_IP, 9011, g_send_buf, g_recv_buf);
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <initializeHttp+0x48>)
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <initializeHttp+0x4c>)
 800331c:	f242 3233 	movw	r2, #9011	; 0x2333
 8003320:	4904      	ldr	r1, [pc, #16]	; (8003334 <initializeHttp+0x44>)
 8003322:	2000      	movs	r0, #0
 8003324:	f7ff f836 	bl	8002394 <httpc_init>
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20002d90 	.word	0x20002d90
 8003334:	2000003c 	.word	0x2000003c
 8003338:	2000194c 	.word	0x2000194c
 800333c:	2000114c 	.word	0x2000114c

08003340 <ethernetHTTPRoutine>:

void ethernetHTTPRoutine(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0

	receivehttpcheck();
 8003344:	f7ff fa56 	bl	80027f4 <receivehttpcheck>
	httpc_connection_handler();
 8003348:	f7ff f862 	bl	8002410 <httpc_connection_handler>

	if(httpc_isSockOpen)
 800334c:	4b5a      	ldr	r3, [pc, #360]	; (80034b8 <ethernetHTTPRoutine+0x178>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <ethernetHTTPRoutine+0x20>
	{
		connectionCheck = httpc_connect();
 8003354:	f7ff f90e 	bl	8002574 <httpc_connect>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	4b57      	ldr	r3, [pc, #348]	; (80034bc <ethernetHTTPRoutine+0x17c>)
 800335e:	701a      	strb	r2, [r3, #0]
	}
	if(httpc_isConnected)
 8003360:	4b57      	ldr	r3, [pc, #348]	; (80034c0 <ethernetHTTPRoutine+0x180>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80a5 	beq.w	80034b4 <ethernetHTTPRoutine+0x174>
	{
	//	if(!flag_sent_http_request)
		{
		// Send: HTTP request
		switch(st)
 800336a:	4b56      	ldr	r3, [pc, #344]	; (80034c4 <ethernetHTTPRoutine+0x184>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b07      	cmp	r3, #7
 8003370:	d84a      	bhi.n	8003408 <ethernetHTTPRoutine+0xc8>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <ethernetHTTPRoutine+0x38>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	08003399 	.word	0x08003399
 800337c:	080033a7 	.word	0x080033a7
 8003380:	080033b5 	.word	0x080033b5
 8003384:	080033c3 	.word	0x080033c3
 8003388:	080033d1 	.word	0x080033d1
 800338c:	080033df 	.word	0x080033df
 8003390:	080033ed 	.word	0x080033ed
 8003394:	080033fb 	.word	0x080033fb
		{
			case 0:
				SelectFurnace=1;
 8003398:	4b4b      	ldr	r3, [pc, #300]	; (80034c8 <ethernetHTTPRoutine+0x188>)
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
				st=1;
 800339e:	4b49      	ldr	r3, [pc, #292]	; (80034c4 <ethernetHTTPRoutine+0x184>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
			break;
 80033a4:	e031      	b.n	800340a <ethernetHTTPRoutine+0xca>
			case 1://dummy furnace
				SelectFurnace=2;
 80033a6:	4b48      	ldr	r3, [pc, #288]	; (80034c8 <ethernetHTTPRoutine+0x188>)
 80033a8:	2202      	movs	r2, #2
 80033aa:	701a      	strb	r2, [r3, #0]
				st=2;
 80033ac:	4b45      	ldr	r3, [pc, #276]	; (80034c4 <ethernetHTTPRoutine+0x184>)
 80033ae:	2202      	movs	r2, #2
 80033b0:	701a      	strb	r2, [r3, #0]
			break;
 80033b2:	e02a      	b.n	800340a <ethernetHTTPRoutine+0xca>
			case 2:
				SelectFurnace=3;
 80033b4:	4b44      	ldr	r3, [pc, #272]	; (80034c8 <ethernetHTTPRoutine+0x188>)
 80033b6:	2203      	movs	r2, #3
 80033b8:	701a      	strb	r2, [r3, #0]
				st=3;
 80033ba:	4b42      	ldr	r3, [pc, #264]	; (80034c4 <ethernetHTTPRoutine+0x184>)
 80033bc:	2203      	movs	r2, #3
 80033be:	701a      	strb	r2, [r3, #0]
			break;
 80033c0:	e023      	b.n	800340a <ethernetHTTPRoutine+0xca>
			case 3://dummy furnace
				SelectFurnace=4;
 80033c2:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <ethernetHTTPRoutine+0x188>)
 80033c4:	2204      	movs	r2, #4
 80033c6:	701a      	strb	r2, [r3, #0]
				st=0;
 80033c8:	4b3e      	ldr	r3, [pc, #248]	; (80034c4 <ethernetHTTPRoutine+0x184>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	701a      	strb	r2, [r3, #0]
			break;
 80033ce:	e01c      	b.n	800340a <ethernetHTTPRoutine+0xca>
			case 4:
				SelectFurnace=3;
 80033d0:	4b3d      	ldr	r3, [pc, #244]	; (80034c8 <ethernetHTTPRoutine+0x188>)
 80033d2:	2203      	movs	r2, #3
 80033d4:	701a      	strb	r2, [r3, #0]
				st=5;
 80033d6:	4b3b      	ldr	r3, [pc, #236]	; (80034c4 <ethernetHTTPRoutine+0x184>)
 80033d8:	2205      	movs	r2, #5
 80033da:	701a      	strb	r2, [r3, #0]
			break;
 80033dc:	e015      	b.n	800340a <ethernetHTTPRoutine+0xca>
			case 5://dummy furnace
				SelectFurnace=5;
 80033de:	4b3a      	ldr	r3, [pc, #232]	; (80034c8 <ethernetHTTPRoutine+0x188>)
 80033e0:	2205      	movs	r2, #5
 80033e2:	701a      	strb	r2, [r3, #0]
				st=6;
 80033e4:	4b37      	ldr	r3, [pc, #220]	; (80034c4 <ethernetHTTPRoutine+0x184>)
 80033e6:	2206      	movs	r2, #6
 80033e8:	701a      	strb	r2, [r3, #0]
			break;
 80033ea:	e00e      	b.n	800340a <ethernetHTTPRoutine+0xca>
			case 6:
				SelectFurnace=4;
 80033ec:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <ethernetHTTPRoutine+0x188>)
 80033ee:	2204      	movs	r2, #4
 80033f0:	701a      	strb	r2, [r3, #0]
				st=7;
 80033f2:	4b34      	ldr	r3, [pc, #208]	; (80034c4 <ethernetHTTPRoutine+0x184>)
 80033f4:	2207      	movs	r2, #7
 80033f6:	701a      	strb	r2, [r3, #0]
			break;
 80033f8:	e007      	b.n	800340a <ethernetHTTPRoutine+0xca>
			case 7:
				SelectFurnace=5;
 80033fa:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <ethernetHTTPRoutine+0x188>)
 80033fc:	2205      	movs	r2, #5
 80033fe:	701a      	strb	r2, [r3, #0]
				st=0;
 8003400:	4b30      	ldr	r3, [pc, #192]	; (80034c4 <ethernetHTTPRoutine+0x184>)
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
			break;
 8003406:	e000      	b.n	800340a <ethernetHTTPRoutine+0xca>
			default:
			break;
 8003408:	bf00      	nop
		}
		//SelectFurnace=4;
		if(SelectFurnace == 5)
 800340a:	4b2f      	ldr	r3, [pc, #188]	; (80034c8 <ethernetHTTPRoutine+0x188>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b05      	cmp	r3, #5
 8003410:	d11c      	bne.n	800344c <ethernetHTTPRoutine+0x10c>
		{
			memset(loc_spectrumresult, 0, 550);
 8003412:	f240 2226 	movw	r2, #550	; 0x226
 8003416:	2100      	movs	r1, #0
 8003418:	482c      	ldr	r0, [pc, #176]	; (80034cc <ethernetHTTPRoutine+0x18c>)
 800341a:	f00a fd51 	bl	800dec0 <memset>
			memcpy(loc_spectrumresult,&SpectrumResult_furnace[SelectFurnace-1].result_spectrum[0],500);
 800341e:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <ethernetHTTPRoutine+0x188>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	3b01      	subs	r3, #1
 8003424:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003428:	fb02 f303 	mul.w	r3, r2, r3
 800342c:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <ethernetHTTPRoutine+0x190>)
 800342e:	4413      	add	r3, r2
 8003430:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003434:	4619      	mov	r1, r3
 8003436:	4825      	ldr	r0, [pc, #148]	; (80034cc <ethernetHTTPRoutine+0x18c>)
 8003438:	f00a fd34 	bl	800dea4 <memcpy>
			sprintf(URI,"http://122.165.206.136:9011/spectrumResult?d=%.*s",418,loc_spectrumresult);
 800343c:	4b23      	ldr	r3, [pc, #140]	; (80034cc <ethernetHTTPRoutine+0x18c>)
 800343e:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8003442:	4924      	ldr	r1, [pc, #144]	; (80034d4 <ethernetHTTPRoutine+0x194>)
 8003444:	4824      	ldr	r0, [pc, #144]	; (80034d8 <ethernetHTTPRoutine+0x198>)
 8003446:	f00a fe71 	bl	800e12c <siprintf>
 800344a:	e01b      	b.n	8003484 <ethernetHTTPRoutine+0x144>
		}
		else
		{
			memset(loc_spectrumresult, 0, 550);
 800344c:	f240 2226 	movw	r2, #550	; 0x226
 8003450:	2100      	movs	r1, #0
 8003452:	481e      	ldr	r0, [pc, #120]	; (80034cc <ethernetHTTPRoutine+0x18c>)
 8003454:	f00a fd34 	bl	800dec0 <memset>
			memcpy(loc_spectrumresult,&SpectrumResult_furnace[SelectFurnace-1].result_spectrum[0],500);
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <ethernetHTTPRoutine+0x188>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	3b01      	subs	r3, #1
 800345e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	4a1a      	ldr	r2, [pc, #104]	; (80034d0 <ethernetHTTPRoutine+0x190>)
 8003468:	4413      	add	r3, r2
 800346a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800346e:	4619      	mov	r1, r3
 8003470:	4816      	ldr	r0, [pc, #88]	; (80034cc <ethernetHTTPRoutine+0x18c>)
 8003472:	f00a fd17 	bl	800dea4 <memcpy>
			sprintf(URI,"http://122.165.206.136:9011/spectrumResult?d=%.*s",418,loc_spectrumresult);
 8003476:	4b15      	ldr	r3, [pc, #84]	; (80034cc <ethernetHTTPRoutine+0x18c>)
 8003478:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 800347c:	4915      	ldr	r1, [pc, #84]	; (80034d4 <ethernetHTTPRoutine+0x194>)
 800347e:	4816      	ldr	r0, [pc, #88]	; (80034d8 <ethernetHTTPRoutine+0x198>)
 8003480:	f00a fe54 	bl	800e12c <siprintf>
		}

		request.method = (uint8_t *)HTTP_GET;
 8003484:	4b15      	ldr	r3, [pc, #84]	; (80034dc <ethernetHTTPRoutine+0x19c>)
 8003486:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <ethernetHTTPRoutine+0x1a0>)
 8003488:	601a      	str	r2, [r3, #0]
		request.uri = (uint8_t *)URI;
 800348a:	4b14      	ldr	r3, [pc, #80]	; (80034dc <ethernetHTTPRoutine+0x19c>)
 800348c:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <ethernetHTTPRoutine+0x198>)
 800348e:	605a      	str	r2, [r3, #4]
		request.host = (uint8_t *)Domain_name;
 8003490:	4b12      	ldr	r3, [pc, #72]	; (80034dc <ethernetHTTPRoutine+0x19c>)
 8003492:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <ethernetHTTPRoutine+0x1a4>)
 8003494:	609a      	str	r2, [r3, #8]
	    request.connection=(uint8_t *)HTTP_CONNECTION_CLOSE;
 8003496:	4b11      	ldr	r3, [pc, #68]	; (80034dc <ethernetHTTPRoutine+0x19c>)
 8003498:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <ethernetHTTPRoutine+0x1a8>)
 800349a:	611a      	str	r2, [r3, #16]
		request.content_type = (uint8_t *)HTTP_CTYPE_TEXT_HTML;
 800349c:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <ethernetHTTPRoutine+0x19c>)
 800349e:	4a13      	ldr	r2, [pc, #76]	; (80034ec <ethernetHTTPRoutine+0x1ac>)
 80034a0:	60da      	str	r2, [r3, #12]

		// HTTP client example #1: Function for send HTTP request (header and body fields are integrated)
			{
			httpc_send(&request, g_recv_buf, g_send_buf, 0);
 80034a2:	2300      	movs	r3, #0
 80034a4:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <ethernetHTTPRoutine+0x1b0>)
 80034a6:	4913      	ldr	r1, [pc, #76]	; (80034f4 <ethernetHTTPRoutine+0x1b4>)
 80034a8:	480c      	ldr	r0, [pc, #48]	; (80034dc <ethernetHTTPRoutine+0x19c>)
 80034aa:	f7ff f897 	bl	80025dc <httpc_send>
			}
			flag_sent_http_request = ENABLE;
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <ethernetHTTPRoutine+0x1b8>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]

		// Recv: HTTP response

	}

}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000908 	.word	0x20000908
 80034bc:	20001148 	.word	0x20001148
 80034c0:	20000909 	.word	0x20000909
 80034c4:	2000259a 	.word	0x2000259a
 80034c8:	20000055 	.word	0x20000055
 80034cc:	20002374 	.word	0x20002374
 80034d0:	200025a4 	.word	0x200025a4
 80034d4:	0800f3e0 	.word	0x0800f3e0
 80034d8:	2000214c 	.word	0x2000214c
 80034dc:	20000004 	.word	0x20000004
 80034e0:	0800f414 	.word	0x0800f414
 80034e4:	20000040 	.word	0x20000040
 80034e8:	0800f418 	.word	0x0800f418
 80034ec:	0800f420 	.word	0x0800f420
 80034f0:	2000114c 	.word	0x2000114c
 80034f4:	2000194c 	.word	0x2000194c
 80034f8:	20001147 	.word	0x20001147

080034fc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003526:	b480      	push	{r7}
 8003528:	af00      	add	r7, sp, #0
 800352a:	bf00      	nop
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	70fb      	strb	r3, [r7, #3]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
 8003570:	2300      	movs	r3, #0
 8003572:	4618      	mov	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	71fb      	strb	r3, [r7, #7]
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <reg_wizchip_cs_cbfunc+0x16>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80035aa:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <reg_wizchip_cs_cbfunc+0x40>)
 80035ac:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <reg_wizchip_cs_cbfunc+0x44>)
 80035ae:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <reg_wizchip_cs_cbfunc+0x40>)
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <reg_wizchip_cs_cbfunc+0x48>)
 80035b4:	619a      	str	r2, [r3, #24]
 80035b6:	e006      	b.n	80035c6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80035b8:	4a06      	ldr	r2, [pc, #24]	; (80035d4 <reg_wizchip_cs_cbfunc+0x40>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80035be:	4a05      	ldr	r2, [pc, #20]	; (80035d4 <reg_wizchip_cs_cbfunc+0x40>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	6193      	str	r3, [r2, #24]
   }
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000058 	.word	0x20000058
 80035d8:	08003519 	.word	0x08003519
 80035dc:	08003527 	.word	0x08003527

080035e0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80035ea:	bf00      	nop
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <reg_wizchip_spi_cbfunc+0x4c>)
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f9      	beq.n	80035ec <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <reg_wizchip_spi_cbfunc+0x24>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <reg_wizchip_spi_cbfunc+0x4c>)
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <reg_wizchip_spi_cbfunc+0x50>)
 8003608:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <reg_wizchip_spi_cbfunc+0x4c>)
 800360c:	4a09      	ldr	r2, [pc, #36]	; (8003634 <reg_wizchip_spi_cbfunc+0x54>)
 800360e:	621a      	str	r2, [r3, #32]
 8003610:	e006      	b.n	8003620 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003612:	4a06      	ldr	r2, [pc, #24]	; (800362c <reg_wizchip_spi_cbfunc+0x4c>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003618:	4a04      	ldr	r2, [pc, #16]	; (800362c <reg_wizchip_spi_cbfunc+0x4c>)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6213      	str	r3, [r2, #32]
   }
}
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	20000058 	.word	0x20000058
 8003630:	0800356d 	.word	0x0800356d
 8003634:	0800357d 	.word	0x0800357d

08003638 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	6039      	str	r1, [r7, #0]
 8003642:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	2b0f      	cmp	r3, #15
 8003654:	f200 80c7 	bhi.w	80037e6 <ctlwizchip+0x1ae>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <ctlwizchip+0x28>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	080036a1 	.word	0x080036a1
 8003664:	080036a7 	.word	0x080036a7
 8003668:	080036d3 	.word	0x080036d3
 800366c:	080036c7 	.word	0x080036c7
 8003670:	080036e1 	.word	0x080036e1
 8003674:	080036ed 	.word	0x080036ed
 8003678:	080036fb 	.word	0x080036fb
 800367c:	08003721 	.word	0x08003721
 8003680:	08003747 	.word	0x08003747
 8003684:	0800378b 	.word	0x0800378b
 8003688:	08003791 	.word	0x08003791
 800368c:	08003799 	.word	0x08003799
 8003690:	080037ed 	.word	0x080037ed
 8003694:	080037a1 	.word	0x080037a1
 8003698:	080037af 	.word	0x080037af
 800369c:	080037cb 	.word	0x080037cb
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80036a0:	f000 f8ac 	bl	80037fc <wizchip_sw_reset>
         break;
 80036a4:	e0a3      	b.n	80037ee <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3308      	adds	r3, #8
 80036b4:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f8e9 	bl	8003894 <wizchip_init>
 80036c2:	4603      	mov	r3, r0
 80036c4:	e094      	b.n	80037f0 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f96e 	bl	80039ac <wizchip_clrinterrupt>
         break;
 80036d0:	e08d      	b.n	80037ee <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80036d2:	f000 f99f 	bl	8003a14 <wizchip_getinterrupt>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	801a      	strh	r2, [r3, #0]
         break;
 80036de:	e086      	b.n	80037ee <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f9ba 	bl	8003a5e <wizchip_setinterruptmask>
         break;         
 80036ea:	e080      	b.n	80037ee <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80036ec:	f000 f9d2 	bl	8003a94 <wizchip_getinterruptmask>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	801a      	strh	r2, [r3, #0]
         break;
 80036f8:	e079      	b.n	80037ee <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	b29b      	uxth	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	4619      	mov	r1, r3
 8003706:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800370a:	f7fe fbe7 	bl	8001edc <WIZCHIP_WRITE>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	4619      	mov	r1, r3
 8003716:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800371a:	f7fe fbdf 	bl	8001edc <WIZCHIP_WRITE>
         break;
 800371e:	e066      	b.n	80037ee <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003720:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003724:	f7fe fb8e 	bl	8001e44 <WIZCHIP_READ>
 8003728:	4603      	mov	r3, r0
 800372a:	b29b      	uxth	r3, r3
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	b29c      	uxth	r4, r3
 8003730:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003734:	f7fe fb86 	bl	8001e44 <WIZCHIP_READ>
 8003738:	4603      	mov	r3, r0
 800373a:	b29b      	uxth	r3, r3
 800373c:	4423      	add	r3, r4
 800373e:	b29a      	uxth	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	801a      	strh	r2, [r3, #0]
         break;
 8003744:	e053      	b.n	80037ee <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003746:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <ctlwizchip+0x1c0>)
 8003748:	789a      	ldrb	r2, [r3, #2]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	3301      	adds	r3, #1
 8003752:	4a29      	ldr	r2, [pc, #164]	; (80037f8 <ctlwizchip+0x1c0>)
 8003754:	78d2      	ldrb	r2, [r2, #3]
 8003756:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	3302      	adds	r3, #2
 800375c:	4a26      	ldr	r2, [pc, #152]	; (80037f8 <ctlwizchip+0x1c0>)
 800375e:	7912      	ldrb	r2, [r2, #4]
 8003760:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	3303      	adds	r3, #3
 8003766:	4a24      	ldr	r2, [pc, #144]	; (80037f8 <ctlwizchip+0x1c0>)
 8003768:	7952      	ldrb	r2, [r2, #5]
 800376a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	3304      	adds	r3, #4
 8003770:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <ctlwizchip+0x1c0>)
 8003772:	7992      	ldrb	r2, [r2, #6]
 8003774:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	3305      	adds	r3, #5
 800377a:	4a1f      	ldr	r2, [pc, #124]	; (80037f8 <ctlwizchip+0x1c0>)
 800377c:	79d2      	ldrb	r2, [r2, #7]
 800377e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	3306      	adds	r3, #6
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
         break;
 8003788:	e031      	b.n	80037ee <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800378a:	f000 f9d5 	bl	8003b38 <wizphy_reset>
         break;
 800378e:	e02e      	b.n	80037ee <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003790:	6838      	ldr	r0, [r7, #0]
 8003792:	f000 f9f8 	bl	8003b86 <wizphy_setphyconf>
         break;
 8003796:	e02a      	b.n	80037ee <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003798:	6838      	ldr	r0, [r7, #0]
 800379a:	f000 fa36 	bl	8003c0a <wizphy_getphyconf>
         break;
 800379e:	e026      	b.n	80037ee <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fa99 	bl	8003cdc <wizphy_setphypmode>
 80037aa:	4603      	mov	r3, r0
 80037ac:	e020      	b.n	80037f0 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80037ae:	f000 f9aa 	bl	8003b06 <wizphy_getphypmode>
 80037b2:	4603      	mov	r3, r0
 80037b4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80037b6:	7dfb      	ldrb	r3, [r7, #23]
 80037b8:	2bff      	cmp	r3, #255	; 0xff
 80037ba:	d102      	bne.n	80037c2 <ctlwizchip+0x18a>
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295
 80037c0:	e016      	b.n	80037f0 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	7dfa      	ldrb	r2, [r7, #23]
 80037c6:	701a      	strb	r2, [r3, #0]
         break;
 80037c8:	e011      	b.n	80037ee <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80037ca:	f000 f986 	bl	8003ada <wizphy_getphylink>
 80037ce:	4603      	mov	r3, r0
 80037d0:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	2bff      	cmp	r3, #255	; 0xff
 80037d6:	d102      	bne.n	80037de <ctlwizchip+0x1a6>
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
 80037dc:	e008      	b.n	80037f0 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	7dfa      	ldrb	r2, [r7, #23]
 80037e2:	701a      	strb	r2, [r3, #0]
         break;
 80037e4:	e003      	b.n	80037ee <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 80037e6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ea:	e001      	b.n	80037f0 <ctlwizchip+0x1b8>
         break;
 80037ec:	bf00      	nop
   }
   return 0;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd90      	pop	{r4, r7, pc}
 80037f8:	20000058 	.word	0x20000058

080037fc <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	2206      	movs	r2, #6
 8003806:	4619      	mov	r1, r3
 8003808:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800380c:	f7fe fbb4 	bl	8001f78 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	2204      	movs	r2, #4
 8003816:	4619      	mov	r1, r3
 8003818:	f44f 7080 	mov.w	r0, #256	; 0x100
 800381c:	f7fe fbac 	bl	8001f78 <WIZCHIP_READ_BUF>
 8003820:	f107 0310 	add.w	r3, r7, #16
 8003824:	2204      	movs	r2, #4
 8003826:	4619      	mov	r1, r3
 8003828:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800382c:	f7fe fba4 	bl	8001f78 <WIZCHIP_READ_BUF>
 8003830:	f107 030c 	add.w	r3, r7, #12
 8003834:	2204      	movs	r2, #4
 8003836:	4619      	mov	r1, r3
 8003838:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800383c:	f7fe fb9c 	bl	8001f78 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003840:	2180      	movs	r1, #128	; 0x80
 8003842:	2000      	movs	r0, #0
 8003844:	f7fe fb4a 	bl	8001edc <WIZCHIP_WRITE>
   getMR(); // for delay
 8003848:	2000      	movs	r0, #0
 800384a:	f7fe fafb 	bl	8001e44 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800384e:	1d3b      	adds	r3, r7, #4
 8003850:	2206      	movs	r2, #6
 8003852:	4619      	mov	r1, r3
 8003854:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003858:	f7fe fbee 	bl	8002038 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800385c:	f107 0314 	add.w	r3, r7, #20
 8003860:	2204      	movs	r2, #4
 8003862:	4619      	mov	r1, r3
 8003864:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003868:	f7fe fbe6 	bl	8002038 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800386c:	f107 0310 	add.w	r3, r7, #16
 8003870:	2204      	movs	r2, #4
 8003872:	4619      	mov	r1, r3
 8003874:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003878:	f7fe fbde 	bl	8002038 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800387c:	f107 030c 	add.w	r3, r7, #12
 8003880:	2204      	movs	r2, #4
 8003882:	4619      	mov	r1, r3
 8003884:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003888:	f7fe fbd6 	bl	8002038 <WIZCHIP_WRITE_BUF>
}
 800388c:	bf00      	nop
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80038a2:	f7ff ffab 	bl	80037fc <wizchip_sw_reset>
   if(txsize)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d03b      	beq.n	8003924 <wizchip_init+0x90>
   {
      tmp = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80038b0:	2300      	movs	r3, #0
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	e015      	b.n	80038e2 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80038b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	7bbb      	ldrb	r3, [r7, #14]
 80038c2:	4413      	add	r3, r2
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80038c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	dd02      	ble.n	80038d6 <wizchip_init+0x42>
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295
 80038d4:	e066      	b.n	80039a4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80038d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	3301      	adds	r3, #1
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	73fb      	strb	r3, [r7, #15]
 80038e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e6:	2b07      	cmp	r3, #7
 80038e8:	dde5      	ble.n	80038b6 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e015      	b.n	800391c <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80038f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	3301      	adds	r3, #1
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80038fe:	4618      	mov	r0, r3
 8003900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	4619      	mov	r1, r3
 800390c:	f7fe fae6 	bl	8001edc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	3301      	adds	r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	73fb      	strb	r3, [r7, #15]
 800391c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003920:	2b07      	cmp	r3, #7
 8003922:	dde5      	ble.n	80038f0 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d03b      	beq.n	80039a2 <wizchip_init+0x10e>
   {
      tmp = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]
 8003932:	e015      	b.n	8003960 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	4413      	add	r3, r2
 800393c:	781a      	ldrb	r2, [r3, #0]
 800393e:	7bbb      	ldrb	r3, [r7, #14]
 8003940:	4413      	add	r3, r2
 8003942:	b2db      	uxtb	r3, r3
 8003944:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800394a:	2b10      	cmp	r3, #16
 800394c:	dd02      	ble.n	8003954 <wizchip_init+0xc0>
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	e027      	b.n	80039a4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	3301      	adds	r3, #1
 800395c:	b2db      	uxtb	r3, r3
 800395e:	73fb      	strb	r3, [r7, #15]
 8003960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003964:	2b07      	cmp	r3, #7
 8003966:	dde5      	ble.n	8003934 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003968:	2300      	movs	r3, #0
 800396a:	73fb      	strb	r3, [r7, #15]
 800396c:	e015      	b.n	800399a <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800396e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	3301      	adds	r3, #1
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800397c:	4618      	mov	r0, r3
 800397e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	4413      	add	r3, r2
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	4619      	mov	r1, r3
 800398a:	f7fe faa7 	bl	8001edc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800398e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	3301      	adds	r3, #1
 8003996:	b2db      	uxtb	r3, r3
 8003998:	73fb      	strb	r3, [r7, #15]
 800399a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399e:	2b07      	cmp	r3, #7
 80039a0:	dde5      	ble.n	800396e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	0a1b      	lsrs	r3, r3, #8
 80039be:	b29b      	uxth	r3, r3
 80039c0:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	f023 030f 	bic.w	r3, r3, #15
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	4619      	mov	r1, r3
 80039cc:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80039d0:	f7fe fa84 	bl	8001edc <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	e014      	b.n	8003a04 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80039da:	7bba      	ldrb	r2, [r7, #14]
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	fa42 f303 	asr.w	r3, r2, r3
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <wizchip_clrinterrupt+0x52>
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	3301      	adds	r3, #1
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80039f6:	211f      	movs	r1, #31
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe fa6f 	bl	8001edc <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	3301      	adds	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b07      	cmp	r3, #7
 8003a08:	d9e7      	bls.n	80039da <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003a26:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003a2a:	f7fe fa0b 	bl	8001e44 <WIZCHIP_READ>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f023 030f 	bic.w	r3, r3, #15
 8003a34:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003a36:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003a3a:	f7fe fa03 	bl	8001e44 <WIZCHIP_READ>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003a42:	79bb      	ldrb	r3, [r7, #6]
 8003a44:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003a46:	88bb      	ldrh	r3, [r7, #4]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003a54:	88bb      	ldrh	r3, [r7, #4]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4603      	mov	r3, r0
 8003a66:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	4619      	mov	r1, r3
 8003a78:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003a7c:	f7fe fa2e 	bl	8001edc <WIZCHIP_WRITE>
   setSIMR(simr);
 8003a80:	7bbb      	ldrb	r3, [r7, #14]
 8003a82:	4619      	mov	r1, r3
 8003a84:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003a88:	f7fe fa28 	bl	8001edc <WIZCHIP_WRITE>
#endif   
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003aa6:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003aaa:	f7fe f9cb 	bl	8001e44 <WIZCHIP_READ>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003ab2:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003ab6:	f7fe f9c5 	bl	8001e44 <WIZCHIP_READ>
 8003aba:	4603      	mov	r3, r0
 8003abc:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003abe:	79bb      	ldrb	r3, [r7, #6]
 8003ac0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003ac2:	88bb      	ldrh	r3, [r7, #4]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003ad0:	88bb      	ldrh	r3, [r7, #4]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003ae4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003ae8:	f7fe f9ac 	bl	8001e44 <WIZCHIP_READ>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8003af6:	2301      	movs	r3, #1
 8003af8:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8003b10:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003b14:	f7fe f996 	bl	8001e44 <WIZCHIP_READ>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b1e:	2b30      	cmp	r3, #48	; 0x30
 8003b20:	d102      	bne.n	8003b28 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003b22:	2301      	movs	r3, #1
 8003b24:	71fb      	strb	r3, [r7, #7]
 8003b26:	e001      	b.n	8003b2c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003b3e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003b42:	f7fe f97f 	bl	8001e44 <WIZCHIP_READ>
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b50:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	4619      	mov	r1, r3
 8003b56:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003b5a:	f7fe f9bf 	bl	8001edc <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003b5e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003b62:	f7fe f96f 	bl	8001e44 <WIZCHIP_READ>
 8003b66:	4603      	mov	r3, r0
 8003b68:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b70:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	4619      	mov	r1, r3
 8003b76:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003b7a:	f7fe f9af 	bl	8001edc <WIZCHIP_WRITE>
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d104      	bne.n	8003ba4 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba0:	73fb      	strb	r3, [r7, #15]
 8003ba2:	e003      	b.n	8003bac <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003baa:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	785b      	ldrb	r3, [r3, #1]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d104      	bne.n	8003bbe <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003bba:	73fb      	strb	r3, [r7, #15]
 8003bbc:	e019      	b.n	8003bf2 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	78db      	ldrb	r3, [r3, #3]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d10d      	bne.n	8003be2 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	789b      	ldrb	r3, [r3, #2]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d104      	bne.n	8003bd8 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	f043 0318 	orr.w	r3, r3, #24
 8003bd4:	73fb      	strb	r3, [r7, #15]
 8003bd6:	e00c      	b.n	8003bf2 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	f043 0308 	orr.w	r3, r3, #8
 8003bde:	73fb      	strb	r3, [r7, #15]
 8003be0:	e007      	b.n	8003bf2 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	789b      	ldrb	r3, [r3, #2]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d103      	bne.n	8003bf2 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	f043 0310 	orr.w	r3, r3, #16
 8003bf0:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003bfa:	f7fe f96f 	bl	8001edc <WIZCHIP_WRITE>
   wizphy_reset();
 8003bfe:	f7ff ff9b 	bl	8003b38 <wizphy_reset>
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003c16:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003c1a:	f7fe f913 	bl	8001e44 <WIZCHIP_READ>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	119b      	asrs	r3, r3, #6
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d001      	beq.n	8003c40 <wizphy_getphyconf+0x36>
 8003c3c:	2b38      	cmp	r3, #56	; 0x38
 8003c3e:	d103      	bne.n	8003c48 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	705a      	strb	r2, [r3, #1]
         break;
 8003c46:	e003      	b.n	8003c50 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	705a      	strb	r2, [r3, #1]
         break;
 8003c4e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c56:	3b10      	subs	r3, #16
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	bf8c      	ite	hi
 8003c5c:	2201      	movhi	r2, #1
 8003c5e:	2200      	movls	r2, #0
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	2a00      	cmp	r2, #0
 8003c64:	d111      	bne.n	8003c8a <wizphy_getphyconf+0x80>
 8003c66:	2201      	movs	r2, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8003c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	709a      	strb	r2, [r3, #2]
         break;
 8003c88:	e003      	b.n	8003c92 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	709a      	strb	r2, [r3, #2]
         break;
 8003c90:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c98:	3b08      	subs	r3, #8
 8003c9a:	2b18      	cmp	r3, #24
 8003c9c:	bf8c      	ite	hi
 8003c9e:	2201      	movhi	r2, #1
 8003ca0:	2200      	movls	r2, #0
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	2a00      	cmp	r2, #0
 8003ca6:	d111      	bne.n	8003ccc <wizphy_getphyconf+0xc2>
 8003ca8:	2201      	movs	r2, #1
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8003cb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bf14      	ite	ne
 8003cba:	2301      	movne	r3, #1
 8003cbc:	2300      	moveq	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	70da      	strb	r2, [r3, #3]
         break;
 8003cca:	e003      	b.n	8003cd4 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	70da      	strb	r2, [r3, #3]
         break;
 8003cd2:	bf00      	nop
   }
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003cea:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003cee:	f7fe f8a9 	bl	8001e44 <WIZCHIP_READ>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <wizphy_setphypmode+0x2a>
 8003d00:	f04f 33ff 	mov.w	r3, #4294967295
 8003d04:	e030      	b.n	8003d68 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003d0c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d104      	bne.n	8003d1e <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003d1a:	73fb      	strb	r3, [r7, #15]
 8003d1c:	e003      	b.n	8003d26 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003d24:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003d2e:	f7fe f8d5 	bl	8001edc <WIZCHIP_WRITE>
   wizphy_reset();
 8003d32:	f7ff ff01 	bl	8003b38 <wizphy_reset>
   tmp = getPHYCFGR();
 8003d36:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003d3a:	f7fe f883 	bl	8001e44 <WIZCHIP_READ>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d106      	bne.n	8003d56 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d008      	beq.n	8003d64 <wizphy_setphypmode+0x88>
 8003d52:	2300      	movs	r3, #0
 8003d54:	e008      	b.n	8003d68 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <wizphy_setphypmode+0x88>
 8003d60:	2300      	movs	r3, #0
 8003d62:	e001      	b.n	8003d68 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2206      	movs	r2, #6
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003d82:	f7fe f959 	bl	8002038 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	330e      	adds	r3, #14
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d92:	f7fe f951 	bl	8002038 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	330a      	adds	r3, #10
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003da2:	f7fe f949 	bl	8002038 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3306      	adds	r3, #6
 8003daa:	2204      	movs	r2, #4
 8003dac:	4619      	mov	r1, r3
 8003dae:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003db2:	f7fe f941 	bl	8002038 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	7c9a      	ldrb	r2, [r3, #18]
 8003dba:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <wizchip_setnetinfo+0x78>)
 8003dbc:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	7cda      	ldrb	r2, [r3, #19]
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <wizchip_setnetinfo+0x78>)
 8003dc4:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	7d1a      	ldrb	r2, [r3, #20]
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <wizchip_setnetinfo+0x78>)
 8003dcc:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	7d5a      	ldrb	r2, [r3, #21]
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <wizchip_setnetinfo+0x78>)
 8003dd4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	7d9a      	ldrb	r2, [r3, #22]
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <wizchip_setnetinfo+0x7c>)
 8003ddc:	701a      	strb	r2, [r3, #0]
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	2000259c 	.word	0x2000259c
 8003dec:	200025a0 	.word	0x200025a0

08003df0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2206      	movs	r2, #6
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003e02:	f7fe f8b9 	bl	8001f78 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	330e      	adds	r3, #14
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003e12:	f7fe f8b1 	bl	8001f78 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	330a      	adds	r3, #10
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003e22:	f7fe f8a9 	bl	8001f78 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3306      	adds	r3, #6
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003e32:	f7fe f8a1 	bl	8001f78 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <wizchip_getnetinfo+0x78>)
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <wizchip_getnetinfo+0x78>)
 8003e40:	785a      	ldrb	r2, [r3, #1]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <wizchip_getnetinfo+0x78>)
 8003e48:	789a      	ldrb	r2, [r3, #2]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <wizchip_getnetinfo+0x78>)
 8003e50:	78da      	ldrb	r2, [r3, #3]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <wizchip_getnetinfo+0x7c>)
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	759a      	strb	r2, [r3, #22]
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	2000259c 	.word	0x2000259c
 8003e6c:	200025a0 	.word	0x200025a0

08003e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ea8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e74:	f7fd fbc6 	bl	8001604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e78:	480c      	ldr	r0, [pc, #48]	; (8003eac <LoopForever+0x6>)
  ldr r1, =_edata
 8003e7a:	490d      	ldr	r1, [pc, #52]	; (8003eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e7c:	4a0d      	ldr	r2, [pc, #52]	; (8003eb4 <LoopForever+0xe>)
  movs r3, #0
 8003e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e80:	e002      	b.n	8003e88 <LoopCopyDataInit>

08003e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e86:	3304      	adds	r3, #4

08003e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e8c:	d3f9      	bcc.n	8003e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e8e:	4a0a      	ldr	r2, [pc, #40]	; (8003eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e90:	4c0a      	ldr	r4, [pc, #40]	; (8003ebc <LoopForever+0x16>)
  movs r3, #0
 8003e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e94:	e001      	b.n	8003e9a <LoopFillZerobss>

08003e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e98:	3204      	adds	r2, #4

08003e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e9c:	d3fb      	bcc.n	8003e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e9e:	f009 ffcd 	bl	800de3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ea2:	f7fc fc9b 	bl	80007dc <main>

08003ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ea6:	e7fe      	b.n	8003ea6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ea8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003eb0:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8003eb4:	0800f6a0 	.word	0x0800f6a0
  ldr r2, =_sbss
 8003eb8:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8003ebc:	20002db8 	.word	0x20002db8

08003ec0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ec0:	e7fe      	b.n	8003ec0 <ADC1_IRQHandler>
	...

08003ec4 <_ZN13BusinessLogicC1Ev>:
uint8_t furnaceno;
uint8_t Trigger_Memory_Update,Trigger_Memory_Furnaceno;
uint8_t changeInFrame;


BusinessLogic::BusinessLogic() {
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <_ZN13BusinessLogicC1Ev+0x1c>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	0800f4d8 	.word	0x0800f4d8

08003ee4 <_ZN13BusinessLogicD1Ev>:

BusinessLogic::~BusinessLogic() {
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	4a04      	ldr	r2, [pc, #16]	; (8003f00 <_ZN13BusinessLogicD1Ev+0x1c>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
};
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	0800f4d8 	.word	0x0800f4d8

08003f04 <_ZN13BusinessLogicD0Ev>:
BusinessLogic::~BusinessLogic() {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
};
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ffe9 	bl	8003ee4 <_ZN13BusinessLogicD1Ev>
 8003f12:	2108      	movs	r1, #8
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f009 ff86 	bl	800de26 <_ZdlPvj>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <_ZN13BusinessLogic3runEv>:

void BusinessLogic::run()
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	if(SuccessfulResultRx != 1){return;}
 8003f2c:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <_ZN13BusinessLogic3runEv+0x88>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d137      	bne.n	8003fa4 <_ZN13BusinessLogic3runEv+0x80>
	SuccessfulResultRx=0;
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <_ZN13BusinessLogic3runEv+0x88>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	701a      	strb	r2, [r3, #0]

	track_furnaceno=0;
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <_ZN13BusinessLogic3runEv+0x8c>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	801a      	strh	r2, [r3, #0]

	while(raw_furnace_result[track_furnaceno] != '#')
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <_ZN13BusinessLogic3runEv+0x8c>)
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <_ZN13BusinessLogic3runEv+0x90>)
 8003f48:	5c9b      	ldrb	r3, [r3, r2]
 8003f4a:	2b23      	cmp	r3, #35	; 0x23
 8003f4c:	d006      	beq.n	8003f5c <_ZN13BusinessLogic3runEv+0x38>
	{
		track_furnaceno = track_furnaceno+1;
 8003f4e:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <_ZN13BusinessLogic3runEv+0x8c>)
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <_ZN13BusinessLogic3runEv+0x8c>)
 8003f58:	801a      	strh	r2, [r3, #0]
	while(raw_furnace_result[track_furnaceno] != '#')
 8003f5a:	e7f1      	b.n	8003f40 <_ZN13BusinessLogic3runEv+0x1c>
	}
	furnaceno = raw_furnace_result[track_furnaceno-1]-48;
 8003f5c:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <_ZN13BusinessLogic3runEv+0x8c>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	4a14      	ldr	r2, [pc, #80]	; (8003fb4 <_ZN13BusinessLogic3runEv+0x90>)
 8003f64:	5cd3      	ldrb	r3, [r2, r3]
 8003f66:	3b30      	subs	r3, #48	; 0x30
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <_ZN13BusinessLogic3runEv+0x94>)
 8003f6c:	701a      	strb	r2, [r3, #0]

//	changeInFrame = memcmp(&SpectrumResult_furnace[furnaceno-1].result_spectrum[0],raw_furnace_result,418);
	memcpy(&SpectrumResult_furnace[furnaceno-1].result_spectrum[0],raw_furnace_result,500);
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <_ZN13BusinessLogic3runEv+0x94>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f78:	fb02 f303 	mul.w	r3, r2, r3
 8003f7c:	4a0f      	ldr	r2, [pc, #60]	; (8003fbc <_ZN13BusinessLogic3runEv+0x98>)
 8003f7e:	4413      	add	r3, r2
 8003f80:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <_ZN13BusinessLogic3runEv+0x90>)
 8003f82:	4618      	mov	r0, r3
 8003f84:	4611      	mov	r1, r2
 8003f86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f009 ff8a 	bl	800dea4 <memcpy>
	Trigger_Memory_Update = 1;
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <_ZN13BusinessLogic3runEv+0x9c>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
	Trigger_Memory_Furnaceno = furnaceno-1;
 8003f96:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <_ZN13BusinessLogic3runEv+0x94>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <_ZN13BusinessLogic3runEv+0xa0>)
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e000      	b.n	8003fa6 <_ZN13BusinessLogic3runEv+0x82>
	if(SuccessfulResultRx != 1){return;}
 8003fa4:	bf00      	nop

}
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20000543 	.word	0x20000543
 8003fb0:	200025a2 	.word	0x200025a2
 8003fb4:	2000034c 	.word	0x2000034c
 8003fb8:	20002d74 	.word	0x20002d74
 8003fbc:	200025a4 	.word	0x200025a4
 8003fc0:	20002d75 	.word	0x20002d75
 8003fc4:	20002d76 	.word	0x20002d76

08003fc8 <_ZN6commonC1Ev>:
 *      Author: MKS
 */

#include "common.h"

common::common() {
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <_ZN6commonC1Ev+0x1c>)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	0800f4e8 	.word	0x0800f4e8

08003fe8 <_ZN6commonD1Ev>:

common::~common() {
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	4a04      	ldr	r2, [pc, #16]	; (8004004 <_ZN6commonD1Ev+0x1c>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	0800f4e8 	.word	0x0800f4e8

08004008 <_ZN6commonD0Ev>:
common::~common() {
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
}
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ffe9 	bl	8003fe8 <_ZN6commonD1Ev>
 8004016:	2104      	movs	r1, #4
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f009 ff04 	bl	800de26 <_ZdlPvj>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <_ZN14DisplayRoutineC1Ev>:
extern uint8_t wifi_command;
extern uint8_t hour_t,min_t,sec_t;
extern uint8_t Wdate_Rtc,date_Rtc,month_Rtc,year_Rtc;
extern uint16_t SectorPos;

DisplayRoutine::DisplayRoutine() {
 8004028:	b5b0      	push	{r4, r5, r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	4a26      	ldr	r2, [pc, #152]	; (80040cc <_ZN14DisplayRoutineC1Ev+0xa4>)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3304      	adds	r3, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fa28 	bl	8004490 <_ZN4GLCDC1Ev>
 8004040:	687d      	ldr	r5, [r7, #4]
 8004042:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <_ZN14DisplayRoutineC1Ev+0xa8>)
 8004044:	f605 2408 	addw	r4, r5, #2568	; 0xa08
 8004048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800404a:	c407      	stmia	r4!, {r0, r1, r2}
 800404c:	8023      	strh	r3, [r4, #0]
 800404e:	2300      	movs	r3, #0
 8004050:	f885 3a16 	strb.w	r3, [r5, #2582]	; 0xa16
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <_ZN14DisplayRoutineC1Ev+0xac>)
 8004058:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 800405c:	8812      	ldrh	r2, [r2, #0]
 800405e:	801a      	strh	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	491d      	ldr	r1, [pc, #116]	; (80040d8 <_ZN14DisplayRoutineC1Ev+0xb0>)
 8004064:	f603 2219 	addw	r2, r3, #2585	; 0xa19
 8004068:	8808      	ldrh	r0, [r1, #0]
 800406a:	7889      	ldrb	r1, [r1, #2]
 800406c:	8010      	strh	r0, [r2, #0]
 800406e:	7091      	strb	r1, [r2, #2]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2a1c 	strb.w	r2, [r3, #2588]	; 0xa1c
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a18      	ldr	r2, [pc, #96]	; (80040dc <_ZN14DisplayRoutineC1Ev+0xb4>)
 800407a:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 800407e:	8812      	ldrh	r2, [r2, #0]
 8004080:	801a      	strh	r2, [r3, #0]
 8004082:	687d      	ldr	r5, [r7, #4]
 8004084:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <_ZN14DisplayRoutineC1Ev+0xb8>)
 8004086:	f605 241f 	addw	r4, r5, #2591	; 0xa1f
 800408a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800408c:	6020      	str	r0, [r4, #0]
 800408e:	6061      	str	r1, [r4, #4]
 8004090:	60a2      	str	r2, [r4, #8]
 8004092:	2300      	movs	r3, #0
 8004094:	f885 3a2b 	strb.w	r3, [r5, #2603]	; 0xa2b
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <_ZN14DisplayRoutineC1Ev+0xbc>)
 800409c:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 80040a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80040a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2a38 	strb.w	r2, [r3, #2616]	; 0xa38
 80040ac:	687d      	ldr	r5, [r7, #4]
 80040ae:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <_ZN14DisplayRoutineC1Ev+0xc0>)
 80040b0:	f605 2439 	addw	r4, r5, #2617	; 0xa39
 80040b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80040b6:	6020      	str	r0, [r4, #0]
 80040b8:	6061      	str	r1, [r4, #4]
 80040ba:	60a2      	str	r2, [r4, #8]
 80040bc:	2300      	movs	r3, #0
 80040be:	f885 3a45 	strb.w	r3, [r5, #2629]	; 0xa45
	// TODO Auto-generated constructor stub

}
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bdb0      	pop	{r4, r5, r7, pc}
 80040cc:	0800f4f8 	.word	0x0800f4f8
 80040d0:	0800f42c 	.word	0x0800f42c
 80040d4:	0800f43c 	.word	0x0800f43c
 80040d8:	0800f440 	.word	0x0800f440
 80040dc:	0800f444 	.word	0x0800f444
 80040e0:	0800f448 	.word	0x0800f448
 80040e4:	0800f458 	.word	0x0800f458
 80040e8:	0800f468 	.word	0x0800f468

080040ec <_ZN14DisplayRoutineD1Ev>:

DisplayRoutine::~DisplayRoutine() {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	4a06      	ldr	r2, [pc, #24]	; (8004110 <_ZN14DisplayRoutineD1Ev+0x24>)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3304      	adds	r3, #4
 80040fe:	4618      	mov	r0, r3
 8004100:	f004 f942 	bl	8008388 <_ZN4GLCDD1Ev>
	// TODO Auto-generated destructor stub
}
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	0800f4f8 	.word	0x0800f4f8

08004114 <_ZN14DisplayRoutineD0Ev>:
DisplayRoutine::~DisplayRoutine() {
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
}
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ffe5 	bl	80040ec <_ZN14DisplayRoutineD1Ev>
 8004122:	f640 214c 	movw	r1, #2636	; 0xa4c
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f009 fe7d 	bl	800de26 <_ZdlPvj>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <_ZN14DisplayRoutine3runEv>:

void DisplayRoutine::run()
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	//m_gLCDDrive.m_clrlcd();/*  Try in local if not need comment out*/
	m_gLCDDrive.m_lcdputs1(0,1,Lpdc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	1d18      	adds	r0, r3, #4
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 800414a:	2201      	movs	r2, #1
 800414c:	2100      	movs	r1, #0
 800414e:	f004 fbdb 	bl	8008908 <_ZN4GLCD10m_lcdputs1EhhPh>
	value2Digit(hour_t,2,0);
 8004152:	4b50      	ldr	r3, [pc, #320]	; (8004294 <_ZN14DisplayRoutine3runEv+0x15c>)
 8004154:	7819      	ldrb	r1, [r3, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	2202      	movs	r2, #2
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f8aa 	bl	80042b4 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(15,2,colon);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1d18      	adds	r0, r3, #4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 800416a:	2202      	movs	r2, #2
 800416c:	210f      	movs	r1, #15
 800416e:	f004 fbcb 	bl	8008908 <_ZN4GLCD10m_lcdputs1EhhPh>
	value2Digit(min_t,2,20);
 8004172:	4b49      	ldr	r3, [pc, #292]	; (8004298 <_ZN14DisplayRoutine3runEv+0x160>)
 8004174:	7819      	ldrb	r1, [r3, #0]
 8004176:	2314      	movs	r3, #20
 8004178:	2202      	movs	r2, #2
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f89a 	bl	80042b4 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(35,2,colon);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	1d18      	adds	r0, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 800418a:	2202      	movs	r2, #2
 800418c:	2123      	movs	r1, #35	; 0x23
 800418e:	f004 fbbb 	bl	8008908 <_ZN4GLCD10m_lcdputs1EhhPh>
	value2Digit(sec_t,2,40);
 8004192:	4b42      	ldr	r3, [pc, #264]	; (800429c <_ZN14DisplayRoutine3runEv+0x164>)
 8004194:	7819      	ldrb	r1, [r3, #0]
 8004196:	2328      	movs	r3, #40	; 0x28
 8004198:	2202      	movs	r2, #2
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f88a 	bl	80042b4 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(54,2,space);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	1d18      	adds	r0, r3, #4
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f603 2319 	addw	r3, r3, #2585	; 0xa19
 80041aa:	2202      	movs	r2, #2
 80041ac:	2136      	movs	r1, #54	; 0x36
 80041ae:	f004 fbab 	bl	8008908 <_ZN4GLCD10m_lcdputs1EhhPh>
	value2Digit(date_Rtc,2,65);
 80041b2:	4b3b      	ldr	r3, [pc, #236]	; (80042a0 <_ZN14DisplayRoutine3runEv+0x168>)
 80041b4:	7819      	ldrb	r1, [r3, #0]
 80041b6:	2341      	movs	r3, #65	; 0x41
 80041b8:	2202      	movs	r2, #2
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f87a 	bl	80042b4 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(81,2,backslash);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	1d18      	adds	r0, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 80041ca:	2202      	movs	r2, #2
 80041cc:	2151      	movs	r1, #81	; 0x51
 80041ce:	f004 fb9b 	bl	8008908 <_ZN4GLCD10m_lcdputs1EhhPh>
	value2Digit(month_Rtc,2,86);
 80041d2:	4b34      	ldr	r3, [pc, #208]	; (80042a4 <_ZN14DisplayRoutine3runEv+0x16c>)
 80041d4:	7819      	ldrb	r1, [r3, #0]
 80041d6:	2356      	movs	r3, #86	; 0x56
 80041d8:	2202      	movs	r2, #2
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f86a 	bl	80042b4 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(103,2,backslash);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	1d18      	adds	r0, r3, #4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
 80041ea:	2202      	movs	r2, #2
 80041ec:	2167      	movs	r1, #103	; 0x67
 80041ee:	f004 fb8b 	bl	8008908 <_ZN4GLCD10m_lcdputs1EhhPh>
	value2Digit(year_Rtc,2,110);
 80041f2:	4b2d      	ldr	r3, [pc, #180]	; (80042a8 <_ZN14DisplayRoutine3runEv+0x170>)
 80041f4:	7819      	ldrb	r1, [r3, #0]
 80041f6:	236e      	movs	r3, #110	; 0x6e
 80041f8:	2202      	movs	r2, #2
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f85a 	bl	80042b4 <_ZN14DisplayRoutine11value2DigitEhhh>
	m_gLCDDrive.m_lcdputs1(0,3,production);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	1d18      	adds	r0, r3, #4
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f603 231f 	addw	r3, r3, #2591	; 0xa1f
 800420a:	2203      	movs	r2, #3
 800420c:	2100      	movs	r1, #0
 800420e:	f004 fb7b 	bl	8008908 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(0,3,85);
 8004212:	2355      	movs	r3, #85	; 0x55
 8004214:	2203      	movs	r2, #3
 8004216:	2100      	movs	r1, #0
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f88d 	bl	8004338 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(0,4,rejection);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	1d18      	adds	r0, r3, #4
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8004228:	2204      	movs	r2, #4
 800422a:	2100      	movs	r1, #0
 800422c:	f004 fb6c 	bl	8008908 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(0,4,85);
 8004230:	2355      	movs	r3, #85	; 0x55
 8004232:	2204      	movs	r2, #4
 8004234:	2100      	movs	r1, #0
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f87e 	bl	8004338 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(0,5,Mrejection);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	1d18      	adds	r0, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f603 2339 	addw	r3, r3, #2617	; 0xa39
 8004246:	2205      	movs	r2, #5
 8004248:	2100      	movs	r1, #0
 800424a:	f004 fb5d 	bl	8008908 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(0,5,85);
 800424e:	2355      	movs	r3, #85	; 0x55
 8004250:	2205      	movs	r2, #5
 8004252:	2100      	movs	r1, #0
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f86f 	bl	8004338 <_ZN14DisplayRoutine11value4DigitEthh>
	value4Digit(wifi_command,6,0);
 800425a:	4b14      	ldr	r3, [pc, #80]	; (80042ac <_ZN14DisplayRoutine3runEv+0x174>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	b299      	uxth	r1, r3
 8004260:	2300      	movs	r3, #0
 8004262:	2206      	movs	r2, #6
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f867 	bl	8004338 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(40,6,space);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	1d18      	adds	r0, r3, #4
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f603 2319 	addw	r3, r3, #2585	; 0xa19
 8004274:	2206      	movs	r2, #6
 8004276:	2128      	movs	r1, #40	; 0x28
 8004278:	f004 fb46 	bl	8008908 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(SectorPos,6,80);
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <_ZN14DisplayRoutine3runEv+0x178>)
 800427e:	8819      	ldrh	r1, [r3, #0]
 8004280:	2350      	movs	r3, #80	; 0x50
 8004282:	2206      	movs	r2, #6
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f857 	bl	8004338 <_ZN14DisplayRoutine11value4DigitEthh>

}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20002d9c 	.word	0x20002d9c
 8004298:	20002d9d 	.word	0x20002d9d
 800429c:	20002d9e 	.word	0x20002d9e
 80042a0:	20002d9f 	.word	0x20002d9f
 80042a4:	20002da0 	.word	0x20002da0
 80042a8:	20002da1 	.word	0x20002da1
 80042ac:	20002da2 	.word	0x20002da2
 80042b0:	20002d9a 	.word	0x20002d9a

080042b4 <_ZN14DisplayRoutine11value2DigitEhhh>:

void DisplayRoutine::value2Digit(uint8_t value,uint8_t posLine,uint8_t posCol)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	4608      	mov	r0, r1
 80042be:	4611      	mov	r1, r2
 80042c0:	461a      	mov	r2, r3
 80042c2:	4603      	mov	r3, r0
 80042c4:	70fb      	strb	r3, [r7, #3]
 80042c6:	460b      	mov	r3, r1
 80042c8:	70bb      	strb	r3, [r7, #2]
 80042ca:	4613      	mov	r3, r2
 80042cc:	707b      	strb	r3, [r7, #1]
	GLCDNumericArray[0] =(unsigned char)(((value%100)/10)+0x30);
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	4a17      	ldr	r2, [pc, #92]	; (8004330 <_ZN14DisplayRoutine11value2DigitEhhh+0x7c>)
 80042d2:	fba2 1203 	umull	r1, r2, r2, r3
 80042d6:	0952      	lsrs	r2, r2, #5
 80042d8:	2164      	movs	r1, #100	; 0x64
 80042da:	fb01 f202 	mul.w	r2, r1, r2
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	4a14      	ldr	r2, [pc, #80]	; (8004334 <_ZN14DisplayRoutine11value2DigitEhhh+0x80>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	08db      	lsrs	r3, r3, #3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	3330      	adds	r3, #48	; 0x30
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f883 2a46 	strb.w	r2, [r3, #2630]	; 0xa46
    GLCDNumericArray[1] =(unsigned char)((value%10)+0x30);
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <_ZN14DisplayRoutine11value2DigitEhhh+0x80>)
 80042fa:	fba3 1302 	umull	r1, r3, r3, r2
 80042fe:	08d9      	lsrs	r1, r3, #3
 8004300:	460b      	mov	r3, r1
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3330      	adds	r3, #48	; 0x30
 800430e:	b2da      	uxtb	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f883 2a47 	strb.w	r2, [r3, #2631]	; 0xa47
	m_gLCDDrive.m_lcdputs1(posCol,posLine,GLCDNumericArray);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	1d18      	adds	r0, r3, #4
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f603 2346 	addw	r3, r3, #2630	; 0xa46
 8004320:	78ba      	ldrb	r2, [r7, #2]
 8004322:	7879      	ldrb	r1, [r7, #1]
 8004324:	f004 faf0 	bl	8008908 <_ZN4GLCD10m_lcdputs1EhhPh>
}
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	51eb851f 	.word	0x51eb851f
 8004334:	cccccccd 	.word	0xcccccccd

08004338 <_ZN14DisplayRoutine11value4DigitEthh>:
void DisplayRoutine::value4Digit(uint16_t value4dig,uint8_t posLine,uint8_t posCol)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	4608      	mov	r0, r1
 8004342:	4611      	mov	r1, r2
 8004344:	461a      	mov	r2, r3
 8004346:	4603      	mov	r3, r0
 8004348:	807b      	strh	r3, [r7, #2]
 800434a:	460b      	mov	r3, r1
 800434c:	707b      	strb	r3, [r7, #1]
 800434e:	4613      	mov	r3, r2
 8004350:	703b      	strb	r3, [r7, #0]
	gLCDNumericArraySize_4[0] =(unsigned char)(((value4dig%10000)/1000)+0x30);
 8004352:	887b      	ldrh	r3, [r7, #2]
 8004354:	4a2e      	ldr	r2, [pc, #184]	; (8004410 <_ZN14DisplayRoutine11value4DigitEthh+0xd8>)
 8004356:	fba2 1203 	umull	r1, r2, r2, r3
 800435a:	0b52      	lsrs	r2, r2, #13
 800435c:	f242 7110 	movw	r1, #10000	; 0x2710
 8004360:	fb01 f202 	mul.w	r2, r1, r2
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	b29b      	uxth	r3, r3
 8004368:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	099b      	lsrs	r3, r3, #6
 8004370:	b29b      	uxth	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	3330      	adds	r3, #48	; 0x30
 8004376:	b2da      	uxtb	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f883 2a48 	strb.w	r2, [r3, #2632]	; 0xa48
	gLCDNumericArraySize_4[1] =(unsigned char)((value4dig%1000)/100+0x30);
 800437e:	887b      	ldrh	r3, [r7, #2]
 8004380:	4a24      	ldr	r2, [pc, #144]	; (8004414 <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 8004382:	fba2 1203 	umull	r1, r2, r2, r3
 8004386:	0992      	lsrs	r2, r2, #6
 8004388:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800438c:	fb01 f202 	mul.w	r2, r1, r2
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	b29b      	uxth	r3, r3
 8004394:	4a20      	ldr	r2, [pc, #128]	; (8004418 <_ZN14DisplayRoutine11value4DigitEthh+0xe0>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	b29b      	uxth	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	3330      	adds	r3, #48	; 0x30
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f883 2a49 	strb.w	r2, [r3, #2633]	; 0xa49
	gLCDNumericArraySize_4[2] =(unsigned char)(((value4dig%100)/10)+0x30);
 80043aa:	887b      	ldrh	r3, [r7, #2]
 80043ac:	4a1a      	ldr	r2, [pc, #104]	; (8004418 <_ZN14DisplayRoutine11value4DigitEthh+0xe0>)
 80043ae:	fba2 1203 	umull	r1, r2, r2, r3
 80043b2:	0952      	lsrs	r2, r2, #5
 80043b4:	2164      	movs	r1, #100	; 0x64
 80043b6:	fb01 f202 	mul.w	r2, r1, r2
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	b29b      	uxth	r3, r3
 80043be:	4a17      	ldr	r2, [pc, #92]	; (800441c <_ZN14DisplayRoutine11value4DigitEthh+0xe4>)
 80043c0:	fba2 2303 	umull	r2, r3, r2, r3
 80043c4:	08db      	lsrs	r3, r3, #3
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	3330      	adds	r3, #48	; 0x30
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f883 2a4a 	strb.w	r2, [r3, #2634]	; 0xa4a
	gLCDNumericArraySize_4[3] =(unsigned char)((value4dig%10)+0x30);
 80043d4:	887a      	ldrh	r2, [r7, #2]
 80043d6:	4b11      	ldr	r3, [pc, #68]	; (800441c <_ZN14DisplayRoutine11value4DigitEthh+0xe4>)
 80043d8:	fba3 1302 	umull	r1, r3, r3, r2
 80043dc:	08d9      	lsrs	r1, r3, #3
 80043de:	460b      	mov	r3, r1
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	3330      	adds	r3, #48	; 0x30
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f883 2a4b 	strb.w	r2, [r3, #2635]	; 0xa4b
	m_gLCDDrive.m_lcdputs1(posCol,posLine,gLCDNumericArraySize_4);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	1d18      	adds	r0, r3, #4
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f603 2348 	addw	r3, r3, #2632	; 0xa48
 8004400:	787a      	ldrb	r2, [r7, #1]
 8004402:	7839      	ldrb	r1, [r7, #0]
 8004404:	f004 fa80 	bl	8008908 <_ZN4GLCD10m_lcdputs1EhhPh>
}
 8004408:	bf00      	nop
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	d1b71759 	.word	0xd1b71759
 8004414:	10624dd3 	.word	0x10624dd3
 8004418:	51eb851f 	.word	0x51eb851f
 800441c:	cccccccd 	.word	0xcccccccd

08004420 <_ZN14DisplayRoutine4InitEv>:

void DisplayRoutine::Init()
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	m_gLCDDrive.m_displayon();
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3304      	adds	r3, #4
 800442c:	4618      	mov	r0, r3
 800442e:	f004 f88d 	bl	800854c <_ZN4GLCD11m_displayonEv>
	m_gLCDDrive.m_setstartline(0);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3304      	adds	r3, #4
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f004 f989 	bl	8008750 <_ZN4GLCD14m_setstartlineEh>
	m_gLCDDrive.m_clrlcd();
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3304      	adds	r3, #4
 8004442:	4618      	mov	r0, r3
 8004444:	f004 fa95 	bl	8008972 <_ZN4GLCD8m_clrlcdEv>


}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <_ZN6common26ReadtheValueAssignPinstateEhh>:

class common {
public:
	common();
	virtual ~common();
	GPIO_PinState ReadtheValueAssignPinstate(uint8_t position, uint8_t value)
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
 800445c:	4613      	mov	r3, r2
 800445e:	70bb      	strb	r3, [r7, #2]
	{
		GPIO_PinState pinstate;
		position = 1 << position;
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	2201      	movs	r2, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	70fb      	strb	r3, [r7, #3]
		if(position & value){
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	78bb      	ldrb	r3, [r7, #2]
 800446e:	4013      	ands	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <_ZN6common26ReadtheValueAssignPinstateEhh+0x2c>
			pinstate = GPIO_PIN_SET;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
 800447a:	e001      	b.n	8004480 <_ZN6common26ReadtheValueAssignPinstateEhh+0x30>
		}
		else
		{
			pinstate = GPIO_PIN_RESET;
 800447c:	2300      	movs	r3, #0
 800447e:	73fb      	strb	r3, [r7, #15]
		}
		return(pinstate);
 8004480:	7bfb      	ldrb	r3, [r7, #15]
	}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <_ZN4GLCDC1Ev>:

#include "GLCD.h"
#include "main.h"
#define GLCDDELAY 10
extern TIM_HandleTypeDef htim1;
GLCD::GLCD() {
 8004490:	b5b0      	push	{r4, r5, r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fd94 	bl	8003fc8 <_ZN6commonC1Ev>
 80044a0:	4ac8      	ldr	r2, [pc, #800]	; (80047c4 <_ZN4GLCDC1Ev+0x334>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	687d      	ldr	r5, [r7, #4]
 80044a8:	4bc7      	ldr	r3, [pc, #796]	; (80047c8 <_ZN4GLCDC1Ev+0x338>)
 80044aa:	1d2c      	adds	r4, r5, #4
 80044ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044ae:	c407      	stmia	r4!, {r0, r1, r2}
 80044b0:	8023      	strh	r3, [r4, #0]
 80044b2:	2300      	movs	r3, #0
 80044b4:	74ab      	strb	r3, [r5, #18]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	615a      	str	r2, [r3, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	619a      	str	r2, [r3, #24]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	775a      	strb	r2, [r3, #29]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	331e      	adds	r3, #30
 80044cc:	f640 0208 	movw	r2, #2056	; 0x808
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f009 fcf4 	bl	800dec0 <memset>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	227e      	movs	r2, #126	; 0x7e
 80044dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2281      	movs	r2, #129	; 0x81
 80044e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2295      	movs	r2, #149	; 0x95
 80044ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	22b1      	movs	r2, #177	; 0xb1
 80044f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	22b1      	movs	r2, #177	; 0xb1
 80044fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2295      	movs	r2, #149	; 0x95
 8004504:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2281      	movs	r2, #129	; 0x81
 800450c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	227e      	movs	r2, #126	; 0x7e
 8004514:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	227e      	movs	r2, #126	; 0x7e
 800451c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	22ff      	movs	r2, #255	; 0xff
 8004524:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	22eb      	movs	r2, #235	; 0xeb
 800452c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	22cf      	movs	r2, #207	; 0xcf
 8004534:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	22cf      	movs	r2, #207	; 0xcf
 800453c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	22eb      	movs	r2, #235	; 0xeb
 8004544:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	22ff      	movs	r2, #255	; 0xff
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	227e      	movs	r2, #126	; 0x7e
 8004554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	220e      	movs	r2, #14
 800455c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	221f      	movs	r2, #31
 8004564:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	223f      	movs	r2, #63	; 0x3f
 800456c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	227e      	movs	r2, #126	; 0x7e
 8004574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	223f      	movs	r2, #63	; 0x3f
 800457c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	221f      	movs	r2, #31
 8004584:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	220e      	movs	r2, #14
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2208      	movs	r2, #8
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	221c      	movs	r2, #28
 800459c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	223e      	movs	r2, #62	; 0x3e
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	227f      	movs	r2, #127	; 0x7f
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	223e      	movs	r2, #62	; 0x3e
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	221c      	movs	r2, #28
 80045bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2208      	movs	r2, #8
 80045c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2218      	movs	r2, #24
 80045cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	22ba      	movs	r2, #186	; 0xba
 80045d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	22ff      	movs	r2, #255	; 0xff
 80045dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	22ff      	movs	r2, #255	; 0xff
 80045e4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	22ff      	movs	r2, #255	; 0xff
 80045ec:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	22ba      	movs	r2, #186	; 0xba
 80045f4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2218      	movs	r2, #24
 80045fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2210      	movs	r2, #16
 8004604:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	22b8      	movs	r2, #184	; 0xb8
 800460c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	22fc      	movs	r2, #252	; 0xfc
 8004614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	22ff      	movs	r2, #255	; 0xff
 800461c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	22fc      	movs	r2, #252	; 0xfc
 8004624:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	22b8      	movs	r2, #184	; 0xb8
 800462c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2210      	movs	r2, #16
 8004634:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2218      	movs	r2, #24
 800463c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	223c      	movs	r2, #60	; 0x3c
 8004644:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	223c      	movs	r2, #60	; 0x3c
 800464c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2218      	movs	r2, #24
 8004654:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	22ff      	movs	r2, #255	; 0xff
 800465c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	22ff      	movs	r2, #255	; 0xff
 8004664:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	22e7      	movs	r2, #231	; 0xe7
 800466c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	22c3      	movs	r2, #195	; 0xc3
 8004674:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	22c3      	movs	r2, #195	; 0xc3
 800467c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	22e7      	movs	r2, #231	; 0xe7
 8004684:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	22ff      	movs	r2, #255	; 0xff
 800468c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	22ff      	movs	r2, #255	; 0xff
 8004694:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	223c      	movs	r2, #60	; 0x3c
 800469c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2266      	movs	r2, #102	; 0x66
 80046a4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2242      	movs	r2, #66	; 0x42
 80046ac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2242      	movs	r2, #66	; 0x42
 80046b4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2266      	movs	r2, #102	; 0x66
 80046bc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	223c      	movs	r2, #60	; 0x3c
 80046c4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	22ff      	movs	r2, #255	; 0xff
 80046cc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	22c3      	movs	r2, #195	; 0xc3
 80046d4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2299      	movs	r2, #153	; 0x99
 80046dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	22bd      	movs	r2, #189	; 0xbd
 80046e4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	22bd      	movs	r2, #189	; 0xbd
 80046ec:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2299      	movs	r2, #153	; 0x99
 80046f4:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	22c3      	movs	r2, #195	; 0xc3
 80046fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	22ff      	movs	r2, #255	; 0xff
 8004704:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2270      	movs	r2, #112	; 0x70
 800470c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	22f8      	movs	r2, #248	; 0xf8
 8004714:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2288      	movs	r2, #136	; 0x88
 800471c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2288      	movs	r2, #136	; 0x88
 8004724:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	22fd      	movs	r2, #253	; 0xfd
 800472c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	227f      	movs	r2, #127	; 0x7f
 8004734:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2207      	movs	r2, #7
 800473c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	220f      	movs	r2, #15
 8004744:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	224e      	movs	r2, #78	; 0x4e
 800474c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	225f      	movs	r2, #95	; 0x5f
 8004754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	22f1      	movs	r2, #241	; 0xf1
 800475c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	22f1      	movs	r2, #241	; 0xf1
 8004764:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	225f      	movs	r2, #95	; 0x5f
 800476c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	224e      	movs	r2, #78	; 0x4e
 8004774:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	22c0      	movs	r2, #192	; 0xc0
 800477c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	22e0      	movs	r2, #224	; 0xe0
 8004784:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	22ff      	movs	r2, #255	; 0xff
 800478c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	227f      	movs	r2, #127	; 0x7f
 8004794:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2205      	movs	r2, #5
 800479c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2205      	movs	r2, #5
 80047a4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2207      	movs	r2, #7
 80047ac:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2207      	movs	r2, #7
 80047b4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	22c0      	movs	r2, #192	; 0xc0
 80047bc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 80047c0:	e004      	b.n	80047cc <_ZN4GLCDC1Ev+0x33c>
 80047c2:	bf00      	nop
 80047c4:	0800f508 	.word	0x0800f508
 80047c8:	0800f478 	.word	0x0800f478
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	22ff      	movs	r2, #255	; 0xff
 80047d0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	227f      	movs	r2, #127	; 0x7f
 80047d8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2205      	movs	r2, #5
 80047e0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2205      	movs	r2, #5
 80047e8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2265      	movs	r2, #101	; 0x65
 80047f0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	227f      	movs	r2, #127	; 0x7f
 80047f8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	223f      	movs	r2, #63	; 0x3f
 8004800:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2299      	movs	r2, #153	; 0x99
 8004808:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	225a      	movs	r2, #90	; 0x5a
 8004810:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	223c      	movs	r2, #60	; 0x3c
 8004818:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	22e7      	movs	r2, #231	; 0xe7
 8004820:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	22e7      	movs	r2, #231	; 0xe7
 8004828:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	223c      	movs	r2, #60	; 0x3c
 8004830:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	225a      	movs	r2, #90	; 0x5a
 8004838:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2299      	movs	r2, #153	; 0x99
 8004840:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	227f      	movs	r2, #127	; 0x7f
 8004848:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	223e      	movs	r2, #62	; 0x3e
 8004850:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	223e      	movs	r2, #62	; 0x3e
 8004858:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	221c      	movs	r2, #28
 8004860:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	221c      	movs	r2, #28
 8004868:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2208      	movs	r2, #8
 8004870:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2208      	movs	r2, #8
 8004878:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2208      	movs	r2, #8
 8004880:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2208      	movs	r2, #8
 8004888:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	221c      	movs	r2, #28
 8004890:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	221c      	movs	r2, #28
 8004898:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	223e      	movs	r2, #62	; 0x3e
 80048a0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	223e      	movs	r2, #62	; 0x3e
 80048a8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	227f      	movs	r2, #127	; 0x7f
 80048b0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2224      	movs	r2, #36	; 0x24
 80048b8:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2266      	movs	r2, #102	; 0x66
 80048c0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	22ff      	movs	r2, #255	; 0xff
 80048c8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	22ff      	movs	r2, #255	; 0xff
 80048d0:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2266      	movs	r2, #102	; 0x66
 80048d8:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2224      	movs	r2, #36	; 0x24
 80048e0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	225f      	movs	r2, #95	; 0x5f
 80048e8:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	225f      	movs	r2, #95	; 0x5f
 80048f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	225f      	movs	r2, #95	; 0x5f
 80048f8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	225f      	movs	r2, #95	; 0x5f
 8004900:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2206      	movs	r2, #6
 8004908:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	220f      	movs	r2, #15
 8004910:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2209      	movs	r2, #9
 8004918:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	227f      	movs	r2, #127	; 0x7f
 8004920:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	227f      	movs	r2, #127	; 0x7f
 8004928:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	227f      	movs	r2, #127	; 0x7f
 8004938:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	227f      	movs	r2, #127	; 0x7f
 8004940:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2240      	movs	r2, #64	; 0x40
 8004948:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	22da      	movs	r2, #218	; 0xda
 8004950:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	22bf      	movs	r2, #191	; 0xbf
 8004958:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	22a5      	movs	r2, #165	; 0xa5
 8004960:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	22fd      	movs	r2, #253	; 0xfd
 8004968:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2259      	movs	r2, #89	; 0x59
 8004970:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2203      	movs	r2, #3
 8004978:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2270      	movs	r2, #112	; 0x70
 8004988:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2270      	movs	r2, #112	; 0x70
 8004990:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2270      	movs	r2, #112	; 0x70
 8004998:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2270      	movs	r2, #112	; 0x70
 80049a0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2270      	movs	r2, #112	; 0x70
 80049a8:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2270      	movs	r2, #112	; 0x70
 80049b0:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2280      	movs	r2, #128	; 0x80
 80049b8:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2294      	movs	r2, #148	; 0x94
 80049c0:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	22b6      	movs	r2, #182	; 0xb6
 80049c8:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	22ff      	movs	r2, #255	; 0xff
 80049d0:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	22ff      	movs	r2, #255	; 0xff
 80049d8:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	22b6      	movs	r2, #182	; 0xb6
 80049e0:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2294      	movs	r2, #148	; 0x94
 80049e8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2280      	movs	r2, #128	; 0x80
 80049f0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2204      	movs	r2, #4
 80049f8:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2206      	movs	r2, #6
 8004a00:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	227f      	movs	r2, #127	; 0x7f
 8004a08:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	227f      	movs	r2, #127	; 0x7f
 8004a10:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2206      	movs	r2, #6
 8004a18:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2204      	movs	r2, #4
 8004a20:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2210      	movs	r2, #16
 8004a28:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2230      	movs	r2, #48	; 0x30
 8004a30:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	227f      	movs	r2, #127	; 0x7f
 8004a38:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	227f      	movs	r2, #127	; 0x7f
 8004a40:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2230      	movs	r2, #48	; 0x30
 8004a48:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2210      	movs	r2, #16
 8004a50:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2208      	movs	r2, #8
 8004a58:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2208      	movs	r2, #8
 8004a60:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2208      	movs	r2, #8
 8004a68:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	222a      	movs	r2, #42	; 0x2a
 8004a70:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	223e      	movs	r2, #62	; 0x3e
 8004a78:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	221c      	movs	r2, #28
 8004a80:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2208      	movs	r2, #8
 8004a88:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2208      	movs	r2, #8
 8004a90:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	221c      	movs	r2, #28
 8004a98:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	223e      	movs	r2, #62	; 0x3e
 8004aa0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	222a      	movs	r2, #42	; 0x2a
 8004aa8:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2208      	movs	r2, #8
 8004ab0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2208      	movs	r2, #8
 8004ac0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	223c      	movs	r2, #60	; 0x3c
 8004ac8:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	223c      	movs	r2, #60	; 0x3c
 8004ad0:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2208      	movs	r2, #8
 8004b00:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	221c      	movs	r2, #28
 8004b08:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	223e      	movs	r2, #62	; 0x3e
 8004b10:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2208      	movs	r2, #8
 8004b18:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2208      	movs	r2, #8
 8004b20:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	223e      	movs	r2, #62	; 0x3e
 8004b28:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	221c      	movs	r2, #28
 8004b30:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2208      	movs	r2, #8
 8004b38:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2230      	movs	r2, #48	; 0x30
 8004b40:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2238      	movs	r2, #56	; 0x38
 8004b48:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	223c      	movs	r2, #60	; 0x3c
 8004b50:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	223e      	movs	r2, #62	; 0x3e
 8004b58:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	223e      	movs	r2, #62	; 0x3e
 8004b60:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	223c      	movs	r2, #60	; 0x3c
 8004b68:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2238      	movs	r2, #56	; 0x38
 8004b70:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2230      	movs	r2, #48	; 0x30
 8004b78:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2206      	movs	r2, #6
 8004b80:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	220e      	movs	r2, #14
 8004b88:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	221e      	movs	r2, #30
 8004b90:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	223e      	movs	r2, #62	; 0x3e
 8004b98:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	223e      	movs	r2, #62	; 0x3e
 8004ba0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	221e      	movs	r2, #30
 8004ba8:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	220e      	movs	r2, #14
 8004bb0:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2206      	movs	r2, #6
 8004bb8:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2206      	movs	r2, #6
 8004bc0:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	225f      	movs	r2, #95	; 0x5f
 8004bc8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	225f      	movs	r2, #95	; 0x5f
 8004bd0:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2206      	movs	r2, #6
 8004bd8:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2207      	movs	r2, #7
 8004be0:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2207      	movs	r2, #7
 8004be8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2207      	movs	r2, #7
 8004bf0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2207      	movs	r2, #7
 8004bf8:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2214      	movs	r2, #20
 8004c00:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	227f      	movs	r2, #127	; 0x7f
 8004c08:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	227f      	movs	r2, #127	; 0x7f
 8004c10:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2214      	movs	r2, #20
 8004c18:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	227f      	movs	r2, #127	; 0x7f
 8004c20:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	227f      	movs	r2, #127	; 0x7f
 8004c28:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2214      	movs	r2, #20
 8004c30:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2224      	movs	r2, #36	; 0x24
 8004c38:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	222e      	movs	r2, #46	; 0x2e
 8004c40:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	226b      	movs	r2, #107	; 0x6b
 8004c48:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	226b      	movs	r2, #107	; 0x6b
 8004c50:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	223a      	movs	r2, #58	; 0x3a
 8004c58:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2212      	movs	r2, #18
 8004c60:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2246      	movs	r2, #70	; 0x46
 8004c68:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2266      	movs	r2, #102	; 0x66
 8004c70:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2230      	movs	r2, #48	; 0x30
 8004c78:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2218      	movs	r2, #24
 8004c80:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	220c      	movs	r2, #12
 8004c88:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2266      	movs	r2, #102	; 0x66
 8004c90:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2262      	movs	r2, #98	; 0x62
 8004c98:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2230      	movs	r2, #48	; 0x30
 8004ca0:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	227a      	movs	r2, #122	; 0x7a
 8004ca8:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	224f      	movs	r2, #79	; 0x4f
 8004cb0:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	225d      	movs	r2, #93	; 0x5d
 8004cb8:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2237      	movs	r2, #55	; 0x37
 8004cc0:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	227a      	movs	r2, #122	; 0x7a
 8004cc8:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2248      	movs	r2, #72	; 0x48
 8004cd0:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2207      	movs	r2, #7
 8004ce0:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	221c      	movs	r2, #28
 8004cf0:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	223e      	movs	r2, #62	; 0x3e
 8004cf8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2263      	movs	r2, #99	; 0x63
 8004d00:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2241      	movs	r2, #65	; 0x41
 8004d08:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2241      	movs	r2, #65	; 0x41
 8004d10:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2263      	movs	r2, #99	; 0x63
 8004d18:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	223e      	movs	r2, #62	; 0x3e
 8004d20:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	221c      	movs	r2, #28
 8004d28:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2208      	movs	r2, #8
 8004d30:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	222a      	movs	r2, #42	; 0x2a
 8004d38:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	223e      	movs	r2, #62	; 0x3e
 8004d40:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	221c      	movs	r2, #28
 8004d48:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	221c      	movs	r2, #28
 8004d50:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	223e      	movs	r2, #62	; 0x3e
 8004d58:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	222a      	movs	r2, #42	; 0x2a
 8004d60:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2208      	movs	r2, #8
 8004d68:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2208      	movs	r2, #8
 8004d70:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2208      	movs	r2, #8
 8004d78:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	223e      	movs	r2, #62	; 0x3e
 8004d80:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	223e      	movs	r2, #62	; 0x3e
 8004d88:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2208      	movs	r2, #8
 8004d90:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2208      	movs	r2, #8
 8004d98:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2280      	movs	r2, #128	; 0x80
 8004da0:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	22e0      	movs	r2, #224	; 0xe0
 8004da8:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2260      	movs	r2, #96	; 0x60
 8004db0:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2208      	movs	r2, #8
 8004db8:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2208      	movs	r2, #8
 8004dc0:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2208      	movs	r2, #8
 8004dc8:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2208      	movs	r2, #8
 8004dd0:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2208      	movs	r2, #8
 8004dd8:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2208      	movs	r2, #8
 8004de0:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2260      	movs	r2, #96	; 0x60
 8004de8:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2260      	movs	r2, #96	; 0x60
 8004df0:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2260      	movs	r2, #96	; 0x60
 8004df8:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2230      	movs	r2, #48	; 0x30
 8004e00:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2218      	movs	r2, #24
 8004e08:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	220c      	movs	r2, #12
 8004e10:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2206      	movs	r2, #6
 8004e18:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2203      	movs	r2, #3
 8004e20:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	223e      	movs	r2, #62	; 0x3e
 8004e30:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	227f      	movs	r2, #127	; 0x7f
 8004e38:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2271      	movs	r2, #113	; 0x71
 8004e40:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2259      	movs	r2, #89	; 0x59
 8004e48:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	224d      	movs	r2, #77	; 0x4d
 8004e50:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	227f      	movs	r2, #127	; 0x7f
 8004e58:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	223e      	movs	r2, #62	; 0x3e
 8004e60:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2240      	movs	r2, #64	; 0x40
 8004e68:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2242      	movs	r2, #66	; 0x42
 8004e70:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	227f      	movs	r2, #127	; 0x7f
 8004e78:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	227f      	movs	r2, #127	; 0x7f
 8004e80:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2240      	movs	r2, #64	; 0x40
 8004e88:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2240      	movs	r2, #64	; 0x40
 8004e90:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2262      	movs	r2, #98	; 0x62
 8004e98:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2273      	movs	r2, #115	; 0x73
 8004ea0:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2259      	movs	r2, #89	; 0x59
 8004ea8:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2249      	movs	r2, #73	; 0x49
 8004eb0:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	226f      	movs	r2, #111	; 0x6f
 8004eb8:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2266      	movs	r2, #102	; 0x66
 8004ec0:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2222      	movs	r2, #34	; 0x22
 8004ec8:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2263      	movs	r2, #99	; 0x63
 8004ed0:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2249      	movs	r2, #73	; 0x49
 8004ed8:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2249      	movs	r2, #73	; 0x49
 8004ee0:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	227f      	movs	r2, #127	; 0x7f
 8004ee8:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2236      	movs	r2, #54	; 0x36
 8004ef0:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2218      	movs	r2, #24
 8004ef8:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	221c      	movs	r2, #28
 8004f00:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2216      	movs	r2, #22
 8004f08:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2253      	movs	r2, #83	; 0x53
 8004f10:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	227f      	movs	r2, #127	; 0x7f
 8004f18:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	227f      	movs	r2, #127	; 0x7f
 8004f20:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2250      	movs	r2, #80	; 0x50
 8004f28:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2227      	movs	r2, #39	; 0x27
 8004f30:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2267      	movs	r2, #103	; 0x67
 8004f38:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2245      	movs	r2, #69	; 0x45
 8004f40:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2245      	movs	r2, #69	; 0x45
 8004f48:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	227d      	movs	r2, #125	; 0x7d
 8004f50:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2239      	movs	r2, #57	; 0x39
 8004f58:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	223c      	movs	r2, #60	; 0x3c
 8004f60:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	227e      	movs	r2, #126	; 0x7e
 8004f68:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	224b      	movs	r2, #75	; 0x4b
 8004f70:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2249      	movs	r2, #73	; 0x49
 8004f78:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2279      	movs	r2, #121	; 0x79
 8004f80:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2230      	movs	r2, #48	; 0x30
 8004f88:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2203      	movs	r2, #3
 8004f90:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2203      	movs	r2, #3
 8004f98:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2271      	movs	r2, #113	; 0x71
 8004fa0:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2279      	movs	r2, #121	; 0x79
 8004fa8:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	220f      	movs	r2, #15
 8004fb0:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2207      	movs	r2, #7
 8004fb8:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2236      	movs	r2, #54	; 0x36
 8004fc0:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	227f      	movs	r2, #127	; 0x7f
 8004fc8:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2249      	movs	r2, #73	; 0x49
 8004fd0:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2249      	movs	r2, #73	; 0x49
 8004fd8:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	227f      	movs	r2, #127	; 0x7f
 8004fe0:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2236      	movs	r2, #54	; 0x36
 8004fe8:	f883 21e3 	strb.w	r2, [r3, #483]	; 0x1e3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2206      	movs	r2, #6
 8004ff0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	224f      	movs	r2, #79	; 0x4f
 8004ff8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2249      	movs	r2, #73	; 0x49
 8005000:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2269      	movs	r2, #105	; 0x69
 8005008:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	223f      	movs	r2, #63	; 0x3f
 8005010:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	221e      	movs	r2, #30
 8005018:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2266      	movs	r2, #102	; 0x66
 8005020:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2266      	movs	r2, #102	; 0x66
 8005028:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2280      	movs	r2, #128	; 0x80
 8005030:	f883 21f7 	strb.w	r2, [r3, #503]	; 0x1f7
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	22e6      	movs	r2, #230	; 0xe6
 8005038:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2266      	movs	r2, #102	; 0x66
 8005040:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2208      	movs	r2, #8
 8005048:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	221c      	movs	r2, #28
 8005050:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2236      	movs	r2, #54	; 0x36
 8005058:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2263      	movs	r2, #99	; 0x63
 8005060:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2241      	movs	r2, #65	; 0x41
 8005068:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2224      	movs	r2, #36	; 0x24
 8005070:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2224      	movs	r2, #36	; 0x24
 8005078:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2224      	movs	r2, #36	; 0x24
 8005080:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2224      	movs	r2, #36	; 0x24
 8005088:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2224      	movs	r2, #36	; 0x24
 8005090:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	; 0x24
 8005098:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2241      	movs	r2, #65	; 0x41
 80050a0:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2263      	movs	r2, #99	; 0x63
 80050a8:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2236      	movs	r2, #54	; 0x36
 80050b0:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	221c      	movs	r2, #28
 80050b8:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2208      	movs	r2, #8
 80050c0:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2203      	movs	r2, #3
 80050d0:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2251      	movs	r2, #81	; 0x51
 80050d8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2259      	movs	r2, #89	; 0x59
 80050e0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	220f      	movs	r2, #15
 80050e8:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2206      	movs	r2, #6
 80050f0:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	223e      	movs	r2, #62	; 0x3e
 80050f8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	227f      	movs	r2, #127	; 0x7f
 8005100:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2241      	movs	r2, #65	; 0x41
 8005108:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	225d      	movs	r2, #93	; 0x5d
 8005110:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	225d      	movs	r2, #93	; 0x5d
 8005118:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	221f      	movs	r2, #31
 8005120:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	221e      	movs	r2, #30
 8005128:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	227c      	movs	r2, #124	; 0x7c
 8005130:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	227e      	movs	r2, #126	; 0x7e
 8005138:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2213      	movs	r2, #19
 8005140:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2213      	movs	r2, #19
 8005148:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	227e      	movs	r2, #126	; 0x7e
 8005150:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	227c      	movs	r2, #124	; 0x7c
 8005158:	f883 222b 	strb.w	r2, [r3, #555]	; 0x22b
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2241      	movs	r2, #65	; 0x41
 8005160:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	227f      	movs	r2, #127	; 0x7f
 8005168:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	227f      	movs	r2, #127	; 0x7f
 8005170:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2249      	movs	r2, #73	; 0x49
 8005178:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2249      	movs	r2, #73	; 0x49
 8005180:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	227f      	movs	r2, #127	; 0x7f
 8005188:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2236      	movs	r2, #54	; 0x36
 8005190:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	221c      	movs	r2, #28
 8005198:	f883 2236 	strb.w	r2, [r3, #566]	; 0x236
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	223e      	movs	r2, #62	; 0x3e
 80051a0:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2263      	movs	r2, #99	; 0x63
 80051a8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2241      	movs	r2, #65	; 0x41
 80051b0:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2241      	movs	r2, #65	; 0x41
 80051b8:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2263      	movs	r2, #99	; 0x63
 80051c0:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2222      	movs	r2, #34	; 0x22
 80051c8:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2241      	movs	r2, #65	; 0x41
 80051d0:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	227f      	movs	r2, #127	; 0x7f
 80051d8:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	227f      	movs	r2, #127	; 0x7f
 80051e0:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2241      	movs	r2, #65	; 0x41
 80051e8:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2263      	movs	r2, #99	; 0x63
 80051f0:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	223e      	movs	r2, #62	; 0x3e
 80051f8:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	221c      	movs	r2, #28
 8005200:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2241      	movs	r2, #65	; 0x41
 8005208:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	227f      	movs	r2, #127	; 0x7f
 8005210:	f883 2247 	strb.w	r2, [r3, #583]	; 0x247
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	227f      	movs	r2, #127	; 0x7f
 8005218:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2249      	movs	r2, #73	; 0x49
 8005220:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	225d      	movs	r2, #93	; 0x5d
 8005228:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2241      	movs	r2, #65	; 0x41
 8005230:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2263      	movs	r2, #99	; 0x63
 8005238:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2241      	movs	r2, #65	; 0x41
 8005240:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	227f      	movs	r2, #127	; 0x7f
 8005248:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	227f      	movs	r2, #127	; 0x7f
 8005250:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2249      	movs	r2, #73	; 0x49
 8005258:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	221d      	movs	r2, #29
 8005260:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2203      	movs	r2, #3
 8005270:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	221c      	movs	r2, #28
 8005278:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	223e      	movs	r2, #62	; 0x3e
 8005280:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2263      	movs	r2, #99	; 0x63
 8005288:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2241      	movs	r2, #65	; 0x41
 8005290:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2251      	movs	r2, #81	; 0x51
 8005298:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2273      	movs	r2, #115	; 0x73
 80052a0:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2272      	movs	r2, #114	; 0x72
 80052a8:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	227f      	movs	r2, #127	; 0x7f
 80052b0:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	227f      	movs	r2, #127	; 0x7f
 80052b8:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2208      	movs	r2, #8
 80052c0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2208      	movs	r2, #8
 80052c8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	227f      	movs	r2, #127	; 0x7f
 80052d0:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	227f      	movs	r2, #127	; 0x7f
 80052d8:	f883 2263 	strb.w	r2, [r3, #611]	; 0x263
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2241      	movs	r2, #65	; 0x41
 80052e0:	f883 2267 	strb.w	r2, [r3, #615]	; 0x267
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	227f      	movs	r2, #127	; 0x7f
 80052e8:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	227f      	movs	r2, #127	; 0x7f
 80052f0:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2241      	movs	r2, #65	; 0x41
 80052f8:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2230      	movs	r2, #48	; 0x30
 8005300:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2270      	movs	r2, #112	; 0x70
 8005308:	f883 226f 	strb.w	r2, [r3, #623]	; 0x26f
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2240      	movs	r2, #64	; 0x40
 8005310:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2241      	movs	r2, #65	; 0x41
 8005318:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	227f      	movs	r2, #127	; 0x7f
 8005320:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	223f      	movs	r2, #63	; 0x3f
 8005328:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2241      	movs	r2, #65	; 0x41
 8005338:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	227f      	movs	r2, #127	; 0x7f
 8005340:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	227f      	movs	r2, #127	; 0x7f
 8005348:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2208      	movs	r2, #8
 8005350:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	221c      	movs	r2, #28
 8005358:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2277      	movs	r2, #119	; 0x77
 8005360:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2263      	movs	r2, #99	; 0x63
 8005368:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2241      	movs	r2, #65	; 0x41
 8005370:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	227f      	movs	r2, #127	; 0x7f
 8005378:	f883 227f 	strb.w	r2, [r3, #639]	; 0x27f
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	227f      	movs	r2, #127	; 0x7f
 8005380:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2241      	movs	r2, #65	; 0x41
 8005388:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2240      	movs	r2, #64	; 0x40
 8005390:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2260      	movs	r2, #96	; 0x60
 8005398:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2270      	movs	r2, #112	; 0x70
 80053a0:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	227f      	movs	r2, #127	; 0x7f
 80053a8:	f883 2286 	strb.w	r2, [r3, #646]	; 0x286
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	227f      	movs	r2, #127	; 0x7f
 80053b0:	f883 2287 	strb.w	r2, [r3, #647]	; 0x287
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	220e      	movs	r2, #14
 80053b8:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	221c      	movs	r2, #28
 80053c0:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	220e      	movs	r2, #14
 80053c8:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	227f      	movs	r2, #127	; 0x7f
 80053d0:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	227f      	movs	r2, #127	; 0x7f
 80053d8:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	227f      	movs	r2, #127	; 0x7f
 80053e0:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	227f      	movs	r2, #127	; 0x7f
 80053e8:	f883 228f 	strb.w	r2, [r3, #655]	; 0x28f
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2206      	movs	r2, #6
 80053f0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	220c      	movs	r2, #12
 80053f8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2218      	movs	r2, #24
 8005400:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	227f      	movs	r2, #127	; 0x7f
 8005408:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	227f      	movs	r2, #127	; 0x7f
 8005410:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	221c      	movs	r2, #28
 8005418:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	223e      	movs	r2, #62	; 0x3e
 8005420:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2263      	movs	r2, #99	; 0x63
 8005428:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2241      	movs	r2, #65	; 0x41
 8005430:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2263      	movs	r2, #99	; 0x63
 8005438:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	223e      	movs	r2, #62	; 0x3e
 8005440:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	221c      	movs	r2, #28
 8005448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2241      	movs	r2, #65	; 0x41
 8005450:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	227f      	movs	r2, #127	; 0x7f
 8005458:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	227f      	movs	r2, #127	; 0x7f
 8005460:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2249      	movs	r2, #73	; 0x49
 8005468:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2209      	movs	r2, #9
 8005470:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	220f      	movs	r2, #15
 8005478:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2206      	movs	r2, #6
 8005480:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	221e      	movs	r2, #30
 8005488:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	223f      	movs	r2, #63	; 0x3f
 8005490:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2221      	movs	r2, #33	; 0x21
 8005498:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2271      	movs	r2, #113	; 0x71
 80054a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	227f      	movs	r2, #127	; 0x7f
 80054a8:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	225e      	movs	r2, #94	; 0x5e
 80054b0:	f883 22ab 	strb.w	r2, [r3, #683]	; 0x2ab
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2241      	movs	r2, #65	; 0x41
 80054b8:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	227f      	movs	r2, #127	; 0x7f
 80054c0:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	227f      	movs	r2, #127	; 0x7f
 80054c8:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2209      	movs	r2, #9
 80054d0:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2219      	movs	r2, #25
 80054d8:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	227f      	movs	r2, #127	; 0x7f
 80054e0:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2266      	movs	r2, #102	; 0x66
 80054e8:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2226      	movs	r2, #38	; 0x26
 80054f0:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	226f      	movs	r2, #111	; 0x6f
 80054f8:	f883 22b7 	strb.w	r2, [r3, #695]	; 0x2b7
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	224d      	movs	r2, #77	; 0x4d
 8005500:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2259      	movs	r2, #89	; 0x59
 8005508:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2273      	movs	r2, #115	; 0x73
 8005510:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2232      	movs	r2, #50	; 0x32
 8005518:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2203      	movs	r2, #3
 8005520:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2241      	movs	r2, #65	; 0x41
 8005528:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	227f      	movs	r2, #127	; 0x7f
 8005530:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	227f      	movs	r2, #127	; 0x7f
 8005538:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2241      	movs	r2, #65	; 0x41
 8005540:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2203      	movs	r2, #3
 8005548:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	227f      	movs	r2, #127	; 0x7f
 8005550:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	227f      	movs	r2, #127	; 0x7f
 8005558:	f883 22c7 	strb.w	r2, [r3, #711]	; 0x2c7
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2240      	movs	r2, #64	; 0x40
 8005560:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2240      	movs	r2, #64	; 0x40
 8005568:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	227f      	movs	r2, #127	; 0x7f
 8005570:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	227f      	movs	r2, #127	; 0x7f
 8005578:	f883 22cb 	strb.w	r2, [r3, #715]	; 0x2cb
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	221f      	movs	r2, #31
 8005580:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	223f      	movs	r2, #63	; 0x3f
 8005588:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2260      	movs	r2, #96	; 0x60
 8005590:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2260      	movs	r2, #96	; 0x60
 8005598:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	223f      	movs	r2, #63	; 0x3f
 80055a0:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	221f      	movs	r2, #31
 80055a8:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	227f      	movs	r2, #127	; 0x7f
 80055b0:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	227f      	movs	r2, #127	; 0x7f
 80055b8:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2230      	movs	r2, #48	; 0x30
 80055c0:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2218      	movs	r2, #24
 80055c8:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2230      	movs	r2, #48	; 0x30
 80055d0:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	227f      	movs	r2, #127	; 0x7f
 80055d8:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	227f      	movs	r2, #127	; 0x7f
 80055e0:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2243      	movs	r2, #67	; 0x43
 80055e8:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2267      	movs	r2, #103	; 0x67
 80055f0:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	223c      	movs	r2, #60	; 0x3c
 80055f8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2218      	movs	r2, #24
 8005600:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	223c      	movs	r2, #60	; 0x3c
 8005608:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2267      	movs	r2, #103	; 0x67
 8005610:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2243      	movs	r2, #67	; 0x43
 8005618:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2207      	movs	r2, #7
 8005620:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	224f      	movs	r2, #79	; 0x4f
 8005628:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2278      	movs	r2, #120	; 0x78
 8005630:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2278      	movs	r2, #120	; 0x78
 8005638:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	224f      	movs	r2, #79	; 0x4f
 8005640:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2207      	movs	r2, #7
 8005648:	f883 22eb 	strb.w	r2, [r3, #747]	; 0x2eb
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2247      	movs	r2, #71	; 0x47
 8005650:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2263      	movs	r2, #99	; 0x63
 8005658:	f883 22ef 	strb.w	r2, [r3, #751]	; 0x2ef
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2271      	movs	r2, #113	; 0x71
 8005660:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2259      	movs	r2, #89	; 0x59
 8005668:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	224d      	movs	r2, #77	; 0x4d
 8005670:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2267      	movs	r2, #103	; 0x67
 8005678:	f883 22f3 	strb.w	r2, [r3, #755]	; 0x2f3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2273      	movs	r2, #115	; 0x73
 8005680:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	227f      	movs	r2, #127	; 0x7f
 8005688:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	227f      	movs	r2, #127	; 0x7f
 8005690:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2241      	movs	r2, #65	; 0x41
 8005698:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2241      	movs	r2, #65	; 0x41
 80056a0:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 22fe 	strb.w	r2, [r3, #766]	; 0x2fe
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2203      	movs	r2, #3
 80056b0:	f883 22ff 	strb.w	r2, [r3, #767]	; 0x2ff
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2206      	movs	r2, #6
 80056b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	220c      	movs	r2, #12
 80056c0:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2218      	movs	r2, #24
 80056c8:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2230      	movs	r2, #48	; 0x30
 80056d0:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2260      	movs	r2, #96	; 0x60
 80056d8:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2241      	movs	r2, #65	; 0x41
 80056e0:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2241      	movs	r2, #65	; 0x41
 80056e8:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	227f      	movs	r2, #127	; 0x7f
 80056f0:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	227f      	movs	r2, #127	; 0x7f
 80056f8:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2208      	movs	r2, #8
 8005700:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	220c      	movs	r2, #12
 8005708:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2206      	movs	r2, #6
 8005710:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2203      	movs	r2, #3
 8005718:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2206      	movs	r2, #6
 8005720:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	220c      	movs	r2, #12
 8005728:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2208      	movs	r2, #8
 8005730:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2280      	movs	r2, #128	; 0x80
 8005738:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2280      	movs	r2, #128	; 0x80
 8005740:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2280      	movs	r2, #128	; 0x80
 8005748:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2280      	movs	r2, #128	; 0x80
 8005750:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2280      	movs	r2, #128	; 0x80
 8005758:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2280      	movs	r2, #128	; 0x80
 8005760:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2280      	movs	r2, #128	; 0x80
 8005768:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2280      	movs	r2, #128	; 0x80
 8005770:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2203      	movs	r2, #3
 8005778:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2207      	movs	r2, #7
 8005780:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2204      	movs	r2, #4
 8005788:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2274      	movs	r2, #116	; 0x74
 8005798:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2254      	movs	r2, #84	; 0x54
 80057a0:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2254      	movs	r2, #84	; 0x54
 80057a8:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	223c      	movs	r2, #60	; 0x3c
 80057b0:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2278      	movs	r2, #120	; 0x78
 80057b8:	f883 232b 	strb.w	r2, [r3, #811]	; 0x32b
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2240      	movs	r2, #64	; 0x40
 80057c0:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2241      	movs	r2, #65	; 0x41
 80057c8:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	227f      	movs	r2, #127	; 0x7f
 80057d0:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	223f      	movs	r2, #63	; 0x3f
 80057d8:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2248      	movs	r2, #72	; 0x48
 80057e0:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2248      	movs	r2, #72	; 0x48
 80057e8:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2278      	movs	r2, #120	; 0x78
 80057f0:	f883 2333 	strb.w	r2, [r3, #819]	; 0x333
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2230      	movs	r2, #48	; 0x30
 80057f8:	f883 2334 	strb.w	r2, [r3, #820]	; 0x334
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2238      	movs	r2, #56	; 0x38
 8005800:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	227c      	movs	r2, #124	; 0x7c
 8005808:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2244      	movs	r2, #68	; 0x44
 8005810:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2244      	movs	r2, #68	; 0x44
 8005818:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	226c      	movs	r2, #108	; 0x6c
 8005820:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2228      	movs	r2, #40	; 0x28
 8005828:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2230      	movs	r2, #48	; 0x30
 8005830:	f883 233e 	strb.w	r2, [r3, #830]	; 0x33e
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2278      	movs	r2, #120	; 0x78
 8005838:	f883 233f 	strb.w	r2, [r3, #831]	; 0x33f
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2248      	movs	r2, #72	; 0x48
 8005840:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2249      	movs	r2, #73	; 0x49
 8005848:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	223f      	movs	r2, #63	; 0x3f
 8005850:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	227f      	movs	r2, #127	; 0x7f
 8005858:	f883 2343 	strb.w	r2, [r3, #835]	; 0x343
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2240      	movs	r2, #64	; 0x40
 8005860:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2238      	movs	r2, #56	; 0x38
 8005868:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	227c      	movs	r2, #124	; 0x7c
 8005870:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2254      	movs	r2, #84	; 0x54
 8005878:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2254      	movs	r2, #84	; 0x54
 8005880:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	225c      	movs	r2, #92	; 0x5c
 8005888:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2218      	movs	r2, #24
 8005890:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2248      	movs	r2, #72	; 0x48
 8005898:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	227e      	movs	r2, #126	; 0x7e
 80058a0:	f883 234f 	strb.w	r2, [r3, #847]	; 0x34f
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	227f      	movs	r2, #127	; 0x7f
 80058a8:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2249      	movs	r2, #73	; 0x49
 80058b0:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2203      	movs	r2, #3
 80058b8:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 2353 	strb.w	r2, [r3, #851]	; 0x353
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2298      	movs	r2, #152	; 0x98
 80058c8:	f883 2356 	strb.w	r2, [r3, #854]	; 0x356
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	22bc      	movs	r2, #188	; 0xbc
 80058d0:	f883 2357 	strb.w	r2, [r3, #855]	; 0x357
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	22a4      	movs	r2, #164	; 0xa4
 80058d8:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	22a4      	movs	r2, #164	; 0xa4
 80058e0:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	22f8      	movs	r2, #248	; 0xf8
 80058e8:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	227c      	movs	r2, #124	; 0x7c
 80058f0:	f883 235b 	strb.w	r2, [r3, #859]	; 0x35b
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2204      	movs	r2, #4
 80058f8:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2241      	movs	r2, #65	; 0x41
 8005900:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	227f      	movs	r2, #127	; 0x7f
 8005908:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	227f      	movs	r2, #127	; 0x7f
 8005910:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2208      	movs	r2, #8
 8005918:	f883 2361 	strb.w	r2, [r3, #865]	; 0x361
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2204      	movs	r2, #4
 8005920:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	227c      	movs	r2, #124	; 0x7c
 8005928:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2278      	movs	r2, #120	; 0x78
 8005930:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2244      	movs	r2, #68	; 0x44
 8005938:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	227d      	movs	r2, #125	; 0x7d
 8005940:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	227d      	movs	r2, #125	; 0x7d
 8005948:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2240      	movs	r2, #64	; 0x40
 8005950:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2260      	movs	r2, #96	; 0x60
 8005958:	f883 236e 	strb.w	r2, [r3, #878]	; 0x36e
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	22e0      	movs	r2, #224	; 0xe0
 8005960:	f883 236f 	strb.w	r2, [r3, #879]	; 0x36f
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2280      	movs	r2, #128	; 0x80
 8005968:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2280      	movs	r2, #128	; 0x80
 8005970:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	22fd      	movs	r2, #253	; 0xfd
 8005978:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	227d      	movs	r2, #125	; 0x7d
 8005980:	f883 2373 	strb.w	r2, [r3, #883]	; 0x373
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2241      	movs	r2, #65	; 0x41
 8005988:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	227f      	movs	r2, #127	; 0x7f
 8005990:	f883 2377 	strb.w	r2, [r3, #887]	; 0x377
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	227f      	movs	r2, #127	; 0x7f
 8005998:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2210      	movs	r2, #16
 80059a0:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2238      	movs	r2, #56	; 0x38
 80059a8:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	226c      	movs	r2, #108	; 0x6c
 80059b0:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2244      	movs	r2, #68	; 0x44
 80059b8:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2241      	movs	r2, #65	; 0x41
 80059c0:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	227f      	movs	r2, #127	; 0x7f
 80059c8:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	227f      	movs	r2, #127	; 0x7f
 80059d0:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2240      	movs	r2, #64	; 0x40
 80059d8:	f883 2382 	strb.w	r2, [r3, #898]	; 0x382
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	227c      	movs	r2, #124	; 0x7c
 80059e0:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	227c      	movs	r2, #124	; 0x7c
 80059e8:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2218      	movs	r2, #24
 80059f0:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2238      	movs	r2, #56	; 0x38
 80059f8:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	221c      	movs	r2, #28
 8005a00:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	227c      	movs	r2, #124	; 0x7c
 8005a08:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2278      	movs	r2, #120	; 0x78
 8005a10:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	227c      	movs	r2, #124	; 0x7c
 8005a18:	f883 238e 	strb.w	r2, [r3, #910]	; 0x38e
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	227c      	movs	r2, #124	; 0x7c
 8005a20:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2204      	movs	r2, #4
 8005a28:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	227c      	movs	r2, #124	; 0x7c
 8005a38:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2278      	movs	r2, #120	; 0x78
 8005a40:	f883 2393 	strb.w	r2, [r3, #915]	; 0x393
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2238      	movs	r2, #56	; 0x38
 8005a48:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	227c      	movs	r2, #124	; 0x7c
 8005a50:	f883 2397 	strb.w	r2, [r3, #919]	; 0x397
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2244      	movs	r2, #68	; 0x44
 8005a58:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2244      	movs	r2, #68	; 0x44
 8005a60:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	227c      	movs	r2, #124	; 0x7c
 8005a68:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2238      	movs	r2, #56	; 0x38
 8005a70:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2284      	movs	r2, #132	; 0x84
 8005a78:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	22fc      	movs	r2, #252	; 0xfc
 8005a80:	f883 239f 	strb.w	r2, [r3, #927]	; 0x39f
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	22f8      	movs	r2, #248	; 0xf8
 8005a88:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	22a4      	movs	r2, #164	; 0xa4
 8005a90:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2224      	movs	r2, #36	; 0x24
 8005a98:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	223c      	movs	r2, #60	; 0x3c
 8005aa0:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2218      	movs	r2, #24
 8005aa8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2218      	movs	r2, #24
 8005ab0:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	223c      	movs	r2, #60	; 0x3c
 8005ab8:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2224      	movs	r2, #36	; 0x24
 8005ac0:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	22a4      	movs	r2, #164	; 0xa4
 8005ac8:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	22f8      	movs	r2, #248	; 0xf8
 8005ad0:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	22fc      	movs	r2, #252	; 0xfc
 8005ad8:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2284      	movs	r2, #132	; 0x84
 8005ae0:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2244      	movs	r2, #68	; 0x44
 8005ae8:	f883 23ae 	strb.w	r2, [r3, #942]	; 0x3ae
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	227c      	movs	r2, #124	; 0x7c
 8005af0:	f883 23af 	strb.w	r2, [r3, #943]	; 0x3af
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2278      	movs	r2, #120	; 0x78
 8005af8:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	224c      	movs	r2, #76	; 0x4c
 8005b00:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2204      	movs	r2, #4
 8005b08:	f883 23b2 	strb.w	r2, [r3, #946]	; 0x3b2
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	221c      	movs	r2, #28
 8005b10:	f883 23b3 	strb.w	r2, [r3, #947]	; 0x3b3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2218      	movs	r2, #24
 8005b18:	f883 23b4 	strb.w	r2, [r3, #948]	; 0x3b4
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2248      	movs	r2, #72	; 0x48
 8005b20:	f883 23b6 	strb.w	r2, [r3, #950]	; 0x3b6
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	225c      	movs	r2, #92	; 0x5c
 8005b28:	f883 23b7 	strb.w	r2, [r3, #951]	; 0x3b7
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2254      	movs	r2, #84	; 0x54
 8005b30:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2254      	movs	r2, #84	; 0x54
 8005b38:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2274      	movs	r2, #116	; 0x74
 8005b40:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2224      	movs	r2, #36	; 0x24
 8005b48:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2204      	movs	r2, #4
 8005b50:	f883 23bf 	strb.w	r2, [r3, #959]	; 0x3bf
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	223e      	movs	r2, #62	; 0x3e
 8005b58:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	227f      	movs	r2, #127	; 0x7f
 8005b60:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2244      	movs	r2, #68	; 0x44
 8005b68:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2224      	movs	r2, #36	; 0x24
 8005b70:	f883 23c3 	strb.w	r2, [r3, #963]	; 0x3c3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	223c      	movs	r2, #60	; 0x3c
 8005b78:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	227c      	movs	r2, #124	; 0x7c
 8005b80:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2240      	movs	r2, #64	; 0x40
 8005b88:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2240      	movs	r2, #64	; 0x40
 8005b90:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	223c      	movs	r2, #60	; 0x3c
 8005b98:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	227c      	movs	r2, #124	; 0x7c
 8005ba0:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2240      	movs	r2, #64	; 0x40
 8005ba8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	221c      	movs	r2, #28
 8005bb0:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	223c      	movs	r2, #60	; 0x3c
 8005bb8:	f883 23cf 	strb.w	r2, [r3, #975]	; 0x3cf
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2260      	movs	r2, #96	; 0x60
 8005bc0:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2260      	movs	r2, #96	; 0x60
 8005bc8:	f883 23d1 	strb.w	r2, [r3, #977]	; 0x3d1
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	223c      	movs	r2, #60	; 0x3c
 8005bd0:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	221c      	movs	r2, #28
 8005bd8:	f883 23d3 	strb.w	r2, [r3, #979]	; 0x3d3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	223c      	movs	r2, #60	; 0x3c
 8005be0:	f883 23d6 	strb.w	r2, [r3, #982]	; 0x3d6
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	227c      	movs	r2, #124	; 0x7c
 8005be8:	f883 23d7 	strb.w	r2, [r3, #983]	; 0x3d7
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2270      	movs	r2, #112	; 0x70
 8005bf0:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2238      	movs	r2, #56	; 0x38
 8005bf8:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2270      	movs	r2, #112	; 0x70
 8005c00:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	227c      	movs	r2, #124	; 0x7c
 8005c08:	f883 23db 	strb.w	r2, [r3, #987]	; 0x3db
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	223c      	movs	r2, #60	; 0x3c
 8005c10:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2244      	movs	r2, #68	; 0x44
 8005c18:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	226c      	movs	r2, #108	; 0x6c
 8005c20:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2238      	movs	r2, #56	; 0x38
 8005c28:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2210      	movs	r2, #16
 8005c30:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2238      	movs	r2, #56	; 0x38
 8005c38:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	226c      	movs	r2, #108	; 0x6c
 8005c40:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2244      	movs	r2, #68	; 0x44
 8005c48:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	229c      	movs	r2, #156	; 0x9c
 8005c50:	f883 23e6 	strb.w	r2, [r3, #998]	; 0x3e6
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	22bc      	movs	r2, #188	; 0xbc
 8005c58:	f883 23e7 	strb.w	r2, [r3, #999]	; 0x3e7
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	22a0      	movs	r2, #160	; 0xa0
 8005c60:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	22a0      	movs	r2, #160	; 0xa0
 8005c68:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	22fc      	movs	r2, #252	; 0xfc
 8005c70:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	227c      	movs	r2, #124	; 0x7c
 8005c78:	f883 23eb 	strb.w	r2, [r3, #1003]	; 0x3eb
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	224c      	movs	r2, #76	; 0x4c
 8005c80:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2264      	movs	r2, #100	; 0x64
 8005c88:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2274      	movs	r2, #116	; 0x74
 8005c90:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	225c      	movs	r2, #92	; 0x5c
 8005c98:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	224c      	movs	r2, #76	; 0x4c
 8005ca0:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2264      	movs	r2, #100	; 0x64
 8005ca8:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2208      	movs	r2, #8
 8005cb0:	f883 23f6 	strb.w	r2, [r3, #1014]	; 0x3f6
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2208      	movs	r2, #8
 8005cb8:	f883 23f7 	strb.w	r2, [r3, #1015]	; 0x3f7
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	223e      	movs	r2, #62	; 0x3e
 8005cc0:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2277      	movs	r2, #119	; 0x77
 8005cc8:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2241      	movs	r2, #65	; 0x41
 8005cd0:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2241      	movs	r2, #65	; 0x41
 8005cd8:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2277      	movs	r2, #119	; 0x77
 8005ce0:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2277      	movs	r2, #119	; 0x77
 8005ce8:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2241      	movs	r2, #65	; 0x41
 8005cf0:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2241      	movs	r2, #65	; 0x41
 8005cf8:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2277      	movs	r2, #119	; 0x77
 8005d00:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	223e      	movs	r2, #62	; 0x3e
 8005d08:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2208      	movs	r2, #8
 8005d10:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2208      	movs	r2, #8
 8005d18:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2203      	movs	r2, #3
 8005d28:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2203      	movs	r2, #3
 8005d38:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2203      	movs	r2, #3
 8005d48:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2270      	movs	r2, #112	; 0x70
 8005d58:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2278      	movs	r2, #120	; 0x78
 8005d60:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	224c      	movs	r2, #76	; 0x4c
 8005d68:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2246      	movs	r2, #70	; 0x46
 8005d70:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	224c      	movs	r2, #76	; 0x4c
 8005d78:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2278      	movs	r2, #120	; 0x78
 8005d80:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2270      	movs	r2, #112	; 0x70
 8005d88:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	220e      	movs	r2, #14
 8005d90:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	229f      	movs	r2, #159	; 0x9f
 8005d98:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2291      	movs	r2, #145	; 0x91
 8005da0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	22b1      	movs	r2, #177	; 0xb1
 8005da8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	22fb      	movs	r2, #251	; 0xfb
 8005db0:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	224a      	movs	r2, #74	; 0x4a
 8005db8:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	223a      	movs	r2, #58	; 0x3a
 8005dc0:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	227a      	movs	r2, #122	; 0x7a
 8005dc8:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2240      	movs	r2, #64	; 0x40
 8005dd0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2240      	movs	r2, #64	; 0x40
 8005dd8:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	227a      	movs	r2, #122	; 0x7a
 8005de0:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	227a      	movs	r2, #122	; 0x7a
 8005de8:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2240      	movs	r2, #64	; 0x40
 8005df0:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2238      	movs	r2, #56	; 0x38
 8005df8:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	227c      	movs	r2, #124	; 0x7c
 8005e00:	f883 242f 	strb.w	r2, [r3, #1071]	; 0x42f
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2254      	movs	r2, #84	; 0x54
 8005e08:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2255      	movs	r2, #85	; 0x55
 8005e10:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	225d      	movs	r2, #93	; 0x5d
 8005e18:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2219      	movs	r2, #25
 8005e20:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2223      	movs	r2, #35	; 0x23
 8005e30:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2275      	movs	r2, #117	; 0x75
 8005e38:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2255      	movs	r2, #85	; 0x55
 8005e40:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2255      	movs	r2, #85	; 0x55
 8005e48:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	227d      	movs	r2, #125	; 0x7d
 8005e50:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	227b      	movs	r2, #123	; 0x7b
 8005e58:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2242      	movs	r2, #66	; 0x42
 8005e60:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2221      	movs	r2, #33	; 0x21
 8005e68:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2275      	movs	r2, #117	; 0x75
 8005e70:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2254      	movs	r2, #84	; 0x54
 8005e78:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2254      	movs	r2, #84	; 0x54
 8005e80:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	227d      	movs	r2, #125	; 0x7d
 8005e88:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2279      	movs	r2, #121	; 0x79
 8005e90:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2240      	movs	r2, #64	; 0x40
 8005e98:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2221      	movs	r2, #33	; 0x21
 8005ea0:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2275      	movs	r2, #117	; 0x75
 8005ea8:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2255      	movs	r2, #85	; 0x55
 8005eb0:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2254      	movs	r2, #84	; 0x54
 8005eb8:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	227c      	movs	r2, #124	; 0x7c
 8005ec0:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2278      	movs	r2, #120	; 0x78
 8005ec8:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2240      	movs	r2, #64	; 0x40
 8005ed0:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2274      	movs	r2, #116	; 0x74
 8005ee0:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2257      	movs	r2, #87	; 0x57
 8005ee8:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2257      	movs	r2, #87	; 0x57
 8005ef0:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	227c      	movs	r2, #124	; 0x7c
 8005ef8:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2278      	movs	r2, #120	; 0x78
 8005f00:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2240      	movs	r2, #64	; 0x40
 8005f08:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2218      	movs	r2, #24
 8005f10:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	223c      	movs	r2, #60	; 0x3c
 8005f18:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	22a4      	movs	r2, #164	; 0xa4
 8005f20:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	22a4      	movs	r2, #164	; 0xa4
 8005f28:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	22e4      	movs	r2, #228	; 0xe4
 8005f30:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2240      	movs	r2, #64	; 0x40
 8005f38:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	223b      	movs	r2, #59	; 0x3b
 8005f48:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	227d      	movs	r2, #125	; 0x7d
 8005f50:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2255      	movs	r2, #85	; 0x55
 8005f58:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2255      	movs	r2, #85	; 0x55
 8005f60:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	225d      	movs	r2, #93	; 0x5d
 8005f68:	f883 2463 	strb.w	r2, [r3, #1123]	; 0x463
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	221b      	movs	r2, #27
 8005f70:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 2465 	strb.w	r2, [r3, #1125]	; 0x465
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2239      	movs	r2, #57	; 0x39
 8005f80:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	227d      	movs	r2, #125	; 0x7d
 8005f88:	f883 2467 	strb.w	r2, [r3, #1127]	; 0x467
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2254      	movs	r2, #84	; 0x54
 8005f90:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2254      	movs	r2, #84	; 0x54
 8005f98:	f883 2469 	strb.w	r2, [r3, #1129]	; 0x469
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	225d      	movs	r2, #93	; 0x5d
 8005fa0:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2219      	movs	r2, #25
 8005fa8:	f883 246b 	strb.w	r2, [r3, #1131]	; 0x46b
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2239      	movs	r2, #57	; 0x39
 8005fb0:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	227d      	movs	r2, #125	; 0x7d
 8005fb8:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2255      	movs	r2, #85	; 0x55
 8005fc0:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2254      	movs	r2, #84	; 0x54
 8005fc8:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	225c      	movs	r2, #92	; 0x5c
 8005fd0:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2218      	movs	r2, #24
 8005fd8:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2476 	strb.w	r2, [r3, #1142]	; 0x476
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2245      	movs	r2, #69	; 0x45
 8005fe8:	f883 2477 	strb.w	r2, [r3, #1143]	; 0x477
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	227c      	movs	r2, #124	; 0x7c
 8005ff0:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	227c      	movs	r2, #124	; 0x7c
 8005ff8:	f883 2479 	strb.w	r2, [r3, #1145]	; 0x479
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2241      	movs	r2, #65	; 0x41
 8006000:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 247b 	strb.w	r2, [r3, #1147]	; 0x47b
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2203      	movs	r2, #3
 8006018:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2245      	movs	r2, #69	; 0x45
 8006020:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	227d      	movs	r2, #125	; 0x7d
 8006028:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	227d      	movs	r2, #125	; 0x7d
 8006030:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2243      	movs	r2, #67	; 0x43
 8006038:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2245      	movs	r2, #69	; 0x45
 8006050:	f883 2487 	strb.w	r2, [r3, #1159]	; 0x487
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	227d      	movs	r2, #125	; 0x7d
 8006058:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	227c      	movs	r2, #124	; 0x7c
 8006060:	f883 2489 	strb.w	r2, [r3, #1161]	; 0x489
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2240      	movs	r2, #64	; 0x40
 8006068:	f883 248a 	strb.w	r2, [r3, #1162]	; 0x48a
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2279      	movs	r2, #121	; 0x79
 8006070:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	227d      	movs	r2, #125	; 0x7d
 8006078:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2216      	movs	r2, #22
 8006080:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2212      	movs	r2, #18
 8006088:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2216      	movs	r2, #22
 8006090:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	227d      	movs	r2, #125	; 0x7d
 8006098:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2279      	movs	r2, #121	; 0x79
 80060a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2270      	movs	r2, #112	; 0x70
 80060a8:	f883 2496 	strb.w	r2, [r3, #1174]	; 0x496
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2278      	movs	r2, #120	; 0x78
 80060b0:	f883 2497 	strb.w	r2, [r3, #1175]	; 0x497
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	222b      	movs	r2, #43	; 0x2b
 80060b8:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	222b      	movs	r2, #43	; 0x2b
 80060c0:	f883 2499 	strb.w	r2, [r3, #1177]	; 0x499
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2278      	movs	r2, #120	; 0x78
 80060c8:	f883 249a 	strb.w	r2, [r3, #1178]	; 0x49a
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2270      	movs	r2, #112	; 0x70
 80060d0:	f883 249b 	strb.w	r2, [r3, #1179]	; 0x49b
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2244      	movs	r2, #68	; 0x44
 80060d8:	f883 249e 	strb.w	r2, [r3, #1182]	; 0x49e
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	227c      	movs	r2, #124	; 0x7c
 80060e0:	f883 249f 	strb.w	r2, [r3, #1183]	; 0x49f
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	227c      	movs	r2, #124	; 0x7c
 80060e8:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2255      	movs	r2, #85	; 0x55
 80060f0:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2255      	movs	r2, #85	; 0x55
 80060f8:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2245      	movs	r2, #69	; 0x45
 8006100:	f883 24a3 	strb.w	r2, [r3, #1187]	; 0x4a3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2274      	movs	r2, #116	; 0x74
 8006110:	f883 24a7 	strb.w	r2, [r3, #1191]	; 0x4a7
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2254      	movs	r2, #84	; 0x54
 8006118:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2254      	movs	r2, #84	; 0x54
 8006120:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	227c      	movs	r2, #124	; 0x7c
 8006128:	f883 24aa 	strb.w	r2, [r3, #1194]	; 0x4aa
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	227c      	movs	r2, #124	; 0x7c
 8006130:	f883 24ab 	strb.w	r2, [r3, #1195]	; 0x4ab
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2254      	movs	r2, #84	; 0x54
 8006138:	f883 24ac 	strb.w	r2, [r3, #1196]	; 0x4ac
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2254      	movs	r2, #84	; 0x54
 8006140:	f883 24ad 	strb.w	r2, [r3, #1197]	; 0x4ad
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	227c      	movs	r2, #124	; 0x7c
 8006148:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	227e      	movs	r2, #126	; 0x7e
 8006150:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	220b      	movs	r2, #11
 8006158:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2209      	movs	r2, #9
 8006160:	f883 24b1 	strb.w	r2, [r3, #1201]	; 0x4b1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	227f      	movs	r2, #127	; 0x7f
 8006168:	f883 24b2 	strb.w	r2, [r3, #1202]	; 0x4b2
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	227f      	movs	r2, #127	; 0x7f
 8006170:	f883 24b3 	strb.w	r2, [r3, #1203]	; 0x4b3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2249      	movs	r2, #73	; 0x49
 8006178:	f883 24b4 	strb.w	r2, [r3, #1204]	; 0x4b4
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2232      	movs	r2, #50	; 0x32
 8006180:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	227b      	movs	r2, #123	; 0x7b
 8006188:	f883 24b7 	strb.w	r2, [r3, #1207]	; 0x4b7
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2249      	movs	r2, #73	; 0x49
 8006190:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2249      	movs	r2, #73	; 0x49
 8006198:	f883 24b9 	strb.w	r2, [r3, #1209]	; 0x4b9
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	227b      	movs	r2, #123	; 0x7b
 80061a0:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2232      	movs	r2, #50	; 0x32
 80061a8:	f883 24bb 	strb.w	r2, [r3, #1211]	; 0x4bb
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2232      	movs	r2, #50	; 0x32
 80061b0:	f883 24be 	strb.w	r2, [r3, #1214]	; 0x4be
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	227a      	movs	r2, #122	; 0x7a
 80061b8:	f883 24bf 	strb.w	r2, [r3, #1215]	; 0x4bf
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2248      	movs	r2, #72	; 0x48
 80061c0:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2248      	movs	r2, #72	; 0x48
 80061c8:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	227a      	movs	r2, #122	; 0x7a
 80061d0:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2232      	movs	r2, #50	; 0x32
 80061d8:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2232      	movs	r2, #50	; 0x32
 80061e0:	f883 24c6 	strb.w	r2, [r3, #1222]	; 0x4c6
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	227a      	movs	r2, #122	; 0x7a
 80061e8:	f883 24c7 	strb.w	r2, [r3, #1223]	; 0x4c7
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	224a      	movs	r2, #74	; 0x4a
 80061f0:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2248      	movs	r2, #72	; 0x48
 80061f8:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2278      	movs	r2, #120	; 0x78
 8006200:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2230      	movs	r2, #48	; 0x30
 8006208:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	223a      	movs	r2, #58	; 0x3a
 8006210:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	227b      	movs	r2, #123	; 0x7b
 8006218:	f883 24cf 	strb.w	r2, [r3, #1231]	; 0x4cf
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2241      	movs	r2, #65	; 0x41
 8006220:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2241      	movs	r2, #65	; 0x41
 8006228:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	227b      	movs	r2, #123	; 0x7b
 8006230:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	227a      	movs	r2, #122	; 0x7a
 8006238:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2240      	movs	r2, #64	; 0x40
 8006240:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	223a      	movs	r2, #58	; 0x3a
 8006248:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	227a      	movs	r2, #122	; 0x7a
 8006250:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2242      	movs	r2, #66	; 0x42
 8006258:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2240      	movs	r2, #64	; 0x40
 8006260:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2278      	movs	r2, #120	; 0x78
 8006268:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2278      	movs	r2, #120	; 0x78
 8006270:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2240      	movs	r2, #64	; 0x40
 8006278:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	229a      	movs	r2, #154	; 0x9a
 8006280:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	22ba      	movs	r2, #186	; 0xba
 8006288:	f883 24df 	strb.w	r2, [r3, #1247]	; 0x4df
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	22a0      	movs	r2, #160	; 0xa0
 8006290:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	22a0      	movs	r2, #160	; 0xa0
 8006298:	f883 24e1 	strb.w	r2, [r3, #1249]	; 0x4e1
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	22fa      	movs	r2, #250	; 0xfa
 80062a0:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	227a      	movs	r2, #122	; 0x7a
 80062a8:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 24e6 	strb.w	r2, [r3, #1254]	; 0x4e6
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2219      	movs	r2, #25
 80062b8:	f883 24e7 	strb.w	r2, [r3, #1255]	; 0x4e7
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	223c      	movs	r2, #60	; 0x3c
 80062c0:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2266      	movs	r2, #102	; 0x66
 80062c8:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2266      	movs	r2, #102	; 0x66
 80062d0:	f883 24ea 	strb.w	r2, [r3, #1258]	; 0x4ea
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	223c      	movs	r2, #60	; 0x3c
 80062d8:	f883 24eb 	strb.w	r2, [r3, #1259]	; 0x4eb
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2219      	movs	r2, #25
 80062e0:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 24ed 	strb.w	r2, [r3, #1261]	; 0x4ed
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	223d      	movs	r2, #61	; 0x3d
 80062f0:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	227d      	movs	r2, #125	; 0x7d
 80062f8:	f883 24ef 	strb.w	r2, [r3, #1263]	; 0x4ef
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2240      	movs	r2, #64	; 0x40
 8006300:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2240      	movs	r2, #64	; 0x40
 8006308:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	227d      	movs	r2, #125	; 0x7d
 8006310:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	223d      	movs	r2, #61	; 0x3d
 8006318:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2218      	movs	r2, #24
 8006320:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	223c      	movs	r2, #60	; 0x3c
 8006328:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2224      	movs	r2, #36	; 0x24
 8006330:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	22e7      	movs	r2, #231	; 0xe7
 8006338:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	22e7      	movs	r2, #231	; 0xe7
 8006340:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2224      	movs	r2, #36	; 0x24
 8006348:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2224      	movs	r2, #36	; 0x24
 8006350:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2268      	movs	r2, #104	; 0x68
 8006358:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	227e      	movs	r2, #126	; 0x7e
 8006360:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	227f      	movs	r2, #127	; 0x7f
 8006368:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2249      	movs	r2, #73	; 0x49
 8006370:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2243      	movs	r2, #67	; 0x43
 8006378:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2266      	movs	r2, #102	; 0x66
 8006380:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	222b      	movs	r2, #43	; 0x2b
 8006390:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	222f      	movs	r2, #47	; 0x2f
 8006398:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	22fc      	movs	r2, #252	; 0xfc
 80063a0:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	22fc      	movs	r2, #252	; 0xfc
 80063a8:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	222f      	movs	r2, #47	; 0x2f
 80063b0:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	222b      	movs	r2, #43	; 0x2b
 80063b8:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	22ff      	movs	r2, #255	; 0xff
 80063c0:	f883 250e 	strb.w	r2, [r3, #1294]	; 0x50e
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	22ff      	movs	r2, #255	; 0xff
 80063c8:	f883 250f 	strb.w	r2, [r3, #1295]	; 0x50f
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2209      	movs	r2, #9
 80063d0:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2209      	movs	r2, #9
 80063d8:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	222f      	movs	r2, #47	; 0x2f
 80063e0:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	22f6      	movs	r2, #246	; 0xf6
 80063e8:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	22f8      	movs	r2, #248	; 0xf8
 80063f0:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	22a0      	movs	r2, #160	; 0xa0
 80063f8:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2240      	movs	r2, #64	; 0x40
 8006400:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	22c0      	movs	r2, #192	; 0xc0
 8006408:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2288      	movs	r2, #136	; 0x88
 8006410:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	22fe      	movs	r2, #254	; 0xfe
 8006418:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	227f      	movs	r2, #127	; 0x7f
 8006420:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2209      	movs	r2, #9
 8006428:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2203      	movs	r2, #3
 8006430:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2274      	movs	r2, #116	; 0x74
 8006448:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2254      	movs	r2, #84	; 0x54
 8006450:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2255      	movs	r2, #85	; 0x55
 8006458:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	227d      	movs	r2, #125	; 0x7d
 8006460:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2279      	movs	r2, #121	; 0x79
 8006468:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2240      	movs	r2, #64	; 0x40
 8006470:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2244      	movs	r2, #68	; 0x44
 8006478:	f883 2527 	strb.w	r2, [r3, #1319]	; 0x527
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	227d      	movs	r2, #125	; 0x7d
 8006480:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	227d      	movs	r2, #125	; 0x7d
 8006488:	f883 2529 	strb.w	r2, [r3, #1321]	; 0x529
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2241      	movs	r2, #65	; 0x41
 8006490:	f883 252a 	strb.w	r2, [r3, #1322]	; 0x52a
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2230      	movs	r2, #48	; 0x30
 8006498:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2278      	movs	r2, #120	; 0x78
 80064a0:	f883 252f 	strb.w	r2, [r3, #1327]	; 0x52f
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2248      	movs	r2, #72	; 0x48
 80064a8:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	224a      	movs	r2, #74	; 0x4a
 80064b0:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	227a      	movs	r2, #122	; 0x7a
 80064b8:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2232      	movs	r2, #50	; 0x32
 80064c0:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2238      	movs	r2, #56	; 0x38
 80064c8:	f883 2536 	strb.w	r2, [r3, #1334]	; 0x536
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2278      	movs	r2, #120	; 0x78
 80064d0:	f883 2537 	strb.w	r2, [r3, #1335]	; 0x537
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2240      	movs	r2, #64	; 0x40
 80064d8:	f883 2538 	strb.w	r2, [r3, #1336]	; 0x538
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2242      	movs	r2, #66	; 0x42
 80064e0:	f883 2539 	strb.w	r2, [r3, #1337]	; 0x539
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	227a      	movs	r2, #122	; 0x7a
 80064e8:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	227a      	movs	r2, #122	; 0x7a
 80064f0:	f883 253b 	strb.w	r2, [r3, #1339]	; 0x53b
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2240      	movs	r2, #64	; 0x40
 80064f8:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	227a      	movs	r2, #122	; 0x7a
 8006500:	f883 253e 	strb.w	r2, [r3, #1342]	; 0x53e
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	227a      	movs	r2, #122	; 0x7a
 8006508:	f883 253f 	strb.w	r2, [r3, #1343]	; 0x53f
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	220a      	movs	r2, #10
 8006510:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	220a      	movs	r2, #10
 8006518:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	227a      	movs	r2, #122	; 0x7a
 8006520:	f883 2542 	strb.w	r2, [r3, #1346]	; 0x542
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2270      	movs	r2, #112	; 0x70
 8006528:	f883 2543 	strb.w	r2, [r3, #1347]	; 0x543
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	227d      	movs	r2, #125	; 0x7d
 8006530:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	227d      	movs	r2, #125	; 0x7d
 8006538:	f883 2547 	strb.w	r2, [r3, #1351]	; 0x547
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2219      	movs	r2, #25
 8006540:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2231      	movs	r2, #49	; 0x31
 8006548:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	227d      	movs	r2, #125	; 0x7d
 8006550:	f883 254a 	strb.w	r2, [r3, #1354]	; 0x54a
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	227d      	movs	r2, #125	; 0x7d
 8006558:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2226      	movs	r2, #38	; 0x26
 8006560:	f883 254f 	strb.w	r2, [r3, #1359]	; 0x54f
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	222f      	movs	r2, #47	; 0x2f
 8006568:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2229      	movs	r2, #41	; 0x29
 8006570:	f883 2551 	strb.w	r2, [r3, #1361]	; 0x551
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	222f      	movs	r2, #47	; 0x2f
 8006578:	f883 2552 	strb.w	r2, [r3, #1362]	; 0x552
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	222f      	movs	r2, #47	; 0x2f
 8006580:	f883 2553 	strb.w	r2, [r3, #1363]	; 0x553
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2228      	movs	r2, #40	; 0x28
 8006588:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2226      	movs	r2, #38	; 0x26
 8006590:	f883 2557 	strb.w	r2, [r3, #1367]	; 0x557
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	222f      	movs	r2, #47	; 0x2f
 8006598:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2229      	movs	r2, #41	; 0x29
 80065a0:	f883 2559 	strb.w	r2, [r3, #1369]	; 0x559
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	222f      	movs	r2, #47	; 0x2f
 80065a8:	f883 255a 	strb.w	r2, [r3, #1370]	; 0x55a
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2226      	movs	r2, #38	; 0x26
 80065b0:	f883 255b 	strb.w	r2, [r3, #1371]	; 0x55b
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2230      	movs	r2, #48	; 0x30
 80065b8:	f883 255e 	strb.w	r2, [r3, #1374]	; 0x55e
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2278      	movs	r2, #120	; 0x78
 80065c0:	f883 255f 	strb.w	r2, [r3, #1375]	; 0x55f
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	224d      	movs	r2, #77	; 0x4d
 80065c8:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2245      	movs	r2, #69	; 0x45
 80065d0:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2260      	movs	r2, #96	; 0x60
 80065d8:	f883 2562 	strb.w	r2, [r3, #1378]	; 0x562
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f883 2563 	strb.w	r2, [r3, #1379]	; 0x563
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2238      	movs	r2, #56	; 0x38
 80065e8:	f883 2566 	strb.w	r2, [r3, #1382]	; 0x566
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2238      	movs	r2, #56	; 0x38
 80065f0:	f883 2567 	strb.w	r2, [r3, #1383]	; 0x567
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2208      	movs	r2, #8
 80065f8:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2208      	movs	r2, #8
 8006600:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2208      	movs	r2, #8
 8006608:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2208      	movs	r2, #8
 8006610:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2208      	movs	r2, #8
 8006618:	f883 256e 	strb.w	r2, [r3, #1390]	; 0x56e
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2208      	movs	r2, #8
 8006620:	f883 256f 	strb.w	r2, [r3, #1391]	; 0x56f
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2208      	movs	r2, #8
 8006628:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2208      	movs	r2, #8
 8006630:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2238      	movs	r2, #56	; 0x38
 8006638:	f883 2572 	strb.w	r2, [r3, #1394]	; 0x572
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2238      	movs	r2, #56	; 0x38
 8006640:	f883 2573 	strb.w	r2, [r3, #1395]	; 0x573
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	224f      	movs	r2, #79	; 0x4f
 8006648:	f883 2576 	strb.w	r2, [r3, #1398]	; 0x576
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	226f      	movs	r2, #111	; 0x6f
 8006650:	f883 2577 	strb.w	r2, [r3, #1399]	; 0x577
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2230      	movs	r2, #48	; 0x30
 8006658:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2218      	movs	r2, #24
 8006660:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	22cc      	movs	r2, #204	; 0xcc
 8006668:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	22ee      	movs	r2, #238	; 0xee
 8006670:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	22bb      	movs	r2, #187	; 0xbb
 8006678:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2291      	movs	r2, #145	; 0x91
 8006680:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	224f      	movs	r2, #79	; 0x4f
 8006688:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	226f      	movs	r2, #111	; 0x6f
 8006690:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2230      	movs	r2, #48	; 0x30
 8006698:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2218      	movs	r2, #24
 80066a0:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	226c      	movs	r2, #108	; 0x6c
 80066a8:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2276      	movs	r2, #118	; 0x76
 80066b0:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	22fb      	movs	r2, #251	; 0xfb
 80066b8:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	22f9      	movs	r2, #249	; 0xf9
 80066c0:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	227b      	movs	r2, #123	; 0x7b
 80066c8:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	227b      	movs	r2, #123	; 0x7b
 80066d0:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2208      	movs	r2, #8
 80066d8:	f883 258e 	strb.w	r2, [r3, #1422]	; 0x58e
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	221c      	movs	r2, #28
 80066e0:	f883 258f 	strb.w	r2, [r3, #1423]	; 0x58f
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2236      	movs	r2, #54	; 0x36
 80066e8:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2222      	movs	r2, #34	; 0x22
 80066f0:	f883 2591 	strb.w	r2, [r3, #1425]	; 0x591
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2208      	movs	r2, #8
 80066f8:	f883 2592 	strb.w	r2, [r3, #1426]	; 0x592
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	221c      	movs	r2, #28
 8006700:	f883 2593 	strb.w	r2, [r3, #1427]	; 0x593
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2236      	movs	r2, #54	; 0x36
 8006708:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2222      	movs	r2, #34	; 0x22
 8006710:	f883 2595 	strb.w	r2, [r3, #1429]	; 0x595
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2222      	movs	r2, #34	; 0x22
 8006718:	f883 2596 	strb.w	r2, [r3, #1430]	; 0x596
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2236      	movs	r2, #54	; 0x36
 8006720:	f883 2597 	strb.w	r2, [r3, #1431]	; 0x597
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	221c      	movs	r2, #28
 8006728:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2208      	movs	r2, #8
 8006730:	f883 2599 	strb.w	r2, [r3, #1433]	; 0x599
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2222      	movs	r2, #34	; 0x22
 8006738:	f883 259a 	strb.w	r2, [r3, #1434]	; 0x59a
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2236      	movs	r2, #54	; 0x36
 8006740:	f883 259b 	strb.w	r2, [r3, #1435]	; 0x59b
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	221c      	movs	r2, #28
 8006748:	f883 259c 	strb.w	r2, [r3, #1436]	; 0x59c
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2208      	movs	r2, #8
 8006750:	f883 259d 	strb.w	r2, [r3, #1437]	; 0x59d
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	22aa      	movs	r2, #170	; 0xaa
 8006758:	f883 259e 	strb.w	r2, [r3, #1438]	; 0x59e
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2255      	movs	r2, #85	; 0x55
 8006760:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	22aa      	movs	r2, #170	; 0xaa
 8006768:	f883 25a2 	strb.w	r2, [r3, #1442]	; 0x5a2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2255      	movs	r2, #85	; 0x55
 8006770:	f883 25a4 	strb.w	r2, [r3, #1444]	; 0x5a4
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	22aa      	movs	r2, #170	; 0xaa
 8006778:	f883 25a6 	strb.w	r2, [r3, #1446]	; 0x5a6
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2255      	movs	r2, #85	; 0x55
 8006780:	f883 25a7 	strb.w	r2, [r3, #1447]	; 0x5a7
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	22aa      	movs	r2, #170	; 0xaa
 8006788:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2255      	movs	r2, #85	; 0x55
 8006790:	f883 25a9 	strb.w	r2, [r3, #1449]	; 0x5a9
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	22aa      	movs	r2, #170	; 0xaa
 8006798:	f883 25aa 	strb.w	r2, [r3, #1450]	; 0x5aa
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2255      	movs	r2, #85	; 0x55
 80067a0:	f883 25ab 	strb.w	r2, [r3, #1451]	; 0x5ab
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	22aa      	movs	r2, #170	; 0xaa
 80067a8:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2255      	movs	r2, #85	; 0x55
 80067b0:	f883 25ad 	strb.w	r2, [r3, #1453]	; 0x5ad
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	22dd      	movs	r2, #221	; 0xdd
 80067b8:	f883 25ae 	strb.w	r2, [r3, #1454]	; 0x5ae
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	22ff      	movs	r2, #255	; 0xff
 80067c0:	f883 25af 	strb.w	r2, [r3, #1455]	; 0x5af
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	22aa      	movs	r2, #170	; 0xaa
 80067c8:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2277      	movs	r2, #119	; 0x77
 80067d0:	f883 25b1 	strb.w	r2, [r3, #1457]	; 0x5b1
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	22dd      	movs	r2, #221	; 0xdd
 80067d8:	f883 25b2 	strb.w	r2, [r3, #1458]	; 0x5b2
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	22aa      	movs	r2, #170	; 0xaa
 80067e0:	f883 25b3 	strb.w	r2, [r3, #1459]	; 0x5b3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	22ff      	movs	r2, #255	; 0xff
 80067e8:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2277      	movs	r2, #119	; 0x77
 80067f0:	f883 25b5 	strb.w	r2, [r3, #1461]	; 0x5b5
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	22ff      	movs	r2, #255	; 0xff
 80067f8:	f883 25b9 	strb.w	r2, [r3, #1465]	; 0x5b9
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	22ff      	movs	r2, #255	; 0xff
 8006800:	f883 25ba 	strb.w	r2, [r3, #1466]	; 0x5ba
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2210      	movs	r2, #16
 8006808:	f883 25be 	strb.w	r2, [r3, #1470]	; 0x5be
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2210      	movs	r2, #16
 8006810:	f883 25bf 	strb.w	r2, [r3, #1471]	; 0x5bf
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2210      	movs	r2, #16
 8006818:	f883 25c0 	strb.w	r2, [r3, #1472]	; 0x5c0
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	22ff      	movs	r2, #255	; 0xff
 8006820:	f883 25c1 	strb.w	r2, [r3, #1473]	; 0x5c1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	22ff      	movs	r2, #255	; 0xff
 8006828:	f883 25c2 	strb.w	r2, [r3, #1474]	; 0x5c2
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2214      	movs	r2, #20
 8006830:	f883 25c6 	strb.w	r2, [r3, #1478]	; 0x5c6
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2214      	movs	r2, #20
 8006838:	f883 25c7 	strb.w	r2, [r3, #1479]	; 0x5c7
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2214      	movs	r2, #20
 8006840:	f883 25c8 	strb.w	r2, [r3, #1480]	; 0x5c8
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	22ff      	movs	r2, #255	; 0xff
 8006848:	f883 25c9 	strb.w	r2, [r3, #1481]	; 0x5c9
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	22ff      	movs	r2, #255	; 0xff
 8006850:	f883 25ca 	strb.w	r2, [r3, #1482]	; 0x5ca
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2210      	movs	r2, #16
 8006858:	f883 25ce 	strb.w	r2, [r3, #1486]	; 0x5ce
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2210      	movs	r2, #16
 8006860:	f883 25cf 	strb.w	r2, [r3, #1487]	; 0x5cf
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	22ff      	movs	r2, #255	; 0xff
 8006868:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	22ff      	movs	r2, #255	; 0xff
 8006870:	f883 25d1 	strb.w	r2, [r3, #1489]	; 0x5d1
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	22ff      	movs	r2, #255	; 0xff
 8006878:	f883 25d3 	strb.w	r2, [r3, #1491]	; 0x5d3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	22ff      	movs	r2, #255	; 0xff
 8006880:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2210      	movs	r2, #16
 8006888:	f883 25d6 	strb.w	r2, [r3, #1494]	; 0x5d6
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2210      	movs	r2, #16
 8006890:	f883 25d7 	strb.w	r2, [r3, #1495]	; 0x5d7
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	22f0      	movs	r2, #240	; 0xf0
 8006898:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	22f0      	movs	r2, #240	; 0xf0
 80068a0:	f883 25d9 	strb.w	r2, [r3, #1497]	; 0x5d9
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2210      	movs	r2, #16
 80068a8:	f883 25da 	strb.w	r2, [r3, #1498]	; 0x5da
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	22f0      	movs	r2, #240	; 0xf0
 80068b0:	f883 25db 	strb.w	r2, [r3, #1499]	; 0x5db
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	22f0      	movs	r2, #240	; 0xf0
 80068b8:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2214      	movs	r2, #20
 80068c0:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2214      	movs	r2, #20
 80068c8:	f883 25df 	strb.w	r2, [r3, #1503]	; 0x5df
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2214      	movs	r2, #20
 80068d0:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	22fc      	movs	r2, #252	; 0xfc
 80068d8:	f883 25e1 	strb.w	r2, [r3, #1505]	; 0x5e1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	22fc      	movs	r2, #252	; 0xfc
 80068e0:	f883 25e2 	strb.w	r2, [r3, #1506]	; 0x5e2
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2214      	movs	r2, #20
 80068e8:	f883 25e6 	strb.w	r2, [r3, #1510]	; 0x5e6
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2214      	movs	r2, #20
 80068f0:	f883 25e7 	strb.w	r2, [r3, #1511]	; 0x5e7
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	22f7      	movs	r2, #247	; 0xf7
 80068f8:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	22f7      	movs	r2, #247	; 0xf7
 8006900:	f883 25e9 	strb.w	r2, [r3, #1513]	; 0x5e9
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	22ff      	movs	r2, #255	; 0xff
 8006908:	f883 25eb 	strb.w	r2, [r3, #1515]	; 0x5eb
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	22ff      	movs	r2, #255	; 0xff
 8006910:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	22ff      	movs	r2, #255	; 0xff
 8006918:	f883 25f0 	strb.w	r2, [r3, #1520]	; 0x5f0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	22ff      	movs	r2, #255	; 0xff
 8006920:	f883 25f1 	strb.w	r2, [r3, #1521]	; 0x5f1
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	22ff      	movs	r2, #255	; 0xff
 8006928:	f883 25f3 	strb.w	r2, [r3, #1523]	; 0x5f3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	22ff      	movs	r2, #255	; 0xff
 8006930:	f883 25f4 	strb.w	r2, [r3, #1524]	; 0x5f4
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2214      	movs	r2, #20
 8006938:	f883 25f6 	strb.w	r2, [r3, #1526]	; 0x5f6
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2214      	movs	r2, #20
 8006940:	f883 25f7 	strb.w	r2, [r3, #1527]	; 0x5f7
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	22f4      	movs	r2, #244	; 0xf4
 8006948:	f883 25f8 	strb.w	r2, [r3, #1528]	; 0x5f8
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	22f4      	movs	r2, #244	; 0xf4
 8006950:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2204      	movs	r2, #4
 8006958:	f883 25fa 	strb.w	r2, [r3, #1530]	; 0x5fa
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	22fc      	movs	r2, #252	; 0xfc
 8006960:	f883 25fb 	strb.w	r2, [r3, #1531]	; 0x5fb
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	22fc      	movs	r2, #252	; 0xfc
 8006968:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2214      	movs	r2, #20
 8006970:	f883 25fe 	strb.w	r2, [r3, #1534]	; 0x5fe
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2214      	movs	r2, #20
 8006978:	f883 25ff 	strb.w	r2, [r3, #1535]	; 0x5ff
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2217      	movs	r2, #23
 8006980:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2217      	movs	r2, #23
 8006988:	f883 2601 	strb.w	r2, [r3, #1537]	; 0x601
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2210      	movs	r2, #16
 8006990:	f883 2602 	strb.w	r2, [r3, #1538]	; 0x602
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	221f      	movs	r2, #31
 8006998:	f883 2603 	strb.w	r2, [r3, #1539]	; 0x603
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	221f      	movs	r2, #31
 80069a0:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2210      	movs	r2, #16
 80069a8:	f883 2606 	strb.w	r2, [r3, #1542]	; 0x606
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2210      	movs	r2, #16
 80069b0:	f883 2607 	strb.w	r2, [r3, #1543]	; 0x607
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	221f      	movs	r2, #31
 80069b8:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	221f      	movs	r2, #31
 80069c0:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2210      	movs	r2, #16
 80069c8:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	221f      	movs	r2, #31
 80069d0:	f883 260b 	strb.w	r2, [r3, #1547]	; 0x60b
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	221f      	movs	r2, #31
 80069d8:	f883 260c 	strb.w	r2, [r3, #1548]	; 0x60c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2214      	movs	r2, #20
 80069e0:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2214      	movs	r2, #20
 80069e8:	f883 260f 	strb.w	r2, [r3, #1551]	; 0x60f
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2214      	movs	r2, #20
 80069f0:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	221f      	movs	r2, #31
 80069f8:	f883 2611 	strb.w	r2, [r3, #1553]	; 0x611
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	221f      	movs	r2, #31
 8006a00:	f883 2612 	strb.w	r2, [r3, #1554]	; 0x612
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2210      	movs	r2, #16
 8006a08:	f883 2616 	strb.w	r2, [r3, #1558]	; 0x616
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2210      	movs	r2, #16
 8006a10:	f883 2617 	strb.w	r2, [r3, #1559]	; 0x617
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2210      	movs	r2, #16
 8006a18:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	22f0      	movs	r2, #240	; 0xf0
 8006a20:	f883 2619 	strb.w	r2, [r3, #1561]	; 0x619
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	22f0      	movs	r2, #240	; 0xf0
 8006a28:	f883 261a 	strb.w	r2, [r3, #1562]	; 0x61a
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	221f      	movs	r2, #31
 8006a30:	f883 2621 	strb.w	r2, [r3, #1569]	; 0x621
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	221f      	movs	r2, #31
 8006a38:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2210      	movs	r2, #16
 8006a40:	f883 2623 	strb.w	r2, [r3, #1571]	; 0x623
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2210      	movs	r2, #16
 8006a48:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2210      	movs	r2, #16
 8006a50:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2210      	movs	r2, #16
 8006a58:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2210      	movs	r2, #16
 8006a60:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2210      	movs	r2, #16
 8006a68:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	221f      	movs	r2, #31
 8006a70:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	221f      	movs	r2, #31
 8006a78:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2210      	movs	r2, #16
 8006a80:	f883 262b 	strb.w	r2, [r3, #1579]	; 0x62b
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2210      	movs	r2, #16
 8006a88:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2210      	movs	r2, #16
 8006a90:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2210      	movs	r2, #16
 8006a98:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2210      	movs	r2, #16
 8006aa0:	f883 262f 	strb.w	r2, [r3, #1583]	; 0x62f
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	f883 2630 	strb.w	r2, [r3, #1584]	; 0x630
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	22f0      	movs	r2, #240	; 0xf0
 8006ab0:	f883 2631 	strb.w	r2, [r3, #1585]	; 0x631
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	22f0      	movs	r2, #240	; 0xf0
 8006ab8:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2210      	movs	r2, #16
 8006ac0:	f883 2633 	strb.w	r2, [r3, #1587]	; 0x633
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2210      	movs	r2, #16
 8006ac8:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2210      	movs	r2, #16
 8006ad0:	f883 2635 	strb.w	r2, [r3, #1589]	; 0x635
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	22ff      	movs	r2, #255	; 0xff
 8006ad8:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	22ff      	movs	r2, #255	; 0xff
 8006ae0:	f883 263a 	strb.w	r2, [r3, #1594]	; 0x63a
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2210      	movs	r2, #16
 8006ae8:	f883 263b 	strb.w	r2, [r3, #1595]	; 0x63b
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2210      	movs	r2, #16
 8006af0:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2210      	movs	r2, #16
 8006af8:	f883 263d 	strb.w	r2, [r3, #1597]	; 0x63d
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2210      	movs	r2, #16
 8006b00:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2210      	movs	r2, #16
 8006b08:	f883 263f 	strb.w	r2, [r3, #1599]	; 0x63f
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2210      	movs	r2, #16
 8006b10:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2210      	movs	r2, #16
 8006b18:	f883 2641 	strb.w	r2, [r3, #1601]	; 0x641
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2210      	movs	r2, #16
 8006b20:	f883 2642 	strb.w	r2, [r3, #1602]	; 0x642
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2210      	movs	r2, #16
 8006b28:	f883 2643 	strb.w	r2, [r3, #1603]	; 0x643
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2210      	movs	r2, #16
 8006b30:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2210      	movs	r2, #16
 8006b38:	f883 2645 	strb.w	r2, [r3, #1605]	; 0x645
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2210      	movs	r2, #16
 8006b40:	f883 2646 	strb.w	r2, [r3, #1606]	; 0x646
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2210      	movs	r2, #16
 8006b48:	f883 2647 	strb.w	r2, [r3, #1607]	; 0x647
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2210      	movs	r2, #16
 8006b50:	f883 2648 	strb.w	r2, [r3, #1608]	; 0x648
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	22ff      	movs	r2, #255	; 0xff
 8006b58:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	22ff      	movs	r2, #255	; 0xff
 8006b60:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2210      	movs	r2, #16
 8006b68:	f883 264b 	strb.w	r2, [r3, #1611]	; 0x64b
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2210      	movs	r2, #16
 8006b70:	f883 264c 	strb.w	r2, [r3, #1612]	; 0x64c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2210      	movs	r2, #16
 8006b78:	f883 264d 	strb.w	r2, [r3, #1613]	; 0x64d
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	22ff      	movs	r2, #255	; 0xff
 8006b80:	f883 2651 	strb.w	r2, [r3, #1617]	; 0x651
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	22ff      	movs	r2, #255	; 0xff
 8006b88:	f883 2652 	strb.w	r2, [r3, #1618]	; 0x652
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2214      	movs	r2, #20
 8006b90:	f883 2653 	strb.w	r2, [r3, #1619]	; 0x653
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2214      	movs	r2, #20
 8006b98:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2214      	movs	r2, #20
 8006ba0:	f883 2655 	strb.w	r2, [r3, #1621]	; 0x655
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	22ff      	movs	r2, #255	; 0xff
 8006ba8:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	22ff      	movs	r2, #255	; 0xff
 8006bb0:	f883 2659 	strb.w	r2, [r3, #1625]	; 0x659
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	22ff      	movs	r2, #255	; 0xff
 8006bb8:	f883 265b 	strb.w	r2, [r3, #1627]	; 0x65b
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	22ff      	movs	r2, #255	; 0xff
 8006bc0:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	221f      	movs	r2, #31
 8006bd0:	f883 2660 	strb.w	r2, [r3, #1632]	; 0x660
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	221f      	movs	r2, #31
 8006bd8:	f883 2661 	strb.w	r2, [r3, #1633]	; 0x661
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2210      	movs	r2, #16
 8006be0:	f883 2662 	strb.w	r2, [r3, #1634]	; 0x662
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2217      	movs	r2, #23
 8006be8:	f883 2663 	strb.w	r2, [r3, #1635]	; 0x663
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2217      	movs	r2, #23
 8006bf0:	f883 2664 	strb.w	r2, [r3, #1636]	; 0x664
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2214      	movs	r2, #20
 8006bf8:	f883 2665 	strb.w	r2, [r3, #1637]	; 0x665
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	22fc      	movs	r2, #252	; 0xfc
 8006c00:	f883 2668 	strb.w	r2, [r3, #1640]	; 0x668
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	22fc      	movs	r2, #252	; 0xfc
 8006c08:	f883 2669 	strb.w	r2, [r3, #1641]	; 0x669
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2204      	movs	r2, #4
 8006c10:	f883 266a 	strb.w	r2, [r3, #1642]	; 0x66a
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	22f4      	movs	r2, #244	; 0xf4
 8006c18:	f883 266b 	strb.w	r2, [r3, #1643]	; 0x66b
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	22f4      	movs	r2, #244	; 0xf4
 8006c20:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2214      	movs	r2, #20
 8006c28:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2214      	movs	r2, #20
 8006c30:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2214      	movs	r2, #20
 8006c38:	f883 266f 	strb.w	r2, [r3, #1647]	; 0x66f
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2217      	movs	r2, #23
 8006c40:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2217      	movs	r2, #23
 8006c48:	f883 2671 	strb.w	r2, [r3, #1649]	; 0x671
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2210      	movs	r2, #16
 8006c50:	f883 2672 	strb.w	r2, [r3, #1650]	; 0x672
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2217      	movs	r2, #23
 8006c58:	f883 2673 	strb.w	r2, [r3, #1651]	; 0x673
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2217      	movs	r2, #23
 8006c60:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2214      	movs	r2, #20
 8006c68:	f883 2675 	strb.w	r2, [r3, #1653]	; 0x675
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2214      	movs	r2, #20
 8006c70:	f883 2676 	strb.w	r2, [r3, #1654]	; 0x676
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2214      	movs	r2, #20
 8006c78:	f883 2677 	strb.w	r2, [r3, #1655]	; 0x677
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	22f4      	movs	r2, #244	; 0xf4
 8006c80:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	22f4      	movs	r2, #244	; 0xf4
 8006c88:	f883 2679 	strb.w	r2, [r3, #1657]	; 0x679
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2204      	movs	r2, #4
 8006c90:	f883 267a 	strb.w	r2, [r3, #1658]	; 0x67a
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	22f4      	movs	r2, #244	; 0xf4
 8006c98:	f883 267b 	strb.w	r2, [r3, #1659]	; 0x67b
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	22f4      	movs	r2, #244	; 0xf4
 8006ca0:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2214      	movs	r2, #20
 8006ca8:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	22ff      	movs	r2, #255	; 0xff
 8006cb0:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	22ff      	movs	r2, #255	; 0xff
 8006cb8:	f883 2681 	strb.w	r2, [r3, #1665]	; 0x681
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	22f7      	movs	r2, #247	; 0xf7
 8006cc0:	f883 2683 	strb.w	r2, [r3, #1667]	; 0x683
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	22f7      	movs	r2, #247	; 0xf7
 8006cc8:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2214      	movs	r2, #20
 8006cd0:	f883 2685 	strb.w	r2, [r3, #1669]	; 0x685
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2214      	movs	r2, #20
 8006cd8:	f883 2686 	strb.w	r2, [r3, #1670]	; 0x686
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2214      	movs	r2, #20
 8006ce0:	f883 2687 	strb.w	r2, [r3, #1671]	; 0x687
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2214      	movs	r2, #20
 8006ce8:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2214      	movs	r2, #20
 8006cf0:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2214      	movs	r2, #20
 8006cf8:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2214      	movs	r2, #20
 8006d00:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2214      	movs	r2, #20
 8006d08:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2214      	movs	r2, #20
 8006d10:	f883 268d 	strb.w	r2, [r3, #1677]	; 0x68d
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2214      	movs	r2, #20
 8006d18:	f883 268e 	strb.w	r2, [r3, #1678]	; 0x68e
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2214      	movs	r2, #20
 8006d20:	f883 268f 	strb.w	r2, [r3, #1679]	; 0x68f
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	22f7      	movs	r2, #247	; 0xf7
 8006d28:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	22f7      	movs	r2, #247	; 0xf7
 8006d30:	f883 2691 	strb.w	r2, [r3, #1681]	; 0x691
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	22f7      	movs	r2, #247	; 0xf7
 8006d38:	f883 2693 	strb.w	r2, [r3, #1683]	; 0x693
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	22f7      	movs	r2, #247	; 0xf7
 8006d40:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2214      	movs	r2, #20
 8006d48:	f883 2695 	strb.w	r2, [r3, #1685]	; 0x695
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2214      	movs	r2, #20
 8006d50:	f883 2696 	strb.w	r2, [r3, #1686]	; 0x696
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2214      	movs	r2, #20
 8006d58:	f883 2697 	strb.w	r2, [r3, #1687]	; 0x697
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2214      	movs	r2, #20
 8006d60:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2217      	movs	r2, #23
 8006d68:	f883 2699 	strb.w	r2, [r3, #1689]	; 0x699
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2217      	movs	r2, #23
 8006d70:	f883 269a 	strb.w	r2, [r3, #1690]	; 0x69a
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2214      	movs	r2, #20
 8006d78:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2214      	movs	r2, #20
 8006d80:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2214      	movs	r2, #20
 8006d88:	f883 269d 	strb.w	r2, [r3, #1693]	; 0x69d
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2210      	movs	r2, #16
 8006d90:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2210      	movs	r2, #16
 8006d98:	f883 269f 	strb.w	r2, [r3, #1695]	; 0x69f
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	221f      	movs	r2, #31
 8006da0:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	221f      	movs	r2, #31
 8006da8:	f883 26a1 	strb.w	r2, [r3, #1697]	; 0x6a1
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2210      	movs	r2, #16
 8006db0:	f883 26a2 	strb.w	r2, [r3, #1698]	; 0x6a2
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	221f      	movs	r2, #31
 8006db8:	f883 26a3 	strb.w	r2, [r3, #1699]	; 0x6a3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	221f      	movs	r2, #31
 8006dc0:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2210      	movs	r2, #16
 8006dc8:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2214      	movs	r2, #20
 8006dd0:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2214      	movs	r2, #20
 8006dd8:	f883 26a7 	strb.w	r2, [r3, #1703]	; 0x6a7
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2214      	movs	r2, #20
 8006de0:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	22f4      	movs	r2, #244	; 0xf4
 8006de8:	f883 26a9 	strb.w	r2, [r3, #1705]	; 0x6a9
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	22f4      	movs	r2, #244	; 0xf4
 8006df0:	f883 26aa 	strb.w	r2, [r3, #1706]	; 0x6aa
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2214      	movs	r2, #20
 8006df8:	f883 26ab 	strb.w	r2, [r3, #1707]	; 0x6ab
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2214      	movs	r2, #20
 8006e00:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2214      	movs	r2, #20
 8006e08:	f883 26ad 	strb.w	r2, [r3, #1709]	; 0x6ad
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2210      	movs	r2, #16
 8006e10:	f883 26ae 	strb.w	r2, [r3, #1710]	; 0x6ae
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2210      	movs	r2, #16
 8006e18:	f883 26af 	strb.w	r2, [r3, #1711]	; 0x6af
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	22f0      	movs	r2, #240	; 0xf0
 8006e20:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	22f0      	movs	r2, #240	; 0xf0
 8006e28:	f883 26b1 	strb.w	r2, [r3, #1713]	; 0x6b1
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2210      	movs	r2, #16
 8006e30:	f883 26b2 	strb.w	r2, [r3, #1714]	; 0x6b2
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	22f0      	movs	r2, #240	; 0xf0
 8006e38:	f883 26b3 	strb.w	r2, [r3, #1715]	; 0x6b3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	22f0      	movs	r2, #240	; 0xf0
 8006e40:	f883 26b4 	strb.w	r2, [r3, #1716]	; 0x6b4
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2210      	movs	r2, #16
 8006e48:	f883 26b5 	strb.w	r2, [r3, #1717]	; 0x6b5
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	221f      	movs	r2, #31
 8006e50:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	221f      	movs	r2, #31
 8006e58:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2210      	movs	r2, #16
 8006e60:	f883 26ba 	strb.w	r2, [r3, #1722]	; 0x6ba
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	221f      	movs	r2, #31
 8006e68:	f883 26bb 	strb.w	r2, [r3, #1723]	; 0x6bb
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	221f      	movs	r2, #31
 8006e70:	f883 26bc 	strb.w	r2, [r3, #1724]	; 0x6bc
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2210      	movs	r2, #16
 8006e78:	f883 26bd 	strb.w	r2, [r3, #1725]	; 0x6bd
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	221f      	movs	r2, #31
 8006e80:	f883 26c1 	strb.w	r2, [r3, #1729]	; 0x6c1
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	221f      	movs	r2, #31
 8006e88:	f883 26c2 	strb.w	r2, [r3, #1730]	; 0x6c2
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2214      	movs	r2, #20
 8006e90:	f883 26c3 	strb.w	r2, [r3, #1731]	; 0x6c3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2214      	movs	r2, #20
 8006e98:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2214      	movs	r2, #20
 8006ea0:	f883 26c5 	strb.w	r2, [r3, #1733]	; 0x6c5
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	22fc      	movs	r2, #252	; 0xfc
 8006ea8:	f883 26c9 	strb.w	r2, [r3, #1737]	; 0x6c9
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	22fc      	movs	r2, #252	; 0xfc
 8006eb0:	f883 26ca 	strb.w	r2, [r3, #1738]	; 0x6ca
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2214      	movs	r2, #20
 8006eb8:	f883 26cb 	strb.w	r2, [r3, #1739]	; 0x6cb
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2214      	movs	r2, #20
 8006ec0:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2214      	movs	r2, #20
 8006ec8:	f883 26cd 	strb.w	r2, [r3, #1741]	; 0x6cd
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	22f0      	movs	r2, #240	; 0xf0
 8006ed0:	f883 26d0 	strb.w	r2, [r3, #1744]	; 0x6d0
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	22f0      	movs	r2, #240	; 0xf0
 8006ed8:	f883 26d1 	strb.w	r2, [r3, #1745]	; 0x6d1
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2210      	movs	r2, #16
 8006ee0:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	22f0      	movs	r2, #240	; 0xf0
 8006ee8:	f883 26d3 	strb.w	r2, [r3, #1747]	; 0x6d3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	22f0      	movs	r2, #240	; 0xf0
 8006ef0:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2210      	movs	r2, #16
 8006ef8:	f883 26d5 	strb.w	r2, [r3, #1749]	; 0x6d5
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2210      	movs	r2, #16
 8006f00:	f883 26d6 	strb.w	r2, [r3, #1750]	; 0x6d6
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2210      	movs	r2, #16
 8006f08:	f883 26d7 	strb.w	r2, [r3, #1751]	; 0x6d7
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	22ff      	movs	r2, #255	; 0xff
 8006f10:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	22ff      	movs	r2, #255	; 0xff
 8006f18:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2210      	movs	r2, #16
 8006f20:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	22ff      	movs	r2, #255	; 0xff
 8006f28:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	22ff      	movs	r2, #255	; 0xff
 8006f30:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2210      	movs	r2, #16
 8006f38:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2214      	movs	r2, #20
 8006f40:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2214      	movs	r2, #20
 8006f48:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2214      	movs	r2, #20
 8006f50:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	22ff      	movs	r2, #255	; 0xff
 8006f58:	f883 26e1 	strb.w	r2, [r3, #1761]	; 0x6e1
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	22ff      	movs	r2, #255	; 0xff
 8006f60:	f883 26e2 	strb.w	r2, [r3, #1762]	; 0x6e2
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2214      	movs	r2, #20
 8006f68:	f883 26e3 	strb.w	r2, [r3, #1763]	; 0x6e3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2214      	movs	r2, #20
 8006f70:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2214      	movs	r2, #20
 8006f78:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2210      	movs	r2, #16
 8006f80:	f883 26e6 	strb.w	r2, [r3, #1766]	; 0x6e6
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2210      	movs	r2, #16
 8006f88:	f883 26e7 	strb.w	r2, [r3, #1767]	; 0x6e7
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2210      	movs	r2, #16
 8006f90:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	221f      	movs	r2, #31
 8006f98:	f883 26e9 	strb.w	r2, [r3, #1769]	; 0x6e9
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	221f      	movs	r2, #31
 8006fa0:	f883 26ea 	strb.w	r2, [r3, #1770]	; 0x6ea
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	22f0      	movs	r2, #240	; 0xf0
 8006fa8:	f883 26f1 	strb.w	r2, [r3, #1777]	; 0x6f1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	22f0      	movs	r2, #240	; 0xf0
 8006fb0:	f883 26f2 	strb.w	r2, [r3, #1778]	; 0x6f2
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2210      	movs	r2, #16
 8006fb8:	f883 26f3 	strb.w	r2, [r3, #1779]	; 0x6f3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2210      	movs	r2, #16
 8006fc0:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2210      	movs	r2, #16
 8006fc8:	f883 26f5 	strb.w	r2, [r3, #1781]	; 0x6f5
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	22ff      	movs	r2, #255	; 0xff
 8006fd0:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	22ff      	movs	r2, #255	; 0xff
 8006fd8:	f883 26f7 	strb.w	r2, [r3, #1783]	; 0x6f7
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	22ff      	movs	r2, #255	; 0xff
 8006fe0:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	22ff      	movs	r2, #255	; 0xff
 8006fe8:	f883 26f9 	strb.w	r2, [r3, #1785]	; 0x6f9
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	22ff      	movs	r2, #255	; 0xff
 8006ff0:	f883 26fa 	strb.w	r2, [r3, #1786]	; 0x6fa
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	22ff      	movs	r2, #255	; 0xff
 8006ff8:	f883 26fb 	strb.w	r2, [r3, #1787]	; 0x6fb
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	22ff      	movs	r2, #255	; 0xff
 8007000:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	22ff      	movs	r2, #255	; 0xff
 8007008:	f883 26fd 	strb.w	r2, [r3, #1789]	; 0x6fd
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	22f0      	movs	r2, #240	; 0xf0
 8007010:	f883 26fe 	strb.w	r2, [r3, #1790]	; 0x6fe
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	22f0      	movs	r2, #240	; 0xf0
 8007018:	f883 26ff 	strb.w	r2, [r3, #1791]	; 0x6ff
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	22f0      	movs	r2, #240	; 0xf0
 8007020:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	22f0      	movs	r2, #240	; 0xf0
 8007028:	f883 2701 	strb.w	r2, [r3, #1793]	; 0x701
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	22f0      	movs	r2, #240	; 0xf0
 8007030:	f883 2702 	strb.w	r2, [r3, #1794]	; 0x702
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	22f0      	movs	r2, #240	; 0xf0
 8007038:	f883 2703 	strb.w	r2, [r3, #1795]	; 0x703
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	22f0      	movs	r2, #240	; 0xf0
 8007040:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	22f0      	movs	r2, #240	; 0xf0
 8007048:	f883 2705 	strb.w	r2, [r3, #1797]	; 0x705
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	22ff      	movs	r2, #255	; 0xff
 8007050:	f883 2706 	strb.w	r2, [r3, #1798]	; 0x706
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	22ff      	movs	r2, #255	; 0xff
 8007058:	f883 2707 	strb.w	r2, [r3, #1799]	; 0x707
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	22ff      	movs	r2, #255	; 0xff
 8007060:	f883 2708 	strb.w	r2, [r3, #1800]	; 0x708
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	22ff      	movs	r2, #255	; 0xff
 8007068:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	22ff      	movs	r2, #255	; 0xff
 8007070:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	22ff      	movs	r2, #255	; 0xff
 8007078:	f883 2713 	strb.w	r2, [r3, #1811]	; 0x713
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	22ff      	movs	r2, #255	; 0xff
 8007080:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	22ff      	movs	r2, #255	; 0xff
 8007088:	f883 2715 	strb.w	r2, [r3, #1813]	; 0x715
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	220f      	movs	r2, #15
 8007090:	f883 2716 	strb.w	r2, [r3, #1814]	; 0x716
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	220f      	movs	r2, #15
 8007098:	f883 2717 	strb.w	r2, [r3, #1815]	; 0x717
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	220f      	movs	r2, #15
 80070a0:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	220f      	movs	r2, #15
 80070a8:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	220f      	movs	r2, #15
 80070b0:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	220f      	movs	r2, #15
 80070b8:	f883 271b 	strb.w	r2, [r3, #1819]	; 0x71b
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	220f      	movs	r2, #15
 80070c0:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	220f      	movs	r2, #15
 80070c8:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2238      	movs	r2, #56	; 0x38
 80070d0:	f883 271e 	strb.w	r2, [r3, #1822]	; 0x71e
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	227c      	movs	r2, #124	; 0x7c
 80070d8:	f883 271f 	strb.w	r2, [r3, #1823]	; 0x71f
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2244      	movs	r2, #68	; 0x44
 80070e0:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	226c      	movs	r2, #108	; 0x6c
 80070e8:	f883 2721 	strb.w	r2, [r3, #1825]	; 0x721
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2238      	movs	r2, #56	; 0x38
 80070f0:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	226c      	movs	r2, #108	; 0x6c
 80070f8:	f883 2723 	strb.w	r2, [r3, #1827]	; 0x723
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2244      	movs	r2, #68	; 0x44
 8007100:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	22fc      	movs	r2, #252	; 0xfc
 8007108:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	22fe      	movs	r2, #254	; 0xfe
 8007110:	f883 2727 	strb.w	r2, [r3, #1831]	; 0x727
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	222a      	movs	r2, #42	; 0x2a
 8007118:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	222a      	movs	r2, #42	; 0x2a
 8007120:	f883 2729 	strb.w	r2, [r3, #1833]	; 0x729
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	223e      	movs	r2, #62	; 0x3e
 8007128:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2214      	movs	r2, #20
 8007130:	f883 272b 	strb.w	r2, [r3, #1835]	; 0x72b
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	227e      	movs	r2, #126	; 0x7e
 8007138:	f883 272e 	strb.w	r2, [r3, #1838]	; 0x72e
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	227e      	movs	r2, #126	; 0x7e
 8007140:	f883 272f 	strb.w	r2, [r3, #1839]	; 0x72f
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 2731 	strb.w	r2, [r3, #1841]	; 0x731
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2206      	movs	r2, #6
 8007158:	f883 2732 	strb.w	r2, [r3, #1842]	; 0x732
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2206      	movs	r2, #6
 8007160:	f883 2733 	strb.w	r2, [r3, #1843]	; 0x733
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 2736 	strb.w	r2, [r3, #1846]	; 0x736
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	227e      	movs	r2, #126	; 0x7e
 8007170:	f883 2737 	strb.w	r2, [r3, #1847]	; 0x737
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	227e      	movs	r2, #126	; 0x7e
 8007178:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 2739 	strb.w	r2, [r3, #1849]	; 0x739
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	227e      	movs	r2, #126	; 0x7e
 8007188:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	227e      	movs	r2, #126	; 0x7e
 8007190:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2263      	movs	r2, #99	; 0x63
 80071a0:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2277      	movs	r2, #119	; 0x77
 80071a8:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	225d      	movs	r2, #93	; 0x5d
 80071b0:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2249      	movs	r2, #73	; 0x49
 80071b8:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2263      	movs	r2, #99	; 0x63
 80071c0:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2263      	movs	r2, #99	; 0x63
 80071c8:	f883 2743 	strb.w	r2, [r3, #1859]	; 0x743
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2238      	movs	r2, #56	; 0x38
 80071d0:	f883 2746 	strb.w	r2, [r3, #1862]	; 0x746
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	227c      	movs	r2, #124	; 0x7c
 80071d8:	f883 2747 	strb.w	r2, [r3, #1863]	; 0x747
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2244      	movs	r2, #68	; 0x44
 80071e0:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	227c      	movs	r2, #124	; 0x7c
 80071e8:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	223c      	movs	r2, #60	; 0x3c
 80071f0:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2204      	movs	r2, #4
 80071f8:	f883 274b 	strb.w	r2, [r3, #1867]	; 0x74b
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2204      	movs	r2, #4
 8007200:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2280      	movs	r2, #128	; 0x80
 8007208:	f883 274e 	strb.w	r2, [r3, #1870]	; 0x74e
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	22fe      	movs	r2, #254	; 0xfe
 8007210:	f883 274f 	strb.w	r2, [r3, #1871]	; 0x74f
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	227e      	movs	r2, #126	; 0x7e
 8007218:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 2751 	strb.w	r2, [r3, #1873]	; 0x751
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2220      	movs	r2, #32
 8007228:	f883 2752 	strb.w	r2, [r3, #1874]	; 0x752
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	223e      	movs	r2, #62	; 0x3e
 8007230:	f883 2753 	strb.w	r2, [r3, #1875]	; 0x753
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	221e      	movs	r2, #30
 8007238:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2204      	movs	r2, #4
 8007240:	f883 2756 	strb.w	r2, [r3, #1878]	; 0x756
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2206      	movs	r2, #6
 8007248:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	227e      	movs	r2, #126	; 0x7e
 8007258:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	227c      	movs	r2, #124	; 0x7c
 8007260:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2206      	movs	r2, #6
 8007268:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2299      	movs	r2, #153	; 0x99
 8007278:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	22bd      	movs	r2, #189	; 0xbd
 8007280:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	22e7      	movs	r2, #231	; 0xe7
 8007288:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	22e7      	movs	r2, #231	; 0xe7
 8007290:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	22bd      	movs	r2, #189	; 0xbd
 8007298:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2299      	movs	r2, #153	; 0x99
 80072a0:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	221c      	movs	r2, #28
 80072a8:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	223e      	movs	r2, #62	; 0x3e
 80072b0:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	226b      	movs	r2, #107	; 0x6b
 80072b8:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2249      	movs	r2, #73	; 0x49
 80072c0:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	226b      	movs	r2, #107	; 0x6b
 80072c8:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	223e      	movs	r2, #62	; 0x3e
 80072d0:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	221c      	movs	r2, #28
 80072d8:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	224c      	movs	r2, #76	; 0x4c
 80072e0:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	227e      	movs	r2, #126	; 0x7e
 80072e8:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2273      	movs	r2, #115	; 0x73
 80072f0:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2273      	movs	r2, #115	; 0x73
 8007300:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	227e      	movs	r2, #126	; 0x7e
 8007308:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	224c      	movs	r2, #76	; 0x4c
 8007310:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2230      	movs	r2, #48	; 0x30
 8007318:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2278      	movs	r2, #120	; 0x78
 8007320:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	224a      	movs	r2, #74	; 0x4a
 8007328:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	224f      	movs	r2, #79	; 0x4f
 8007330:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	227d      	movs	r2, #125	; 0x7d
 8007338:	f883 277a 	strb.w	r2, [r3, #1914]	; 0x77a
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2239      	movs	r2, #57	; 0x39
 8007340:	f883 277b 	strb.w	r2, [r3, #1915]	; 0x77b
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2218      	movs	r2, #24
 8007348:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	223c      	movs	r2, #60	; 0x3c
 8007350:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2224      	movs	r2, #36	; 0x24
 8007358:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	223c      	movs	r2, #60	; 0x3c
 8007360:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	223c      	movs	r2, #60	; 0x3c
 8007368:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2224      	movs	r2, #36	; 0x24
 8007370:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	223c      	movs	r2, #60	; 0x3c
 8007378:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2218      	movs	r2, #24
 8007380:	f883 2785 	strb.w	r2, [r3, #1925]	; 0x785
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2298      	movs	r2, #152	; 0x98
 8007388:	f883 2786 	strb.w	r2, [r3, #1926]	; 0x786
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	22fc      	movs	r2, #252	; 0xfc
 8007390:	f883 2787 	strb.w	r2, [r3, #1927]	; 0x787
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2264      	movs	r2, #100	; 0x64
 8007398:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	223c      	movs	r2, #60	; 0x3c
 80073a0:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	223e      	movs	r2, #62	; 0x3e
 80073a8:	f883 278a 	strb.w	r2, [r3, #1930]	; 0x78a
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2227      	movs	r2, #39	; 0x27
 80073b0:	f883 278b 	strb.w	r2, [r3, #1931]	; 0x78b
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	223d      	movs	r2, #61	; 0x3d
 80073b8:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2218      	movs	r2, #24
 80073c0:	f883 278d 	strb.w	r2, [r3, #1933]	; 0x78d
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	221c      	movs	r2, #28
 80073c8:	f883 278e 	strb.w	r2, [r3, #1934]	; 0x78e
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	223e      	movs	r2, #62	; 0x3e
 80073d0:	f883 278f 	strb.w	r2, [r3, #1935]	; 0x78f
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	226b      	movs	r2, #107	; 0x6b
 80073d8:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2249      	movs	r2, #73	; 0x49
 80073e0:	f883 2791 	strb.w	r2, [r3, #1937]	; 0x791
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2249      	movs	r2, #73	; 0x49
 80073e8:	f883 2792 	strb.w	r2, [r3, #1938]	; 0x792
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	227e      	movs	r2, #126	; 0x7e
 80073f0:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	227f      	movs	r2, #127	; 0x7f
 80073f8:	f883 2797 	strb.w	r2, [r3, #1943]	; 0x797
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2799 	strb.w	r2, [r3, #1945]	; 0x799
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	227f      	movs	r2, #127	; 0x7f
 8007410:	f883 279a 	strb.w	r2, [r3, #1946]	; 0x79a
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	227e      	movs	r2, #126	; 0x7e
 8007418:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	222a      	movs	r2, #42	; 0x2a
 8007420:	f883 279e 	strb.w	r2, [r3, #1950]	; 0x79e
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	222a      	movs	r2, #42	; 0x2a
 8007428:	f883 279f 	strb.w	r2, [r3, #1951]	; 0x79f
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	222a      	movs	r2, #42	; 0x2a
 8007430:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	222a      	movs	r2, #42	; 0x2a
 8007438:	f883 27a1 	strb.w	r2, [r3, #1953]	; 0x7a1
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	222a      	movs	r2, #42	; 0x2a
 8007440:	f883 27a2 	strb.w	r2, [r3, #1954]	; 0x7a2
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	222a      	movs	r2, #42	; 0x2a
 8007448:	f883 27a3 	strb.w	r2, [r3, #1955]	; 0x7a3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2244      	movs	r2, #68	; 0x44
 8007450:	f883 27a6 	strb.w	r2, [r3, #1958]	; 0x7a6
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2244      	movs	r2, #68	; 0x44
 8007458:	f883 27a7 	strb.w	r2, [r3, #1959]	; 0x7a7
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	225f      	movs	r2, #95	; 0x5f
 8007460:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	225f      	movs	r2, #95	; 0x5f
 8007468:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2244      	movs	r2, #68	; 0x44
 8007470:	f883 27aa 	strb.w	r2, [r3, #1962]	; 0x7aa
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2244      	movs	r2, #68	; 0x44
 8007478:	f883 27ab 	strb.w	r2, [r3, #1963]	; 0x7ab
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2240      	movs	r2, #64	; 0x40
 8007480:	f883 27ae 	strb.w	r2, [r3, #1966]	; 0x7ae
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2251      	movs	r2, #81	; 0x51
 8007488:	f883 27af 	strb.w	r2, [r3, #1967]	; 0x7af
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	225b      	movs	r2, #91	; 0x5b
 8007490:	f883 27b0 	strb.w	r2, [r3, #1968]	; 0x7b0
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	224e      	movs	r2, #78	; 0x4e
 8007498:	f883 27b1 	strb.w	r2, [r3, #1969]	; 0x7b1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2244      	movs	r2, #68	; 0x44
 80074a0:	f883 27b2 	strb.w	r2, [r3, #1970]	; 0x7b2
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2240      	movs	r2, #64	; 0x40
 80074a8:	f883 27b3 	strb.w	r2, [r3, #1971]	; 0x7b3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2240      	movs	r2, #64	; 0x40
 80074b0:	f883 27b6 	strb.w	r2, [r3, #1974]	; 0x7b6
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2244      	movs	r2, #68	; 0x44
 80074b8:	f883 27b7 	strb.w	r2, [r3, #1975]	; 0x7b7
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	224e      	movs	r2, #78	; 0x4e
 80074c0:	f883 27b8 	strb.w	r2, [r3, #1976]	; 0x7b8
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	225b      	movs	r2, #91	; 0x5b
 80074c8:	f883 27b9 	strb.w	r2, [r3, #1977]	; 0x7b9
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2251      	movs	r2, #81	; 0x51
 80074d0:	f883 27ba 	strb.w	r2, [r3, #1978]	; 0x7ba
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2240      	movs	r2, #64	; 0x40
 80074d8:	f883 27bb 	strb.w	r2, [r3, #1979]	; 0x7bb
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	22fe      	movs	r2, #254	; 0xfe
 80074e0:	f883 27c1 	strb.w	r2, [r3, #1985]	; 0x7c1
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	22ff      	movs	r2, #255	; 0xff
 80074e8:	f883 27c2 	strb.w	r2, [r3, #1986]	; 0x7c2
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 27c3 	strb.w	r2, [r3, #1987]	; 0x7c3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2207      	movs	r2, #7
 80074f8:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2206      	movs	r2, #6
 8007500:	f883 27c5 	strb.w	r2, [r3, #1989]	; 0x7c5
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2260      	movs	r2, #96	; 0x60
 8007508:	f883 27c6 	strb.w	r2, [r3, #1990]	; 0x7c6
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	22e0      	movs	r2, #224	; 0xe0
 8007510:	f883 27c7 	strb.w	r2, [r3, #1991]	; 0x7c7
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2280      	movs	r2, #128	; 0x80
 8007518:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	22ff      	movs	r2, #255	; 0xff
 8007520:	f883 27c9 	strb.w	r2, [r3, #1993]	; 0x7c9
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	227f      	movs	r2, #127	; 0x7f
 8007528:	f883 27ca 	strb.w	r2, [r3, #1994]	; 0x7ca
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2208      	movs	r2, #8
 8007530:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2208      	movs	r2, #8
 8007538:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	226b      	movs	r2, #107	; 0x6b
 8007540:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	226b      	movs	r2, #107	; 0x6b
 8007548:	f883 27d1 	strb.w	r2, [r3, #2001]	; 0x7d1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2208      	movs	r2, #8
 8007550:	f883 27d2 	strb.w	r2, [r3, #2002]	; 0x7d2
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2208      	movs	r2, #8
 8007558:	f883 27d3 	strb.w	r2, [r3, #2003]	; 0x7d3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2224      	movs	r2, #36	; 0x24
 8007560:	f883 27d6 	strb.w	r2, [r3, #2006]	; 0x7d6
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2236      	movs	r2, #54	; 0x36
 8007568:	f883 27d7 	strb.w	r2, [r3, #2007]	; 0x7d7
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2212      	movs	r2, #18
 8007570:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2236      	movs	r2, #54	; 0x36
 8007578:	f883 27d9 	strb.w	r2, [r3, #2009]	; 0x7d9
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2224      	movs	r2, #36	; 0x24
 8007580:	f883 27da 	strb.w	r2, [r3, #2010]	; 0x7da
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2236      	movs	r2, #54	; 0x36
 8007588:	f883 27db 	strb.w	r2, [r3, #2011]	; 0x7db
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2212      	movs	r2, #18
 8007590:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2206      	movs	r2, #6
 8007598:	f883 27df 	strb.w	r2, [r3, #2015]	; 0x7df
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	220f      	movs	r2, #15
 80075a0:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2209      	movs	r2, #9
 80075a8:	f883 27e1 	strb.w	r2, [r3, #2017]	; 0x7e1
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	220f      	movs	r2, #15
 80075b0:	f883 27e2 	strb.w	r2, [r3, #2018]	; 0x7e2
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2206      	movs	r2, #6
 80075b8:	f883 27e3 	strb.w	r2, [r3, #2019]	; 0x7e3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2218      	movs	r2, #24
 80075c0:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2218      	movs	r2, #24
 80075c8:	f883 27ea 	strb.w	r2, [r3, #2026]	; 0x7ea
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2210      	movs	r2, #16
 80075d0:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2210      	movs	r2, #16
 80075d8:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2210      	movs	r2, #16
 80075e0:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2230      	movs	r2, #48	; 0x30
 80075e8:	f883 27f7 	strb.w	r2, [r3, #2039]	; 0x7f7
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2270      	movs	r2, #112	; 0x70
 80075f0:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	22c0      	movs	r2, #192	; 0xc0
 80075f8:	f883 27f9 	strb.w	r2, [r3, #2041]	; 0x7f9
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	22ff      	movs	r2, #255	; 0xff
 8007600:	f883 27fa 	strb.w	r2, [r3, #2042]	; 0x7fa
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	22ff      	movs	r2, #255	; 0xff
 8007608:	f883 27fb 	strb.w	r2, [r3, #2043]	; 0x7fb
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 27fd 	strb.w	r2, [r3, #2045]	; 0x7fd
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	221f      	movs	r2, #31
 8007620:	f883 27ff 	strb.w	r2, [r3, #2047]	; 0x7ff
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	221f      	movs	r2, #31
 8007628:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	221f      	movs	r2, #31
 8007638:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	221e      	movs	r2, #30
 8007640:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2219      	movs	r2, #25
 8007648:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	221d      	movs	r2, #29
 8007650:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2217      	movs	r2, #23
 8007658:	f883 2809 	strb.w	r2, [r3, #2057]	; 0x809
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2212      	movs	r2, #18
 8007660:	f883 280a 	strb.w	r2, [r3, #2058]	; 0x80a
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	223c      	movs	r2, #60	; 0x3c
 8007668:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	223c      	movs	r2, #60	; 0x3c
 8007670:	f883 2811 	strb.w	r2, [r3, #2065]	; 0x811
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	223c      	movs	r2, #60	; 0x3c
 8007678:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	223c      	movs	r2, #60	; 0x3c
 8007680:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f603 0326 	addw	r3, r3, #2086	; 0x826
 800768a:	f240 12db 	movw	r2, #475	; 0x1db
 800768e:	2100      	movs	r1, #0
 8007690:	4618      	mov	r0, r3
 8007692:	f006 fc15 	bl	800dec0 <memset>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	225f      	movs	r2, #95	; 0x5f
 800769a:	f883 282d 	strb.w	r2, [r3, #2093]	; 0x82d
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2207      	movs	r2, #7
 80076a2:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2207      	movs	r2, #7
 80076aa:	f883 2833 	strb.w	r2, [r3, #2099]	; 0x833
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2214      	movs	r2, #20
 80076b2:	f883 2835 	strb.w	r2, [r3, #2101]	; 0x835
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	227f      	movs	r2, #127	; 0x7f
 80076ba:	f883 2836 	strb.w	r2, [r3, #2102]	; 0x836
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2214      	movs	r2, #20
 80076c2:	f883 2837 	strb.w	r2, [r3, #2103]	; 0x837
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	227f      	movs	r2, #127	; 0x7f
 80076ca:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2214      	movs	r2, #20
 80076d2:	f883 2839 	strb.w	r2, [r3, #2105]	; 0x839
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2224      	movs	r2, #36	; 0x24
 80076da:	f883 283a 	strb.w	r2, [r3, #2106]	; 0x83a
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	222a      	movs	r2, #42	; 0x2a
 80076e2:	f883 283b 	strb.w	r2, [r3, #2107]	; 0x83b
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	227f      	movs	r2, #127	; 0x7f
 80076ea:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	222a      	movs	r2, #42	; 0x2a
 80076f2:	f883 283d 	strb.w	r2, [r3, #2109]	; 0x83d
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2212      	movs	r2, #18
 80076fa:	f883 283e 	strb.w	r2, [r3, #2110]	; 0x83e
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2223      	movs	r2, #35	; 0x23
 8007702:	f883 283f 	strb.w	r2, [r3, #2111]	; 0x83f
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2213      	movs	r2, #19
 800770a:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2208      	movs	r2, #8
 8007712:	f883 2841 	strb.w	r2, [r3, #2113]	; 0x841
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2264      	movs	r2, #100	; 0x64
 800771a:	f883 2842 	strb.w	r2, [r3, #2114]	; 0x842
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2262      	movs	r2, #98	; 0x62
 8007722:	f883 2843 	strb.w	r2, [r3, #2115]	; 0x843
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2236      	movs	r2, #54	; 0x36
 800772a:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2249      	movs	r2, #73	; 0x49
 8007732:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2255      	movs	r2, #85	; 0x55
 800773a:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2222      	movs	r2, #34	; 0x22
 8007742:	f883 2847 	strb.w	r2, [r3, #2119]	; 0x847
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2250      	movs	r2, #80	; 0x50
 800774a:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2205      	movs	r2, #5
 8007752:	f883 284a 	strb.w	r2, [r3, #2122]	; 0x84a
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2203      	movs	r2, #3
 800775a:	f883 284b 	strb.w	r2, [r3, #2123]	; 0x84b
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	221c      	movs	r2, #28
 8007762:	f883 284f 	strb.w	r2, [r3, #2127]	; 0x84f
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2222      	movs	r2, #34	; 0x22
 800776a:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2241      	movs	r2, #65	; 0x41
 8007772:	f883 2851 	strb.w	r2, [r3, #2129]	; 0x851
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2241      	movs	r2, #65	; 0x41
 800777a:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2222      	movs	r2, #34	; 0x22
 8007782:	f883 2855 	strb.w	r2, [r3, #2133]	; 0x855
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	221c      	movs	r2, #28
 800778a:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2208      	movs	r2, #8
 8007792:	f883 2858 	strb.w	r2, [r3, #2136]	; 0x858
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	222a      	movs	r2, #42	; 0x2a
 800779a:	f883 2859 	strb.w	r2, [r3, #2137]	; 0x859
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	221c      	movs	r2, #28
 80077a2:	f883 285a 	strb.w	r2, [r3, #2138]	; 0x85a
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	222a      	movs	r2, #42	; 0x2a
 80077aa:	f883 285b 	strb.w	r2, [r3, #2139]	; 0x85b
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2208      	movs	r2, #8
 80077b2:	f883 285c 	strb.w	r2, [r3, #2140]	; 0x85c
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2208      	movs	r2, #8
 80077ba:	f883 285d 	strb.w	r2, [r3, #2141]	; 0x85d
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2208      	movs	r2, #8
 80077c2:	f883 285e 	strb.w	r2, [r3, #2142]	; 0x85e
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	223e      	movs	r2, #62	; 0x3e
 80077ca:	f883 285f 	strb.w	r2, [r3, #2143]	; 0x85f
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2208      	movs	r2, #8
 80077d2:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2208      	movs	r2, #8
 80077da:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2250      	movs	r2, #80	; 0x50
 80077e2:	f883 2863 	strb.w	r2, [r3, #2147]	; 0x863
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2230      	movs	r2, #48	; 0x30
 80077ea:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2208      	movs	r2, #8
 80077f2:	f883 2867 	strb.w	r2, [r3, #2151]	; 0x867
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2208      	movs	r2, #8
 80077fa:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2208      	movs	r2, #8
 8007802:	f883 2869 	strb.w	r2, [r3, #2153]	; 0x869
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2208      	movs	r2, #8
 800780a:	f883 286a 	strb.w	r2, [r3, #2154]	; 0x86a
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2208      	movs	r2, #8
 8007812:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2230      	movs	r2, #48	; 0x30
 800781a:	f883 286d 	strb.w	r2, [r3, #2157]	; 0x86d
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2230      	movs	r2, #48	; 0x30
 8007822:	f883 286e 	strb.w	r2, [r3, #2158]	; 0x86e
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	f883 2871 	strb.w	r2, [r3, #2161]	; 0x871
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2210      	movs	r2, #16
 8007832:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2208      	movs	r2, #8
 800783a:	f883 2873 	strb.w	r2, [r3, #2163]	; 0x873
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2204      	movs	r2, #4
 8007842:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2202      	movs	r2, #2
 800784a:	f883 2875 	strb.w	r2, [r3, #2165]	; 0x875
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	223e      	movs	r2, #62	; 0x3e
 8007852:	f883 2876 	strb.w	r2, [r3, #2166]	; 0x876
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2251      	movs	r2, #81	; 0x51
 800785a:	f883 2877 	strb.w	r2, [r3, #2167]	; 0x877
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2249      	movs	r2, #73	; 0x49
 8007862:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2245      	movs	r2, #69	; 0x45
 800786a:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	223e      	movs	r2, #62	; 0x3e
 8007872:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2242      	movs	r2, #66	; 0x42
 800787a:	f883 287c 	strb.w	r2, [r3, #2172]	; 0x87c
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	227f      	movs	r2, #127	; 0x7f
 8007882:	f883 287d 	strb.w	r2, [r3, #2173]	; 0x87d
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2240      	movs	r2, #64	; 0x40
 800788a:	f883 287e 	strb.w	r2, [r3, #2174]	; 0x87e
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2242      	movs	r2, #66	; 0x42
 8007892:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2261      	movs	r2, #97	; 0x61
 800789a:	f883 2881 	strb.w	r2, [r3, #2177]	; 0x881
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2251      	movs	r2, #81	; 0x51
 80078a2:	f883 2882 	strb.w	r2, [r3, #2178]	; 0x882
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2249      	movs	r2, #73	; 0x49
 80078aa:	f883 2883 	strb.w	r2, [r3, #2179]	; 0x883
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2246      	movs	r2, #70	; 0x46
 80078b2:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2221      	movs	r2, #33	; 0x21
 80078ba:	f883 2885 	strb.w	r2, [r3, #2181]	; 0x885
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2241      	movs	r2, #65	; 0x41
 80078c2:	f883 2886 	strb.w	r2, [r3, #2182]	; 0x886
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2245      	movs	r2, #69	; 0x45
 80078ca:	f883 2887 	strb.w	r2, [r3, #2183]	; 0x887
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	224b      	movs	r2, #75	; 0x4b
 80078d2:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2231      	movs	r2, #49	; 0x31
 80078da:	f883 2889 	strb.w	r2, [r3, #2185]	; 0x889
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2218      	movs	r2, #24
 80078e2:	f883 288a 	strb.w	r2, [r3, #2186]	; 0x88a
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2214      	movs	r2, #20
 80078ea:	f883 288b 	strb.w	r2, [r3, #2187]	; 0x88b
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2212      	movs	r2, #18
 80078f2:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	227f      	movs	r2, #127	; 0x7f
 80078fa:	f883 288d 	strb.w	r2, [r3, #2189]	; 0x88d
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2210      	movs	r2, #16
 8007902:	f883 288e 	strb.w	r2, [r3, #2190]	; 0x88e
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2227      	movs	r2, #39	; 0x27
 800790a:	f883 288f 	strb.w	r2, [r3, #2191]	; 0x88f
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2245      	movs	r2, #69	; 0x45
 8007912:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2245      	movs	r2, #69	; 0x45
 800791a:	f883 2891 	strb.w	r2, [r3, #2193]	; 0x891
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2245      	movs	r2, #69	; 0x45
 8007922:	f883 2892 	strb.w	r2, [r3, #2194]	; 0x892
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2239      	movs	r2, #57	; 0x39
 800792a:	f883 2893 	strb.w	r2, [r3, #2195]	; 0x893
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	223c      	movs	r2, #60	; 0x3c
 8007932:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	224a      	movs	r2, #74	; 0x4a
 800793a:	f883 2895 	strb.w	r2, [r3, #2197]	; 0x895
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2249      	movs	r2, #73	; 0x49
 8007942:	f883 2896 	strb.w	r2, [r3, #2198]	; 0x896
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2249      	movs	r2, #73	; 0x49
 800794a:	f883 2897 	strb.w	r2, [r3, #2199]	; 0x897
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2230      	movs	r2, #48	; 0x30
 8007952:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2899 	strb.w	r2, [r3, #2201]	; 0x899
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2271      	movs	r2, #113	; 0x71
 8007962:	f883 289a 	strb.w	r2, [r3, #2202]	; 0x89a
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2209      	movs	r2, #9
 800796a:	f883 289b 	strb.w	r2, [r3, #2203]	; 0x89b
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2205      	movs	r2, #5
 8007972:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2203      	movs	r2, #3
 800797a:	f883 289d 	strb.w	r2, [r3, #2205]	; 0x89d
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2236      	movs	r2, #54	; 0x36
 8007982:	f883 289e 	strb.w	r2, [r3, #2206]	; 0x89e
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2249      	movs	r2, #73	; 0x49
 800798a:	f883 289f 	strb.w	r2, [r3, #2207]	; 0x89f
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2249      	movs	r2, #73	; 0x49
 8007992:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2249      	movs	r2, #73	; 0x49
 800799a:	f883 28a1 	strb.w	r2, [r3, #2209]	; 0x8a1
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2236      	movs	r2, #54	; 0x36
 80079a2:	f883 28a2 	strb.w	r2, [r3, #2210]	; 0x8a2
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2206      	movs	r2, #6
 80079aa:	f883 28a3 	strb.w	r2, [r3, #2211]	; 0x8a3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2249      	movs	r2, #73	; 0x49
 80079b2:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2249      	movs	r2, #73	; 0x49
 80079ba:	f883 28a5 	strb.w	r2, [r3, #2213]	; 0x8a5
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2229      	movs	r2, #41	; 0x29
 80079c2:	f883 28a6 	strb.w	r2, [r3, #2214]	; 0x8a6
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	221e      	movs	r2, #30
 80079ca:	f883 28a7 	strb.w	r2, [r3, #2215]	; 0x8a7
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2236      	movs	r2, #54	; 0x36
 80079d2:	f883 28a9 	strb.w	r2, [r3, #2217]	; 0x8a9
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2236      	movs	r2, #54	; 0x36
 80079da:	f883 28aa 	strb.w	r2, [r3, #2218]	; 0x8aa
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2256      	movs	r2, #86	; 0x56
 80079e2:	f883 28ae 	strb.w	r2, [r3, #2222]	; 0x8ae
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2236      	movs	r2, #54	; 0x36
 80079ea:	f883 28af 	strb.w	r2, [r3, #2223]	; 0x8af
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2208      	movs	r2, #8
 80079f2:	f883 28b3 	strb.w	r2, [r3, #2227]	; 0x8b3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2214      	movs	r2, #20
 80079fa:	f883 28b4 	strb.w	r2, [r3, #2228]	; 0x8b4
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2222      	movs	r2, #34	; 0x22
 8007a02:	f883 28b5 	strb.w	r2, [r3, #2229]	; 0x8b5
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2241      	movs	r2, #65	; 0x41
 8007a0a:	f883 28b6 	strb.w	r2, [r3, #2230]	; 0x8b6
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2214      	movs	r2, #20
 8007a12:	f883 28b7 	strb.w	r2, [r3, #2231]	; 0x8b7
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2214      	movs	r2, #20
 8007a1a:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2214      	movs	r2, #20
 8007a22:	f883 28b9 	strb.w	r2, [r3, #2233]	; 0x8b9
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2214      	movs	r2, #20
 8007a2a:	f883 28ba 	strb.w	r2, [r3, #2234]	; 0x8ba
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2214      	movs	r2, #20
 8007a32:	f883 28bb 	strb.w	r2, [r3, #2235]	; 0x8bb
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2241      	movs	r2, #65	; 0x41
 8007a3a:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2222      	movs	r2, #34	; 0x22
 8007a42:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2214      	movs	r2, #20
 8007a4a:	f883 28be 	strb.w	r2, [r3, #2238]	; 0x8be
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2208      	movs	r2, #8
 8007a52:	f883 28bf 	strb.w	r2, [r3, #2239]	; 0x8bf
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2202      	movs	r2, #2
 8007a5a:	f883 28c1 	strb.w	r2, [r3, #2241]	; 0x8c1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 28c2 	strb.w	r2, [r3, #2242]	; 0x8c2
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2251      	movs	r2, #81	; 0x51
 8007a6a:	f883 28c3 	strb.w	r2, [r3, #2243]	; 0x8c3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2209      	movs	r2, #9
 8007a72:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2206      	movs	r2, #6
 8007a7a:	f883 28c5 	strb.w	r2, [r3, #2245]	; 0x8c5
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2232      	movs	r2, #50	; 0x32
 8007a82:	f883 28c6 	strb.w	r2, [r3, #2246]	; 0x8c6
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2249      	movs	r2, #73	; 0x49
 8007a8a:	f883 28c7 	strb.w	r2, [r3, #2247]	; 0x8c7
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2279      	movs	r2, #121	; 0x79
 8007a92:	f883 28c8 	strb.w	r2, [r3, #2248]	; 0x8c8
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2241      	movs	r2, #65	; 0x41
 8007a9a:	f883 28c9 	strb.w	r2, [r3, #2249]	; 0x8c9
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	223e      	movs	r2, #62	; 0x3e
 8007aa2:	f883 28ca 	strb.w	r2, [r3, #2250]	; 0x8ca
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	227e      	movs	r2, #126	; 0x7e
 8007aaa:	f883 28cb 	strb.w	r2, [r3, #2251]	; 0x8cb
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2211      	movs	r2, #17
 8007ab2:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2211      	movs	r2, #17
 8007aba:	f883 28cd 	strb.w	r2, [r3, #2253]	; 0x8cd
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2211      	movs	r2, #17
 8007ac2:	f883 28ce 	strb.w	r2, [r3, #2254]	; 0x8ce
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	227e      	movs	r2, #126	; 0x7e
 8007aca:	f883 28cf 	strb.w	r2, [r3, #2255]	; 0x8cf
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	227f      	movs	r2, #127	; 0x7f
 8007ad2:	f883 28d0 	strb.w	r2, [r3, #2256]	; 0x8d0
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2249      	movs	r2, #73	; 0x49
 8007ada:	f883 28d1 	strb.w	r2, [r3, #2257]	; 0x8d1
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2249      	movs	r2, #73	; 0x49
 8007ae2:	f883 28d2 	strb.w	r2, [r3, #2258]	; 0x8d2
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2249      	movs	r2, #73	; 0x49
 8007aea:	f883 28d3 	strb.w	r2, [r3, #2259]	; 0x8d3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2236      	movs	r2, #54	; 0x36
 8007af2:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	223e      	movs	r2, #62	; 0x3e
 8007afa:	f883 28d5 	strb.w	r2, [r3, #2261]	; 0x8d5
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2241      	movs	r2, #65	; 0x41
 8007b02:	f883 28d6 	strb.w	r2, [r3, #2262]	; 0x8d6
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2241      	movs	r2, #65	; 0x41
 8007b0a:	f883 28d7 	strb.w	r2, [r3, #2263]	; 0x8d7
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2241      	movs	r2, #65	; 0x41
 8007b12:	f883 28d8 	strb.w	r2, [r3, #2264]	; 0x8d8
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2222      	movs	r2, #34	; 0x22
 8007b1a:	f883 28d9 	strb.w	r2, [r3, #2265]	; 0x8d9
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	227f      	movs	r2, #127	; 0x7f
 8007b22:	f883 28da 	strb.w	r2, [r3, #2266]	; 0x8da
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2241      	movs	r2, #65	; 0x41
 8007b2a:	f883 28db 	strb.w	r2, [r3, #2267]	; 0x8db
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2241      	movs	r2, #65	; 0x41
 8007b32:	f883 28dc 	strb.w	r2, [r3, #2268]	; 0x8dc
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2222      	movs	r2, #34	; 0x22
 8007b3a:	f883 28dd 	strb.w	r2, [r3, #2269]	; 0x8dd
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	221c      	movs	r2, #28
 8007b42:	f883 28de 	strb.w	r2, [r3, #2270]	; 0x8de
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	227f      	movs	r2, #127	; 0x7f
 8007b4a:	f883 28df 	strb.w	r2, [r3, #2271]	; 0x8df
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2249      	movs	r2, #73	; 0x49
 8007b52:	f883 28e0 	strb.w	r2, [r3, #2272]	; 0x8e0
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2249      	movs	r2, #73	; 0x49
 8007b5a:	f883 28e1 	strb.w	r2, [r3, #2273]	; 0x8e1
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2249      	movs	r2, #73	; 0x49
 8007b62:	f883 28e2 	strb.w	r2, [r3, #2274]	; 0x8e2
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2241      	movs	r2, #65	; 0x41
 8007b6a:	f883 28e3 	strb.w	r2, [r3, #2275]	; 0x8e3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	227f      	movs	r2, #127	; 0x7f
 8007b72:	f883 28e4 	strb.w	r2, [r3, #2276]	; 0x8e4
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2209      	movs	r2, #9
 8007b7a:	f883 28e5 	strb.w	r2, [r3, #2277]	; 0x8e5
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2209      	movs	r2, #9
 8007b82:	f883 28e6 	strb.w	r2, [r3, #2278]	; 0x8e6
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 28e7 	strb.w	r2, [r3, #2279]	; 0x8e7
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 28e8 	strb.w	r2, [r3, #2280]	; 0x8e8
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	223e      	movs	r2, #62	; 0x3e
 8007b9a:	f883 28e9 	strb.w	r2, [r3, #2281]	; 0x8e9
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2241      	movs	r2, #65	; 0x41
 8007ba2:	f883 28ea 	strb.w	r2, [r3, #2282]	; 0x8ea
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2241      	movs	r2, #65	; 0x41
 8007baa:	f883 28eb 	strb.w	r2, [r3, #2283]	; 0x8eb
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2251      	movs	r2, #81	; 0x51
 8007bb2:	f883 28ec 	strb.w	r2, [r3, #2284]	; 0x8ec
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2232      	movs	r2, #50	; 0x32
 8007bba:	f883 28ed 	strb.w	r2, [r3, #2285]	; 0x8ed
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	227f      	movs	r2, #127	; 0x7f
 8007bc2:	f883 28ee 	strb.w	r2, [r3, #2286]	; 0x8ee
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2208      	movs	r2, #8
 8007bca:	f883 28ef 	strb.w	r2, [r3, #2287]	; 0x8ef
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	f883 28f0 	strb.w	r2, [r3, #2288]	; 0x8f0
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2208      	movs	r2, #8
 8007bda:	f883 28f1 	strb.w	r2, [r3, #2289]	; 0x8f1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	227f      	movs	r2, #127	; 0x7f
 8007be2:	f883 28f2 	strb.w	r2, [r3, #2290]	; 0x8f2
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2241      	movs	r2, #65	; 0x41
 8007bea:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	227f      	movs	r2, #127	; 0x7f
 8007bf2:	f883 28f5 	strb.w	r2, [r3, #2293]	; 0x8f5
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2241      	movs	r2, #65	; 0x41
 8007bfa:	f883 28f6 	strb.w	r2, [r3, #2294]	; 0x8f6
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2240      	movs	r2, #64	; 0x40
 8007c0a:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2241      	movs	r2, #65	; 0x41
 8007c12:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	223f      	movs	r2, #63	; 0x3f
 8007c1a:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	227f      	movs	r2, #127	; 0x7f
 8007c2a:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2208      	movs	r2, #8
 8007c32:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2214      	movs	r2, #20
 8007c3a:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2222      	movs	r2, #34	; 0x22
 8007c42:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2241      	movs	r2, #65	; 0x41
 8007c4a:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	227f      	movs	r2, #127	; 0x7f
 8007c52:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2240      	movs	r2, #64	; 0x40
 8007c5a:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2240      	movs	r2, #64	; 0x40
 8007c62:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2240      	movs	r2, #64	; 0x40
 8007c6a:	f883 2905 	strb.w	r2, [r3, #2309]	; 0x905
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2240      	movs	r2, #64	; 0x40
 8007c72:	f883 2906 	strb.w	r2, [r3, #2310]	; 0x906
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	227f      	movs	r2, #127	; 0x7f
 8007c7a:	f883 2907 	strb.w	r2, [r3, #2311]	; 0x907
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2202      	movs	r2, #2
 8007c82:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2204      	movs	r2, #4
 8007c8a:	f883 2909 	strb.w	r2, [r3, #2313]	; 0x909
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2202      	movs	r2, #2
 8007c92:	f883 290a 	strb.w	r2, [r3, #2314]	; 0x90a
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	227f      	movs	r2, #127	; 0x7f
 8007c9a:	f883 290b 	strb.w	r2, [r3, #2315]	; 0x90b
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	227f      	movs	r2, #127	; 0x7f
 8007ca2:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2204      	movs	r2, #4
 8007caa:	f883 290d 	strb.w	r2, [r3, #2317]	; 0x90d
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2208      	movs	r2, #8
 8007cb2:	f883 290e 	strb.w	r2, [r3, #2318]	; 0x90e
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2210      	movs	r2, #16
 8007cba:	f883 290f 	strb.w	r2, [r3, #2319]	; 0x90f
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	227f      	movs	r2, #127	; 0x7f
 8007cc2:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	223e      	movs	r2, #62	; 0x3e
 8007cca:	f883 2911 	strb.w	r2, [r3, #2321]	; 0x911
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2241      	movs	r2, #65	; 0x41
 8007cd2:	f883 2912 	strb.w	r2, [r3, #2322]	; 0x912
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2241      	movs	r2, #65	; 0x41
 8007cda:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2241      	movs	r2, #65	; 0x41
 8007ce2:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	223e      	movs	r2, #62	; 0x3e
 8007cea:	f883 2915 	strb.w	r2, [r3, #2325]	; 0x915
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	227f      	movs	r2, #127	; 0x7f
 8007cf2:	f883 2916 	strb.w	r2, [r3, #2326]	; 0x916
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2209      	movs	r2, #9
 8007cfa:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2209      	movs	r2, #9
 8007d02:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2209      	movs	r2, #9
 8007d0a:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2206      	movs	r2, #6
 8007d12:	f883 291a 	strb.w	r2, [r3, #2330]	; 0x91a
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	223e      	movs	r2, #62	; 0x3e
 8007d1a:	f883 291b 	strb.w	r2, [r3, #2331]	; 0x91b
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2241      	movs	r2, #65	; 0x41
 8007d22:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2251      	movs	r2, #81	; 0x51
 8007d2a:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2221      	movs	r2, #33	; 0x21
 8007d32:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	225e      	movs	r2, #94	; 0x5e
 8007d3a:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	227f      	movs	r2, #127	; 0x7f
 8007d42:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2209      	movs	r2, #9
 8007d4a:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2219      	movs	r2, #25
 8007d52:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2229      	movs	r2, #41	; 0x29
 8007d5a:	f883 2923 	strb.w	r2, [r3, #2339]	; 0x923
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2246      	movs	r2, #70	; 0x46
 8007d62:	f883 2924 	strb.w	r2, [r3, #2340]	; 0x924
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2246      	movs	r2, #70	; 0x46
 8007d6a:	f883 2925 	strb.w	r2, [r3, #2341]	; 0x925
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2249      	movs	r2, #73	; 0x49
 8007d72:	f883 2926 	strb.w	r2, [r3, #2342]	; 0x926
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2249      	movs	r2, #73	; 0x49
 8007d7a:	f883 2927 	strb.w	r2, [r3, #2343]	; 0x927
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2249      	movs	r2, #73	; 0x49
 8007d82:	f883 2928 	strb.w	r2, [r3, #2344]	; 0x928
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2231      	movs	r2, #49	; 0x31
 8007d8a:	f883 2929 	strb.w	r2, [r3, #2345]	; 0x929
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 292a 	strb.w	r2, [r3, #2346]	; 0x92a
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 292b 	strb.w	r2, [r3, #2347]	; 0x92b
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	227f      	movs	r2, #127	; 0x7f
 8007da2:	f883 292c 	strb.w	r2, [r3, #2348]	; 0x92c
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 292d 	strb.w	r2, [r3, #2349]	; 0x92d
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 292e 	strb.w	r2, [r3, #2350]	; 0x92e
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	223f      	movs	r2, #63	; 0x3f
 8007dba:	f883 292f 	strb.w	r2, [r3, #2351]	; 0x92f
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2240      	movs	r2, #64	; 0x40
 8007dc2:	f883 2930 	strb.w	r2, [r3, #2352]	; 0x930
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2240      	movs	r2, #64	; 0x40
 8007dca:	f883 2931 	strb.w	r2, [r3, #2353]	; 0x931
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2240      	movs	r2, #64	; 0x40
 8007dd2:	f883 2932 	strb.w	r2, [r3, #2354]	; 0x932
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	223f      	movs	r2, #63	; 0x3f
 8007dda:	f883 2933 	strb.w	r2, [r3, #2355]	; 0x933
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	221f      	movs	r2, #31
 8007de2:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f883 2935 	strb.w	r2, [r3, #2357]	; 0x935
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2240      	movs	r2, #64	; 0x40
 8007df2:	f883 2936 	strb.w	r2, [r3, #2358]	; 0x936
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f883 2937 	strb.w	r2, [r3, #2359]	; 0x937
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	221f      	movs	r2, #31
 8007e02:	f883 2938 	strb.w	r2, [r3, #2360]	; 0x938
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	227f      	movs	r2, #127	; 0x7f
 8007e0a:	f883 2939 	strb.w	r2, [r3, #2361]	; 0x939
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f883 293a 	strb.w	r2, [r3, #2362]	; 0x93a
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2218      	movs	r2, #24
 8007e1a:	f883 293b 	strb.w	r2, [r3, #2363]	; 0x93b
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2220      	movs	r2, #32
 8007e22:	f883 293c 	strb.w	r2, [r3, #2364]	; 0x93c
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	227f      	movs	r2, #127	; 0x7f
 8007e2a:	f883 293d 	strb.w	r2, [r3, #2365]	; 0x93d
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2263      	movs	r2, #99	; 0x63
 8007e32:	f883 293e 	strb.w	r2, [r3, #2366]	; 0x93e
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2214      	movs	r2, #20
 8007e3a:	f883 293f 	strb.w	r2, [r3, #2367]	; 0x93f
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2208      	movs	r2, #8
 8007e42:	f883 2940 	strb.w	r2, [r3, #2368]	; 0x940
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2214      	movs	r2, #20
 8007e4a:	f883 2941 	strb.w	r2, [r3, #2369]	; 0x941
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2263      	movs	r2, #99	; 0x63
 8007e52:	f883 2942 	strb.w	r2, [r3, #2370]	; 0x942
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2203      	movs	r2, #3
 8007e5a:	f883 2943 	strb.w	r2, [r3, #2371]	; 0x943
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2204      	movs	r2, #4
 8007e62:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2278      	movs	r2, #120	; 0x78
 8007e6a:	f883 2945 	strb.w	r2, [r3, #2373]	; 0x945
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2204      	movs	r2, #4
 8007e72:	f883 2946 	strb.w	r2, [r3, #2374]	; 0x946
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2203      	movs	r2, #3
 8007e7a:	f883 2947 	strb.w	r2, [r3, #2375]	; 0x947
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2261      	movs	r2, #97	; 0x61
 8007e82:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2251      	movs	r2, #81	; 0x51
 8007e8a:	f883 2949 	strb.w	r2, [r3, #2377]	; 0x949
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2249      	movs	r2, #73	; 0x49
 8007e92:	f883 294a 	strb.w	r2, [r3, #2378]	; 0x94a
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2245      	movs	r2, #69	; 0x45
 8007e9a:	f883 294b 	strb.w	r2, [r3, #2379]	; 0x94b
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2243      	movs	r2, #67	; 0x43
 8007ea2:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	227f      	movs	r2, #127	; 0x7f
 8007eaa:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2241      	movs	r2, #65	; 0x41
 8007eb2:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2241      	movs	r2, #65	; 0x41
 8007eba:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2204      	movs	r2, #4
 8007eca:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2208      	movs	r2, #8
 8007ed2:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2210      	movs	r2, #16
 8007eda:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f883 2956 	strb.w	r2, [r3, #2390]	; 0x956
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2241      	movs	r2, #65	; 0x41
 8007eea:	f883 2957 	strb.w	r2, [r3, #2391]	; 0x957
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2241      	movs	r2, #65	; 0x41
 8007ef2:	f883 2958 	strb.w	r2, [r3, #2392]	; 0x958
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	227f      	movs	r2, #127	; 0x7f
 8007efa:	f883 2959 	strb.w	r2, [r3, #2393]	; 0x959
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2204      	movs	r2, #4
 8007f02:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 295e 	strb.w	r2, [r3, #2398]	; 0x95e
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	f883 295f 	strb.w	r2, [r3, #2399]	; 0x95f
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2204      	movs	r2, #4
 8007f22:	f883 2960 	strb.w	r2, [r3, #2400]	; 0x960
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2240      	movs	r2, #64	; 0x40
 8007f2a:	f883 2961 	strb.w	r2, [r3, #2401]	; 0x961
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2240      	movs	r2, #64	; 0x40
 8007f32:	f883 2962 	strb.w	r2, [r3, #2402]	; 0x962
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2240      	movs	r2, #64	; 0x40
 8007f3a:	f883 2963 	strb.w	r2, [r3, #2403]	; 0x963
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2240      	movs	r2, #64	; 0x40
 8007f42:	f883 2964 	strb.w	r2, [r3, #2404]	; 0x964
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2240      	movs	r2, #64	; 0x40
 8007f4a:	f883 2965 	strb.w	r2, [r3, #2405]	; 0x965
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2967 	strb.w	r2, [r3, #2407]	; 0x967
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	f883 2968 	strb.w	r2, [r3, #2408]	; 0x968
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2204      	movs	r2, #4
 8007f62:	f883 2969 	strb.w	r2, [r3, #2409]	; 0x969
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2254      	movs	r2, #84	; 0x54
 8007f72:	f883 296c 	strb.w	r2, [r3, #2412]	; 0x96c
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2254      	movs	r2, #84	; 0x54
 8007f7a:	f883 296d 	strb.w	r2, [r3, #2413]	; 0x96d
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2254      	movs	r2, #84	; 0x54
 8007f82:	f883 296e 	strb.w	r2, [r3, #2414]	; 0x96e
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2278      	movs	r2, #120	; 0x78
 8007f8a:	f883 296f 	strb.w	r2, [r3, #2415]	; 0x96f
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	227f      	movs	r2, #127	; 0x7f
 8007f92:	f883 2970 	strb.w	r2, [r3, #2416]	; 0x970
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2248      	movs	r2, #72	; 0x48
 8007f9a:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2244      	movs	r2, #68	; 0x44
 8007fa2:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2244      	movs	r2, #68	; 0x44
 8007faa:	f883 2973 	strb.w	r2, [r3, #2419]	; 0x973
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2238      	movs	r2, #56	; 0x38
 8007fb2:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2238      	movs	r2, #56	; 0x38
 8007fba:	f883 2975 	strb.w	r2, [r3, #2421]	; 0x975
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2244      	movs	r2, #68	; 0x44
 8007fc2:	f883 2976 	strb.w	r2, [r3, #2422]	; 0x976
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2244      	movs	r2, #68	; 0x44
 8007fca:	f883 2977 	strb.w	r2, [r3, #2423]	; 0x977
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2244      	movs	r2, #68	; 0x44
 8007fd2:	f883 2978 	strb.w	r2, [r3, #2424]	; 0x978
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f883 2979 	strb.w	r2, [r3, #2425]	; 0x979
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2238      	movs	r2, #56	; 0x38
 8007fe2:	f883 297a 	strb.w	r2, [r3, #2426]	; 0x97a
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2244      	movs	r2, #68	; 0x44
 8007fea:	f883 297b 	strb.w	r2, [r3, #2427]	; 0x97b
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2244      	movs	r2, #68	; 0x44
 8007ff2:	f883 297c 	strb.w	r2, [r3, #2428]	; 0x97c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2248      	movs	r2, #72	; 0x48
 8007ffa:	f883 297d 	strb.w	r2, [r3, #2429]	; 0x97d
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	227f      	movs	r2, #127	; 0x7f
 8008002:	f883 297e 	strb.w	r2, [r3, #2430]	; 0x97e
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2238      	movs	r2, #56	; 0x38
 800800a:	f883 297f 	strb.w	r2, [r3, #2431]	; 0x97f
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2254      	movs	r2, #84	; 0x54
 8008012:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2254      	movs	r2, #84	; 0x54
 800801a:	f883 2981 	strb.w	r2, [r3, #2433]	; 0x981
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2254      	movs	r2, #84	; 0x54
 8008022:	f883 2982 	strb.w	r2, [r3, #2434]	; 0x982
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2218      	movs	r2, #24
 800802a:	f883 2983 	strb.w	r2, [r3, #2435]	; 0x983
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2208      	movs	r2, #8
 8008032:	f883 2984 	strb.w	r2, [r3, #2436]	; 0x984
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	227e      	movs	r2, #126	; 0x7e
 800803a:	f883 2985 	strb.w	r2, [r3, #2437]	; 0x985
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2209      	movs	r2, #9
 8008042:	f883 2986 	strb.w	r2, [r3, #2438]	; 0x986
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2987 	strb.w	r2, [r3, #2439]	; 0x987
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2202      	movs	r2, #2
 8008052:	f883 2988 	strb.w	r2, [r3, #2440]	; 0x988
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2208      	movs	r2, #8
 800805a:	f883 2989 	strb.w	r2, [r3, #2441]	; 0x989
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2214      	movs	r2, #20
 8008062:	f883 298a 	strb.w	r2, [r3, #2442]	; 0x98a
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2254      	movs	r2, #84	; 0x54
 800806a:	f883 298b 	strb.w	r2, [r3, #2443]	; 0x98b
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2254      	movs	r2, #84	; 0x54
 8008072:	f883 298c 	strb.w	r2, [r3, #2444]	; 0x98c
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	223c      	movs	r2, #60	; 0x3c
 800807a:	f883 298d 	strb.w	r2, [r3, #2445]	; 0x98d
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	227f      	movs	r2, #127	; 0x7f
 8008082:	f883 298e 	strb.w	r2, [r3, #2446]	; 0x98e
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2208      	movs	r2, #8
 800808a:	f883 298f 	strb.w	r2, [r3, #2447]	; 0x98f
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2204      	movs	r2, #4
 8008092:	f883 2990 	strb.w	r2, [r3, #2448]	; 0x990
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2204      	movs	r2, #4
 800809a:	f883 2991 	strb.w	r2, [r3, #2449]	; 0x991
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2278      	movs	r2, #120	; 0x78
 80080a2:	f883 2992 	strb.w	r2, [r3, #2450]	; 0x992
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2244      	movs	r2, #68	; 0x44
 80080aa:	f883 2994 	strb.w	r2, [r3, #2452]	; 0x994
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	227d      	movs	r2, #125	; 0x7d
 80080b2:	f883 2995 	strb.w	r2, [r3, #2453]	; 0x995
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2240      	movs	r2, #64	; 0x40
 80080ba:	f883 2996 	strb.w	r2, [r3, #2454]	; 0x996
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f883 2998 	strb.w	r2, [r3, #2456]	; 0x998
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2240      	movs	r2, #64	; 0x40
 80080ca:	f883 2999 	strb.w	r2, [r3, #2457]	; 0x999
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2244      	movs	r2, #68	; 0x44
 80080d2:	f883 299a 	strb.w	r2, [r3, #2458]	; 0x99a
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	223d      	movs	r2, #61	; 0x3d
 80080da:	f883 299b 	strb.w	r2, [r3, #2459]	; 0x99b
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	227f      	movs	r2, #127	; 0x7f
 80080e2:	f883 299e 	strb.w	r2, [r3, #2462]	; 0x99e
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2210      	movs	r2, #16
 80080ea:	f883 299f 	strb.w	r2, [r3, #2463]	; 0x99f
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2228      	movs	r2, #40	; 0x28
 80080f2:	f883 29a0 	strb.w	r2, [r3, #2464]	; 0x9a0
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2244      	movs	r2, #68	; 0x44
 80080fa:	f883 29a1 	strb.w	r2, [r3, #2465]	; 0x9a1
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2241      	movs	r2, #65	; 0x41
 8008102:	f883 29a3 	strb.w	r2, [r3, #2467]	; 0x9a3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	227f      	movs	r2, #127	; 0x7f
 800810a:	f883 29a4 	strb.w	r2, [r3, #2468]	; 0x9a4
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2240      	movs	r2, #64	; 0x40
 8008112:	f883 29a5 	strb.w	r2, [r3, #2469]	; 0x9a5
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	227c      	movs	r2, #124	; 0x7c
 800811a:	f883 29a7 	strb.w	r2, [r3, #2471]	; 0x9a7
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2204      	movs	r2, #4
 8008122:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2218      	movs	r2, #24
 800812a:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2204      	movs	r2, #4
 8008132:	f883 29aa 	strb.w	r2, [r3, #2474]	; 0x9aa
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2278      	movs	r2, #120	; 0x78
 800813a:	f883 29ab 	strb.w	r2, [r3, #2475]	; 0x9ab
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	227c      	movs	r2, #124	; 0x7c
 8008142:	f883 29ac 	strb.w	r2, [r3, #2476]	; 0x9ac
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2208      	movs	r2, #8
 800814a:	f883 29ad 	strb.w	r2, [r3, #2477]	; 0x9ad
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2204      	movs	r2, #4
 8008152:	f883 29ae 	strb.w	r2, [r3, #2478]	; 0x9ae
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2204      	movs	r2, #4
 800815a:	f883 29af 	strb.w	r2, [r3, #2479]	; 0x9af
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2278      	movs	r2, #120	; 0x78
 8008162:	f883 29b0 	strb.w	r2, [r3, #2480]	; 0x9b0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2238      	movs	r2, #56	; 0x38
 800816a:	f883 29b1 	strb.w	r2, [r3, #2481]	; 0x9b1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2244      	movs	r2, #68	; 0x44
 8008172:	f883 29b2 	strb.w	r2, [r3, #2482]	; 0x9b2
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2244      	movs	r2, #68	; 0x44
 800817a:	f883 29b3 	strb.w	r2, [r3, #2483]	; 0x9b3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2244      	movs	r2, #68	; 0x44
 8008182:	f883 29b4 	strb.w	r2, [r3, #2484]	; 0x9b4
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2238      	movs	r2, #56	; 0x38
 800818a:	f883 29b5 	strb.w	r2, [r3, #2485]	; 0x9b5
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	227c      	movs	r2, #124	; 0x7c
 8008192:	f883 29b6 	strb.w	r2, [r3, #2486]	; 0x9b6
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2214      	movs	r2, #20
 800819a:	f883 29b7 	strb.w	r2, [r3, #2487]	; 0x9b7
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2214      	movs	r2, #20
 80081a2:	f883 29b8 	strb.w	r2, [r3, #2488]	; 0x9b8
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2214      	movs	r2, #20
 80081aa:	f883 29b9 	strb.w	r2, [r3, #2489]	; 0x9b9
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2208      	movs	r2, #8
 80081b2:	f883 29ba 	strb.w	r2, [r3, #2490]	; 0x9ba
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2208      	movs	r2, #8
 80081ba:	f883 29bb 	strb.w	r2, [r3, #2491]	; 0x9bb
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2214      	movs	r2, #20
 80081c2:	f883 29bc 	strb.w	r2, [r3, #2492]	; 0x9bc
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2214      	movs	r2, #20
 80081ca:	f883 29bd 	strb.w	r2, [r3, #2493]	; 0x9bd
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2218      	movs	r2, #24
 80081d2:	f883 29be 	strb.w	r2, [r3, #2494]	; 0x9be
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	227c      	movs	r2, #124	; 0x7c
 80081da:	f883 29bf 	strb.w	r2, [r3, #2495]	; 0x9bf
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	227c      	movs	r2, #124	; 0x7c
 80081e2:	f883 29c0 	strb.w	r2, [r3, #2496]	; 0x9c0
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2208      	movs	r2, #8
 80081ea:	f883 29c1 	strb.w	r2, [r3, #2497]	; 0x9c1
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2204      	movs	r2, #4
 80081f2:	f883 29c2 	strb.w	r2, [r3, #2498]	; 0x9c2
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2204      	movs	r2, #4
 80081fa:	f883 29c3 	strb.w	r2, [r3, #2499]	; 0x9c3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2208      	movs	r2, #8
 8008202:	f883 29c4 	strb.w	r2, [r3, #2500]	; 0x9c4
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2248      	movs	r2, #72	; 0x48
 800820a:	f883 29c5 	strb.w	r2, [r3, #2501]	; 0x9c5
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2254      	movs	r2, #84	; 0x54
 8008212:	f883 29c6 	strb.w	r2, [r3, #2502]	; 0x9c6
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2254      	movs	r2, #84	; 0x54
 800821a:	f883 29c7 	strb.w	r2, [r3, #2503]	; 0x9c7
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2254      	movs	r2, #84	; 0x54
 8008222:	f883 29c8 	strb.w	r2, [r3, #2504]	; 0x9c8
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	f883 29c9 	strb.w	r2, [r3, #2505]	; 0x9c9
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2204      	movs	r2, #4
 8008232:	f883 29ca 	strb.w	r2, [r3, #2506]	; 0x9ca
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	223f      	movs	r2, #63	; 0x3f
 800823a:	f883 29cb 	strb.w	r2, [r3, #2507]	; 0x9cb
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2244      	movs	r2, #68	; 0x44
 8008242:	f883 29cc 	strb.w	r2, [r3, #2508]	; 0x9cc
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2240      	movs	r2, #64	; 0x40
 800824a:	f883 29cd 	strb.w	r2, [r3, #2509]	; 0x9cd
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	f883 29ce 	strb.w	r2, [r3, #2510]	; 0x9ce
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	223c      	movs	r2, #60	; 0x3c
 800825a:	f883 29cf 	strb.w	r2, [r3, #2511]	; 0x9cf
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2240      	movs	r2, #64	; 0x40
 8008262:	f883 29d0 	strb.w	r2, [r3, #2512]	; 0x9d0
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2240      	movs	r2, #64	; 0x40
 800826a:	f883 29d1 	strb.w	r2, [r3, #2513]	; 0x9d1
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2220      	movs	r2, #32
 8008272:	f883 29d2 	strb.w	r2, [r3, #2514]	; 0x9d2
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	227c      	movs	r2, #124	; 0x7c
 800827a:	f883 29d3 	strb.w	r2, [r3, #2515]	; 0x9d3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	221c      	movs	r2, #28
 8008282:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2220      	movs	r2, #32
 800828a:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2240      	movs	r2, #64	; 0x40
 8008292:	f883 29d6 	strb.w	r2, [r3, #2518]	; 0x9d6
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2220      	movs	r2, #32
 800829a:	f883 29d7 	strb.w	r2, [r3, #2519]	; 0x9d7
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	221c      	movs	r2, #28
 80082a2:	f883 29d8 	strb.w	r2, [r3, #2520]	; 0x9d8
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	223c      	movs	r2, #60	; 0x3c
 80082aa:	f883 29d9 	strb.w	r2, [r3, #2521]	; 0x9d9
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2240      	movs	r2, #64	; 0x40
 80082b2:	f883 29da 	strb.w	r2, [r3, #2522]	; 0x9da
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2230      	movs	r2, #48	; 0x30
 80082ba:	f883 29db 	strb.w	r2, [r3, #2523]	; 0x9db
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2240      	movs	r2, #64	; 0x40
 80082c2:	f883 29dc 	strb.w	r2, [r3, #2524]	; 0x9dc
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	223c      	movs	r2, #60	; 0x3c
 80082ca:	f883 29dd 	strb.w	r2, [r3, #2525]	; 0x9dd
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2244      	movs	r2, #68	; 0x44
 80082d2:	f883 29de 	strb.w	r2, [r3, #2526]	; 0x9de
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2228      	movs	r2, #40	; 0x28
 80082da:	f883 29df 	strb.w	r2, [r3, #2527]	; 0x9df
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2210      	movs	r2, #16
 80082e2:	f883 29e0 	strb.w	r2, [r3, #2528]	; 0x9e0
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2228      	movs	r2, #40	; 0x28
 80082ea:	f883 29e1 	strb.w	r2, [r3, #2529]	; 0x9e1
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2244      	movs	r2, #68	; 0x44
 80082f2:	f883 29e2 	strb.w	r2, [r3, #2530]	; 0x9e2
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	220c      	movs	r2, #12
 80082fa:	f883 29e3 	strb.w	r2, [r3, #2531]	; 0x9e3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2250      	movs	r2, #80	; 0x50
 8008302:	f883 29e4 	strb.w	r2, [r3, #2532]	; 0x9e4
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2250      	movs	r2, #80	; 0x50
 800830a:	f883 29e5 	strb.w	r2, [r3, #2533]	; 0x9e5
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2250      	movs	r2, #80	; 0x50
 8008312:	f883 29e6 	strb.w	r2, [r3, #2534]	; 0x9e6
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	223c      	movs	r2, #60	; 0x3c
 800831a:	f883 29e7 	strb.w	r2, [r3, #2535]	; 0x9e7
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2244      	movs	r2, #68	; 0x44
 8008322:	f883 29e8 	strb.w	r2, [r3, #2536]	; 0x9e8
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2264      	movs	r2, #100	; 0x64
 800832a:	f883 29e9 	strb.w	r2, [r3, #2537]	; 0x9e9
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2254      	movs	r2, #84	; 0x54
 8008332:	f883 29ea 	strb.w	r2, [r3, #2538]	; 0x9ea
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	224c      	movs	r2, #76	; 0x4c
 800833a:	f883 29eb 	strb.w	r2, [r3, #2539]	; 0x9eb
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2244      	movs	r2, #68	; 0x44
 8008342:	f883 29ec 	strb.w	r2, [r3, #2540]	; 0x9ec
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2208      	movs	r2, #8
 800834a:	f883 29ee 	strb.w	r2, [r3, #2542]	; 0x9ee
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2236      	movs	r2, #54	; 0x36
 8008352:	f883 29ef 	strb.w	r2, [r3, #2543]	; 0x9ef
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2241      	movs	r2, #65	; 0x41
 800835a:	f883 29f0 	strb.w	r2, [r3, #2544]	; 0x9f0
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	227f      	movs	r2, #127	; 0x7f
 8008362:	f883 29f4 	strb.w	r2, [r3, #2548]	; 0x9f4
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2241      	movs	r2, #65	; 0x41
 800836a:	f883 29f8 	strb.w	r2, [r3, #2552]	; 0x9f8
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2236      	movs	r2, #54	; 0x36
 8008372:	f883 29f9 	strb.w	r2, [r3, #2553]	; 0x9f9
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2208      	movs	r2, #8
 800837a:	f883 29fa 	strb.w	r2, [r3, #2554]	; 0x9fa
	// TODO Auto-generated constructor stub

}
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bdb0      	pop	{r4, r5, r7, pc}

08008388 <_ZN4GLCDD1Ev>:

GLCD::~GLCD() {
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	4a05      	ldr	r2, [pc, #20]	; (80083a8 <_ZN4GLCDD1Ev+0x20>)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4618      	mov	r0, r3
 800839a:	f7fb fe25 	bl	8003fe8 <_ZN6commonD1Ev>
	// TODO Auto-generated destructor stub
}
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	0800f508 	.word	0x0800f508

080083ac <_ZN4GLCDD0Ev>:
GLCD::~GLCD() {
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
}
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7ff ffe7 	bl	8008388 <_ZN4GLCDD1Ev>
 80083ba:	f640 2104 	movw	r1, #2564	; 0xa04
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f005 fd31 	bl	800de26 <_ZdlPvj>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <_ZN4GLCD9m_ctrloffEv>:

void GLCD::m_ctrloff(){
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 80083d8:	2200      	movs	r2, #0
 80083da:	2110      	movs	r1, #16
 80083dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80083e0:	f001 fab0 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80083e4:	2200      	movs	r2, #0
 80083e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80083ea:	480c      	ldr	r0, [pc, #48]	; (800841c <_ZN4GLCD9m_ctrloffEv+0x4c>)
 80083ec:	f001 faaa 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80083f0:	2200      	movs	r2, #0
 80083f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083f6:	4809      	ldr	r0, [pc, #36]	; (800841c <_ZN4GLCD9m_ctrloffEv+0x4c>)
 80083f8:	f001 faa4 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 80083fc:	2200      	movs	r2, #0
 80083fe:	2104      	movs	r1, #4
 8008400:	4807      	ldr	r0, [pc, #28]	; (8008420 <_ZN4GLCD9m_ctrloffEv+0x50>)
 8008402:	f001 fa9f 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8008406:	2200      	movs	r2, #0
 8008408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800840c:	4803      	ldr	r0, [pc, #12]	; (800841c <_ZN4GLCD9m_ctrloffEv+0x4c>)
 800840e:	f001 fa99 	bl	8009944 <HAL_GPIO_WritePin>
}
 8008412:	bf00      	nop
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	48000800 	.word	0x48000800
 8008420:	48000c00 	.word	0x48000c00

08008424 <_ZN4GLCD7m_delayEjh>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
}

void GLCD::m_delay(unsigned int j,uint8_t a)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	4613      	mov	r3, r2
 8008430:	71fb      	strb	r3, [r7, #7]
	unsigned int i,k;
	for(i=0;i<j;i++)
 8008432:	2300      	movs	r3, #0
 8008434:	617b      	str	r3, [r7, #20]
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	429a      	cmp	r2, r3
 800843c:	d20d      	bcs.n	800845a <_ZN4GLCD7m_delayEjh+0x36>
 	{for(k=0;k<a;k++);
 800843e:	2300      	movs	r3, #0
 8008440:	613b      	str	r3, [r7, #16]
 8008442:	79fb      	ldrb	r3, [r7, #7]
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	429a      	cmp	r2, r3
 8008448:	d203      	bcs.n	8008452 <_ZN4GLCD7m_delayEjh+0x2e>
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	3301      	adds	r3, #1
 800844e:	613b      	str	r3, [r7, #16]
 8008450:	e7f7      	b.n	8008442 <_ZN4GLCD7m_delayEjh+0x1e>
	for(i=0;i<j;i++)
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	3301      	adds	r3, #1
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	e7ed      	b.n	8008436 <_ZN4GLCD7m_delayEjh+0x12>
	}
}
 800845a:	bf00      	nop
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
	...

08008468 <_ZN4GLCD16m_IOWritethedataEh>:

void GLCD::m_IOWritethedata(const uint8_t finput)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOC,LCDD0_Pin,ReadtheValueAssignPinstate(0,finput));
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	78fa      	ldrb	r2, [r7, #3]
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f7fb ffe8 	bl	8004450 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008480:	4603      	mov	r3, r0
 8008482:	461a      	mov	r2, r3
 8008484:	2108      	movs	r1, #8
 8008486:	482f      	ldr	r0, [pc, #188]	; (8008544 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008488:	f001 fa5c 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD1_Pin,ReadtheValueAssignPinstate(1,finput));
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	78fa      	ldrb	r2, [r7, #3]
 8008490:	2101      	movs	r1, #1
 8008492:	4618      	mov	r0, r3
 8008494:	f7fb ffdc 	bl	8004450 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008498:	4603      	mov	r3, r0
 800849a:	461a      	mov	r2, r3
 800849c:	2104      	movs	r1, #4
 800849e:	4829      	ldr	r0, [pc, #164]	; (8008544 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80084a0:	f001 fa50 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD2_Pin,ReadtheValueAssignPinstate(2,finput));
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	78fa      	ldrb	r2, [r7, #3]
 80084a8:	2102      	movs	r1, #2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fb ffd0 	bl	8004450 <_ZN6common26ReadtheValueAssignPinstateEhh>
 80084b0:	4603      	mov	r3, r0
 80084b2:	461a      	mov	r2, r3
 80084b4:	2102      	movs	r1, #2
 80084b6:	4823      	ldr	r0, [pc, #140]	; (8008544 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80084b8:	f001 fa44 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD3_Pin,ReadtheValueAssignPinstate(3,finput));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	78fa      	ldrb	r2, [r7, #3]
 80084c0:	2103      	movs	r1, #3
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fb ffc4 	bl	8004450 <_ZN6common26ReadtheValueAssignPinstateEhh>
 80084c8:	4603      	mov	r3, r0
 80084ca:	461a      	mov	r2, r3
 80084cc:	2101      	movs	r1, #1
 80084ce:	481d      	ldr	r0, [pc, #116]	; (8008544 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80084d0:	f001 fa38 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD4_Pin,ReadtheValueAssignPinstate(4,finput));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	78fa      	ldrb	r2, [r7, #3]
 80084d8:	2104      	movs	r1, #4
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fb ffb8 	bl	8004450 <_ZN6common26ReadtheValueAssignPinstateEhh>
 80084e0:	4603      	mov	r3, r0
 80084e2:	461a      	mov	r2, r3
 80084e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084e8:	4816      	ldr	r0, [pc, #88]	; (8008544 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 80084ea:	f001 fa2b 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD5_Pin,ReadtheValueAssignPinstate(5,finput));
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	78fa      	ldrb	r2, [r7, #3]
 80084f2:	2105      	movs	r1, #5
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fb ffab 	bl	8004450 <_ZN6common26ReadtheValueAssignPinstateEhh>
 80084fa:	4603      	mov	r3, r0
 80084fc:	461a      	mov	r2, r3
 80084fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008502:	4810      	ldr	r0, [pc, #64]	; (8008544 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8008504:	f001 fa1e 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD6_Pin,ReadtheValueAssignPinstate(6,finput));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	78fa      	ldrb	r2, [r7, #3]
 800850c:	2106      	movs	r1, #6
 800850e:	4618      	mov	r0, r3
 8008510:	f7fb ff9e 	bl	8004450 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8008514:	4603      	mov	r3, r0
 8008516:	461a      	mov	r2, r3
 8008518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800851c:	4809      	ldr	r0, [pc, #36]	; (8008544 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 800851e:	f001 fa11 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,LCDD7_Pin, ReadtheValueAssignPinstate(7,finput));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	78fa      	ldrb	r2, [r7, #3]
 8008526:	2107      	movs	r1, #7
 8008528:	4618      	mov	r0, r3
 800852a:	f7fb ff91 	bl	8004450 <_ZN6common26ReadtheValueAssignPinstateEhh>
 800852e:	4603      	mov	r3, r0
 8008530:	461a      	mov	r2, r3
 8008532:	2120      	movs	r1, #32
 8008534:	4804      	ldr	r0, [pc, #16]	; (8008548 <_ZN4GLCD16m_IOWritethedataEh+0xe0>)
 8008536:	f001 fa05 	bl	8009944 <HAL_GPIO_WritePin>
}
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	48000800 	.word	0x48000800
 8008548:	48000400 	.word	0x48000400

0800854c <_ZN4GLCD11m_displayonEv>:

void GLCD::m_displayon(){
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	m_ctrloff();
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff ff3b 	bl	80083d0 <_ZN4GLCD9m_ctrloffEv>
	m_IOWritethedata(0x3f);
 800855a:	213f      	movs	r1, #63	; 0x3f
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7ff ff83 	bl	8008468 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008562:	2201      	movs	r2, #1
 8008564:	2104      	movs	r1, #4
 8008566:	4815      	ldr	r0, [pc, #84]	; (80085bc <_ZN4GLCD11m_displayonEv+0x70>)
 8008568:	f001 f9ec 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 800856c:	2201      	movs	r2, #1
 800856e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008572:	4813      	ldr	r0, [pc, #76]	; (80085c0 <_ZN4GLCD11m_displayonEv+0x74>)
 8008574:	f001 f9e6 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008578:	2200      	movs	r2, #0
 800857a:	2110      	movs	r1, #16
 800857c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008580:	f001 f9e0 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008584:	2200      	movs	r2, #0
 8008586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800858a:	480d      	ldr	r0, [pc, #52]	; (80085c0 <_ZN4GLCD11m_displayonEv+0x74>)
 800858c:	f001 f9da 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008590:	2201      	movs	r2, #1
 8008592:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008596:	480a      	ldr	r0, [pc, #40]	; (80085c0 <_ZN4GLCD11m_displayonEv+0x74>)
 8008598:	f001 f9d4 	bl	8009944 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 800859c:	2264      	movs	r2, #100	; 0x64
 800859e:	210a      	movs	r1, #10
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff ff3f 	bl	8008424 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80085a6:	2200      	movs	r2, #0
 80085a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80085ac:	4804      	ldr	r0, [pc, #16]	; (80085c0 <_ZN4GLCD11m_displayonEv+0x74>)
 80085ae:	f001 f9c9 	bl	8009944 <HAL_GPIO_WritePin>
}
 80085b2:	bf00      	nop
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	48000c00 	.word	0x48000c00
 80085c0:	48000800 	.word	0x48000800

080085c4 <_ZN4GLCD11m_setcolumnEh>:
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
}


void GLCD::m_setcolumn(uint8_t Columvalue)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	460b      	mov	r3, r1
 80085ce:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	if(Columvalue <64)
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	2b3f      	cmp	r3, #63	; 0x3f
 80085d4:	d839      	bhi.n	800864a <_ZN4GLCD11m_setcolumnEh+0x86>
	{
		m_ctrloff();
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff fefa 	bl	80083d0 <_ZN4GLCD9m_ctrloffEv>
		c=Columvalue;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	78fa      	ldrb	r2, [r7, #3]
 80085e0:	771a      	strb	r2, [r3, #28]
		m_IOWritethedata((0x40|(Columvalue&63)));
 80085e2:	78fb      	ldrb	r3, [r7, #3]
 80085e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff ff38 	bl	8008468 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 80085f8:	2201      	movs	r2, #1
 80085fa:	2104      	movs	r1, #4
 80085fc:	4831      	ldr	r0, [pc, #196]	; (80086c4 <_ZN4GLCD11m_setcolumnEh+0x100>)
 80085fe:	f001 f9a1 	bl	8009944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8008602:	2200      	movs	r2, #0
 8008604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008608:	482f      	ldr	r0, [pc, #188]	; (80086c8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 800860a:	f001 f99b 	bl	8009944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 800860e:	2200      	movs	r2, #0
 8008610:	2110      	movs	r1, #16
 8008612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008616:	f001 f995 	bl	8009944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 800861a:	2200      	movs	r2, #0
 800861c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008620:	4829      	ldr	r0, [pc, #164]	; (80086c8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008622:	f001 f98f 	bl	8009944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8008626:	2201      	movs	r2, #1
 8008628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800862c:	4826      	ldr	r0, [pc, #152]	; (80086c8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 800862e:	f001 f989 	bl	8009944 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
 8008632:	2264      	movs	r2, #100	; 0x64
 8008634:	210a      	movs	r1, #10
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7ff fef4 	bl	8008424 <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 800863c:	2200      	movs	r2, #0
 800863e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008642:	4821      	ldr	r0, [pc, #132]	; (80086c8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008644:	f001 f97e 	bl	8009944 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);

	}
}
 8008648:	e038      	b.n	80086bc <_ZN4GLCD11m_setcolumnEh+0xf8>
		c=Columvalue;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	78fa      	ldrb	r2, [r7, #3]
 800864e:	771a      	strb	r2, [r3, #28]
		dport=0x40|((Columvalue-64)&63);	  //0x40 represents Column 0
 8008650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008658:	b25b      	sxtb	r3, r3
 800865a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800865e:	b25b      	sxtb	r3, r3
 8008660:	73fb      	strb	r3, [r7, #15]
		m_IOWritethedata(dport);
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	4619      	mov	r1, r3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7ff fefe 	bl	8008468 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 800866c:	2200      	movs	r2, #0
 800866e:	2104      	movs	r1, #4
 8008670:	4814      	ldr	r0, [pc, #80]	; (80086c4 <_ZN4GLCD11m_setcolumnEh+0x100>)
 8008672:	f001 f967 	bl	8009944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8008676:	2201      	movs	r2, #1
 8008678:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800867c:	4812      	ldr	r0, [pc, #72]	; (80086c8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 800867e:	f001 f961 	bl	8009944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008682:	2200      	movs	r2, #0
 8008684:	2110      	movs	r1, #16
 8008686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800868a:	f001 f95b 	bl	8009944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 800868e:	2200      	movs	r2, #0
 8008690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008694:	480c      	ldr	r0, [pc, #48]	; (80086c8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8008696:	f001 f955 	bl	8009944 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 800869a:	2201      	movs	r2, #1
 800869c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80086a0:	4809      	ldr	r0, [pc, #36]	; (80086c8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80086a2:	f001 f94f 	bl	8009944 <HAL_GPIO_WritePin>
		m_delay(10,100);
 80086a6:	2264      	movs	r2, #100	; 0x64
 80086a8:	210a      	movs	r1, #10
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7ff feba 	bl	8008424 <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80086b0:	2200      	movs	r2, #0
 80086b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80086b6:	4804      	ldr	r0, [pc, #16]	; (80086c8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 80086b8:	f001 f944 	bl	8009944 <HAL_GPIO_WritePin>
}
 80086bc:	bf00      	nop
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	48000c00 	.word	0x48000c00
 80086c8:	48000800 	.word	0x48000800

080086cc <_ZN4GLCD9m_setpageEh>:

void GLCD::m_setpage(uint8_t x)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff fe79 	bl	80083d0 <_ZN4GLCD9m_ctrloffEv>
	dport= 0xb8|x;	   //0xb8 represents Page 0
 80086de:	78fb      	ldrb	r3, [r7, #3]
 80086e0:	f063 0347 	orn	r3, r3, #71	; 0x47
 80086e4:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 80086e6:	7bfb      	ldrb	r3, [r7, #15]
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff febc 	bl	8008468 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 80086f0:	2201      	movs	r2, #1
 80086f2:	2104      	movs	r1, #4
 80086f4:	4814      	ldr	r0, [pc, #80]	; (8008748 <_ZN4GLCD9m_setpageEh+0x7c>)
 80086f6:	f001 f925 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80086fa:	2201      	movs	r2, #1
 80086fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008700:	4812      	ldr	r0, [pc, #72]	; (800874c <_ZN4GLCD9m_setpageEh+0x80>)
 8008702:	f001 f91f 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8008706:	2200      	movs	r2, #0
 8008708:	2110      	movs	r1, #16
 800870a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800870e:	f001 f919 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008712:	2200      	movs	r2, #0
 8008714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008718:	480c      	ldr	r0, [pc, #48]	; (800874c <_ZN4GLCD9m_setpageEh+0x80>)
 800871a:	f001 f913 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 800871e:	2201      	movs	r2, #1
 8008720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008724:	4809      	ldr	r0, [pc, #36]	; (800874c <_ZN4GLCD9m_setpageEh+0x80>)
 8008726:	f001 f90d 	bl	8009944 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 800872a:	2264      	movs	r2, #100	; 0x64
 800872c:	210a      	movs	r1, #10
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7ff fe78 	bl	8008424 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008734:	2200      	movs	r2, #0
 8008736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800873a:	4804      	ldr	r0, [pc, #16]	; (800874c <_ZN4GLCD9m_setpageEh+0x80>)
 800873c:	f001 f902 	bl	8009944 <HAL_GPIO_WritePin>
}
 8008740:	bf00      	nop
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	48000c00 	.word	0x48000c00
 800874c:	48000800 	.word	0x48000800

08008750 <_ZN4GLCD14m_setstartlineEh>:

void GLCD::m_setstartline(uint8_t z)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff fe37 	bl	80083d0 <_ZN4GLCD9m_ctrloffEv>
	dport=0xc0|z;	   //0xc0 represents Line 0
 8008762:	78fb      	ldrb	r3, [r7, #3]
 8008764:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8008768:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 800876a:	7bfb      	ldrb	r3, [r7, #15]
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff fe7a 	bl	8008468 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8008774:	2201      	movs	r2, #1
 8008776:	2104      	movs	r1, #4
 8008778:	4814      	ldr	r0, [pc, #80]	; (80087cc <_ZN4GLCD14m_setstartlineEh+0x7c>)
 800877a:	f001 f8e3 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 800877e:	2201      	movs	r2, #1
 8008780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008784:	4812      	ldr	r0, [pc, #72]	; (80087d0 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8008786:	f001 f8dd 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 800878a:	2200      	movs	r2, #0
 800878c:	2110      	movs	r1, #16
 800878e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008792:	f001 f8d7 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8008796:	2200      	movs	r2, #0
 8008798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800879c:	480c      	ldr	r0, [pc, #48]	; (80087d0 <_ZN4GLCD14m_setstartlineEh+0x80>)
 800879e:	f001 f8d1 	bl	8009944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80087a2:	2201      	movs	r2, #1
 80087a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80087a8:	4809      	ldr	r0, [pc, #36]	; (80087d0 <_ZN4GLCD14m_setstartlineEh+0x80>)
 80087aa:	f001 f8cb 	bl	8009944 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 80087ae:	2264      	movs	r2, #100	; 0x64
 80087b0:	210a      	movs	r1, #10
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff fe36 	bl	8008424 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80087b8:	2200      	movs	r2, #0
 80087ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80087be:	4804      	ldr	r0, [pc, #16]	; (80087d0 <_ZN4GLCD14m_setstartlineEh+0x80>)
 80087c0:	f001 f8c0 	bl	8009944 <HAL_GPIO_WritePin>
}
 80087c4:	bf00      	nop
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	48000c00 	.word	0x48000c00
 80087d0:	48000800 	.word	0x48000800

080087d4 <_ZN4GLCD9m_lcddataEPht>:

void GLCD::m_lcddata(uint8_t *value,uint16_t limit)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	4613      	mov	r3, r2
 80087e0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t dport;
	for(i=0;i<limit;i++)
 80087e2:	2300      	movs	r3, #0
 80087e4:	82fb      	strh	r3, [r7, #22]
 80087e6:	8afa      	ldrh	r2, [r7, #22]
 80087e8:	88fb      	ldrh	r3, [r7, #6]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	f080 8085 	bcs.w	80088fa <_ZN4GLCD9m_lcddataEPht+0x126>
	{
		if(c<64)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	7f1b      	ldrb	r3, [r3, #28]
 80087f4:	2b3f      	cmp	r3, #63	; 0x3f
 80087f6:	d838      	bhi.n	800886a <_ZN4GLCD9m_lcddataEPht+0x96>
		{
			dport=value[i];
 80087f8:	8afb      	ldrh	r3, [r7, #22]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	4413      	add	r3, r2
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8008802:	7d7b      	ldrb	r3, [r7, #21]
 8008804:	4619      	mov	r1, r3
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff fe2e 	bl	8008468 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 800880c:	2201      	movs	r2, #1
 800880e:	2104      	movs	r1, #4
 8008810:	483b      	ldr	r0, [pc, #236]	; (8008900 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8008812:	f001 f897 	bl	8009944 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8008816:	2200      	movs	r2, #0
 8008818:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800881c:	4839      	ldr	r0, [pc, #228]	; (8008904 <_ZN4GLCD9m_lcddataEPht+0x130>)
 800881e:	f001 f891 	bl	8009944 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8008822:	2201      	movs	r2, #1
 8008824:	2110      	movs	r1, #16
 8008826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800882a:	f001 f88b 	bl	8009944 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 800882e:	2200      	movs	r2, #0
 8008830:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008834:	4833      	ldr	r0, [pc, #204]	; (8008904 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008836:	f001 f885 	bl	8009944 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 800883a:	2201      	movs	r2, #1
 800883c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008840:	4830      	ldr	r0, [pc, #192]	; (8008904 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008842:	f001 f87f 	bl	8009944 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8008846:	2264      	movs	r2, #100	; 0x64
 8008848:	210a      	movs	r1, #10
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff fdea 	bl	8008424 <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008850:	2200      	movs	r2, #0
 8008852:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008856:	482b      	ldr	r0, [pc, #172]	; (8008904 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008858:	f001 f874 	bl	8009944 <HAL_GPIO_WritePin>
			c++;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	7f1b      	ldrb	r3, [r3, #28]
 8008860:	3301      	adds	r3, #1
 8008862:	b2da      	uxtb	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	771a      	strb	r2, [r3, #28]
 8008868:	e03d      	b.n	80088e6 <_ZN4GLCD9m_lcddataEPht+0x112>
		}
		else
		{
			m_setcolumn(c);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	7f1b      	ldrb	r3, [r3, #28]
 800886e:	4619      	mov	r1, r3
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f7ff fea7 	bl	80085c4 <_ZN4GLCD11m_setcolumnEh>
			dport=value[i];
 8008876:	8afb      	ldrh	r3, [r7, #22]
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	4413      	add	r3, r2
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8008880:	7d7b      	ldrb	r3, [r7, #21]
 8008882:	4619      	mov	r1, r3
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f7ff fdef 	bl	8008468 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 800888a:	2200      	movs	r2, #0
 800888c:	2104      	movs	r1, #4
 800888e:	481c      	ldr	r0, [pc, #112]	; (8008900 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8008890:	f001 f858 	bl	8009944 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8008894:	2201      	movs	r2, #1
 8008896:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800889a:	481a      	ldr	r0, [pc, #104]	; (8008904 <_ZN4GLCD9m_lcddataEPht+0x130>)
 800889c:	f001 f852 	bl	8009944 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 80088a0:	2201      	movs	r2, #1
 80088a2:	2110      	movs	r1, #16
 80088a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088a8:	f001 f84c 	bl	8009944 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80088ac:	2200      	movs	r2, #0
 80088ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80088b2:	4814      	ldr	r0, [pc, #80]	; (8008904 <_ZN4GLCD9m_lcddataEPht+0x130>)
 80088b4:	f001 f846 	bl	8009944 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80088b8:	2201      	movs	r2, #1
 80088ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80088be:	4811      	ldr	r0, [pc, #68]	; (8008904 <_ZN4GLCD9m_lcddataEPht+0x130>)
 80088c0:	f001 f840 	bl	8009944 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 80088c4:	2264      	movs	r2, #100	; 0x64
 80088c6:	210a      	movs	r1, #10
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f7ff fdab 	bl	8008424 <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80088ce:	2200      	movs	r2, #0
 80088d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80088d4:	480b      	ldr	r0, [pc, #44]	; (8008904 <_ZN4GLCD9m_lcddataEPht+0x130>)
 80088d6:	f001 f835 	bl	8009944 <HAL_GPIO_WritePin>
			c++;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	7f1b      	ldrb	r3, [r3, #28]
 80088de:	3301      	adds	r3, #1
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	771a      	strb	r2, [r3, #28]
		}
		if(c>127)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	7f1b      	ldrb	r3, [r3, #28]
 80088ea:	b25b      	sxtb	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	db03      	blt.n	80088f8 <_ZN4GLCD9m_lcddataEPht+0x124>
	for(i=0;i<limit;i++)
 80088f0:	8afb      	ldrh	r3, [r7, #22]
 80088f2:	3301      	adds	r3, #1
 80088f4:	82fb      	strh	r3, [r7, #22]
 80088f6:	e776      	b.n	80087e6 <_ZN4GLCD9m_lcddataEPht+0x12>
	           return;
 80088f8:	bf00      	nop
	}
}
 80088fa:	3718      	adds	r7, #24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	48000c00 	.word	0x48000c00
 8008904:	48000800 	.word	0x48000800

08008908 <_ZN4GLCD10m_lcdputs1EhhPh>:

void GLCD::m_lcdputs1(uint8_t y,uint8_t x,unsigned char *str)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	607b      	str	r3, [r7, #4]
 8008912:	460b      	mov	r3, r1
 8008914:	72fb      	strb	r3, [r7, #11]
 8008916:	4613      	mov	r3, r2
 8008918:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	uint16_t a;
	m_setcolumn(y);
 800891a:	7afb      	ldrb	r3, [r7, #11]
 800891c:	4619      	mov	r1, r3
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f7ff fe50 	bl	80085c4 <_ZN4GLCD11m_setcolumnEh>
	m_setpage(x);
 8008924:	7abb      	ldrb	r3, [r7, #10]
 8008926:	4619      	mov	r1, r3
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f7ff fecf 	bl	80086cc <_ZN4GLCD9m_setpageEh>
	for(i=0;str[i]!=0;i++)
 800892e:	2300      	movs	r3, #0
 8008930:	75fb      	strb	r3, [r7, #23]
 8008932:	7dfb      	ldrb	r3, [r7, #23]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	4413      	add	r3, r2
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d015      	beq.n	800896a <_ZN4GLCD10m_lcdputs1EhhPh+0x62>
	{
		a=(*(str+i));
 800893e:	7dfb      	ldrb	r3, [r7, #23]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	4413      	add	r3, r2
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	82bb      	strh	r3, [r7, #20]
		a*=8;
 8008948:	8abb      	ldrh	r3, [r7, #20]
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	82bb      	strh	r3, [r7, #20]
		m_lcddata(&Character8x8[a],8);
 800894e:	8abb      	ldrh	r3, [r7, #20]
 8008950:	3318      	adds	r3, #24
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	4413      	add	r3, r2
 8008956:	3306      	adds	r3, #6
 8008958:	2208      	movs	r2, #8
 800895a:	4619      	mov	r1, r3
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f7ff ff39 	bl	80087d4 <_ZN4GLCD9m_lcddataEPht>
	for(i=0;str[i]!=0;i++)
 8008962:	7dfb      	ldrb	r3, [r7, #23]
 8008964:	3301      	adds	r3, #1
 8008966:	75fb      	strb	r3, [r7, #23]
 8008968:	e7e3      	b.n	8008932 <_ZN4GLCD10m_lcdputs1EhhPh+0x2a>
	}
}
 800896a:	bf00      	nop
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <_ZN4GLCD8m_clrlcdEv>:
		m_lcddata(&font5x7[a],5);
	}
}

void GLCD::m_clrlcd(void)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
    uint8_t i,j;
    for (i=0;i < 8;i++)
 800897a:	2300      	movs	r3, #0
 800897c:	73fb      	strb	r3, [r7, #15]
 800897e:	7bfb      	ldrb	r3, [r7, #15]
 8008980:	2b07      	cmp	r3, #7
 8008982:	d81d      	bhi.n	80089c0 <_ZN4GLCD8m_clrlcdEv+0x4e>
    {
    m_setpage(i);
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff fe9f 	bl	80086cc <_ZN4GLCD9m_setpageEh>
    m_setcolumn(0);
 800898e:	2100      	movs	r1, #0
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f7ff fe17 	bl	80085c4 <_ZN4GLCD11m_setcolumnEh>
        for (j= 0 ;j < 128; j++)
 8008996:	2300      	movs	r3, #0
 8008998:	73bb      	strb	r3, [r7, #14]
 800899a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	db0a      	blt.n	80089b8 <_ZN4GLCD8m_clrlcdEv+0x46>
        	m_lcddata(&z,1);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	331d      	adds	r3, #29
 80089a6:	2201      	movs	r2, #1
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7ff ff12 	bl	80087d4 <_ZN4GLCD9m_lcddataEPht>
        for (j= 0 ;j < 128; j++)
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	3301      	adds	r3, #1
 80089b4:	73bb      	strb	r3, [r7, #14]
 80089b6:	e7f0      	b.n	800899a <_ZN4GLCD8m_clrlcdEv+0x28>
    for (i=0;i < 8;i++)
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	3301      	adds	r3, #1
 80089bc:	73fb      	strb	r3, [r7, #15]
 80089be:	e7de      	b.n	800897e <_ZN4GLCD8m_clrlcdEv+0xc>
    }
}
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <_ZN10W5500ClassC1Ev>:
// SPI details
//SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;


W5500Class::W5500Class() {
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	4a04      	ldr	r2, [pc, #16]	; (80089e4 <_ZN10W5500ClassC1Ev+0x1c>)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	0800f518 	.word	0x0800f518

080089e8 <_ZN10W5500ClassD1Ev>:

W5500Class::~W5500Class() {
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	4a04      	ldr	r2, [pc, #16]	; (8008a04 <_ZN10W5500ClassD1Ev+0x1c>)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4618      	mov	r0, r3
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	0800f518 	.word	0x0800f518

08008a08 <_ZN10W5500ClassD0Ev>:
W5500Class::~W5500Class() {
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
}
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff ffe9 	bl	80089e8 <_ZN10W5500ClassD1Ev>
 8008a16:	2104      	movs	r1, #4
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f005 fa04 	bl	800de26 <_ZdlPvj>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <_Z41__static_initialization_and_destruction_0ii>:
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d107      	bne.n	8008a48 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d102      	bne.n	8008a48 <_Z41__static_initialization_and_destruction_0ii+0x20>
W5500Class w5500;
 8008a42:	4809      	ldr	r0, [pc, #36]	; (8008a68 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008a44:	f7ff ffc0 	bl	80089c8 <_ZN10W5500ClassC1Ev>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d107      	bne.n	8008a5e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d102      	bne.n	8008a5e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008a58:	4803      	ldr	r0, [pc, #12]	; (8008a68 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008a5a:	f7ff ffc5 	bl	80089e8 <_ZN10W5500ClassD1Ev>
}
 8008a5e:	bf00      	nop
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20002d78 	.word	0x20002d78

08008a6c <_GLOBAL__sub_I_w5500>:
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008a74:	2001      	movs	r0, #1
 8008a76:	f7ff ffd7 	bl	8008a28 <_Z41__static_initialization_and_destruction_0ii>
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <_GLOBAL__sub_D_w5500>:
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008a84:	2000      	movs	r0, #0
 8008a86:	f7ff ffcf 	bl	8008a28 <_Z41__static_initialization_and_destruction_0ii>
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <_ZN9ModbusrtuC1Ev>:
uint8_t Ip_config_Ip[4],Ip_Config_Subnet[4],Ip_config_gateway[4],Ip_config_DNS[4],Ip_config_Server[4];
uint8_t Update_Dwin_Set_Data;
uint16_t Ip_config_Server_Port;

uint8_t TxSeqComplete;
Modbusrtu::Modbusrtu() {
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	4a04      	ldr	r2, [pc, #16]	; (8008aa8 <_ZN9ModbusrtuC1Ev+0x1c>)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	0800f528 	.word	0x0800f528

08008aac <_ZN9ModbusrtuD1Ev>:

Modbusrtu::~Modbusrtu() {
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	4a04      	ldr	r2, [pc, #16]	; (8008ac8 <_ZN9ModbusrtuD1Ev+0x1c>)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4618      	mov	r0, r3
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	0800f528 	.word	0x0800f528

08008acc <_ZN9ModbusrtuD0Ev>:
Modbusrtu::~Modbusrtu() {
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
}
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7ff ffe9 	bl	8008aac <_ZN9ModbusrtuD1Ev>
 8008ada:	2118      	movs	r1, #24
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f005 f9a2 	bl	800de26 <_ZdlPvj>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <_ZN9Modbusrtu9dwinFrameEv>:

void Modbusrtu::dwinFrame(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
	test=test+1;
 8008af4:	4b4d      	ldr	r3, [pc, #308]	; (8008c2c <_ZN9Modbusrtu9dwinFrameEv+0x140>)
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	3301      	adds	r3, #1
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	4b4b      	ldr	r3, [pc, #300]	; (8008c2c <_ZN9Modbusrtu9dwinFrameEv+0x140>)
 8008afe:	701a      	strb	r2, [r3, #0]
	switch(Cntid)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	791b      	ldrb	r3, [r3, #4]
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d060      	beq.n	8008bca <_ZN9Modbusrtu9dwinFrameEv+0xde>
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	dc7d      	bgt.n	8008c08 <_ZN9Modbusrtu9dwinFrameEv+0x11c>
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <_ZN9Modbusrtu9dwinFrameEv+0x2a>
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d02d      	beq.n	8008b70 <_ZN9Modbusrtu9dwinFrameEv+0x84>
 8008b14:	e078      	b.n	8008c08 <_ZN9Modbusrtu9dwinFrameEv+0x11c>
	{
	case 0:
		u8ModbusRegister[0] = START_BYTE_1;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	225a      	movs	r2, #90	; 0x5a
 8008b1a:	725a      	strb	r2, [r3, #9]
		u8ModbusRegister[1] = START_BYTE_2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	22a5      	movs	r2, #165	; 0xa5
 8008b20:	729a      	strb	r2, [r3, #10]
		u8ModbusRegister[2] = multipleWriteRequestH;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	220b      	movs	r2, #11
 8008b26:	72da      	strb	r2, [r3, #11]
		u8ModbusRegister[3] = multipleWriteRequestL;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2282      	movs	r2, #130	; 0x82
 8008b2c:	731a      	strb	r2, [r3, #12]
		u8ModbusRegister[4] = 0x20;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2220      	movs	r2, #32
 8008b32:	735a      	strb	r2, [r3, #13]
		u8ModbusRegister[5] = 0x00;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	739a      	strb	r2, [r3, #14]
		u8ModbusRegister[6] = 0x00;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	73da      	strb	r2, [r3, #15]
		u8ModbusRegister[7] = test;
 8008b40:	4b3a      	ldr	r3, [pc, #232]	; (8008c2c <_ZN9Modbusrtu9dwinFrameEv+0x140>)
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	741a      	strb	r2, [r3, #16]
		u8ModbusRegister[8] = 0;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	745a      	strb	r2, [r3, #17]
		u8ModbusRegister[9] = httpc_isConnected;
 8008b4e:	4b38      	ldr	r3, [pc, #224]	; (8008c30 <_ZN9Modbusrtu9dwinFrameEv+0x144>)
 8008b50:	781a      	ldrb	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	749a      	strb	r2, [r3, #18]
		u8ModbusRegister[10] = 0;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	74da      	strb	r2, [r3, #19]
		u8ModbusRegister[11] = 1;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	751a      	strb	r2, [r3, #20]
		noOfData=12;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	220c      	movs	r2, #12
 8008b66:	721a      	strb	r2, [r3, #8]
		Cntid=1;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	711a      	strb	r2, [r3, #4]
	break;
 8008b6e:	e04f      	b.n	8008c10 <_ZN9Modbusrtu9dwinFrameEv+0x124>
	case 1:
			u8ModbusRegister[0] = START_BYTE_1;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	225a      	movs	r2, #90	; 0x5a
 8008b74:	725a      	strb	r2, [r3, #9]
			u8ModbusRegister[1] = START_BYTE_2;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	22a5      	movs	r2, #165	; 0xa5
 8008b7a:	729a      	strb	r2, [r3, #10]
			u8ModbusRegister[2] = multipleWriteRequestH;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	220b      	movs	r2, #11
 8008b80:	72da      	strb	r2, [r3, #11]
			u8ModbusRegister[3] = multipleWriteRequestL;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2282      	movs	r2, #130	; 0x82
 8008b86:	731a      	strb	r2, [r3, #12]
			u8ModbusRegister[4] = 0x20;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	735a      	strb	r2, [r3, #13]
			u8ModbusRegister[5] = 0x00;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	739a      	strb	r2, [r3, #14]
			u8ModbusRegister[6] = 0x00;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	73da      	strb	r2, [r3, #15]
			u8ModbusRegister[7] = test;
 8008b9a:	4b24      	ldr	r3, [pc, #144]	; (8008c2c <_ZN9Modbusrtu9dwinFrameEv+0x140>)
 8008b9c:	781a      	ldrb	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	741a      	strb	r2, [r3, #16]
			u8ModbusRegister[8] = 0;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	745a      	strb	r2, [r3, #17]
			u8ModbusRegister[9] = httpc_isConnected;
 8008ba8:	4b21      	ldr	r3, [pc, #132]	; (8008c30 <_ZN9Modbusrtu9dwinFrameEv+0x144>)
 8008baa:	781a      	ldrb	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[10] = 0;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[11] = 1;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	751a      	strb	r2, [r3, #20]
			noOfData=12;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	220c      	movs	r2, #12
 8008bc0:	721a      	strb	r2, [r3, #8]
			Cntid=2;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	711a      	strb	r2, [r3, #4]
	break;
 8008bc8:	e022      	b.n	8008c10 <_ZN9Modbusrtu9dwinFrameEv+0x124>
	case 2:
		u8ModbusRegister[0] = START_BYTE_1;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	225a      	movs	r2, #90	; 0x5a
 8008bce:	725a      	strb	r2, [r3, #9]
		u8ModbusRegister[1] = START_BYTE_2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	22a5      	movs	r2, #165	; 0xa5
 8008bd4:	729a      	strb	r2, [r3, #10]
		u8ModbusRegister[2] = multipleReadRequestH;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2204      	movs	r2, #4
 8008bda:	72da      	strb	r2, [r3, #11]
		u8ModbusRegister[3] = multipleReadRequestL;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2283      	movs	r2, #131	; 0x83
 8008be0:	731a      	strb	r2, [r3, #12]
		u8ModbusRegister[4] = 0x30;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2230      	movs	r2, #48	; 0x30
 8008be6:	735a      	strb	r2, [r3, #13]
		u8ModbusRegister[5] = 0x00;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	739a      	strb	r2, [r3, #14]
		u8ModbusRegister[6] = 0x16;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2216      	movs	r2, #22
 8008bf2:	73da      	strb	r2, [r3, #15]
		//HAL_UART_Receive_IT(&hlpuart1,testarray,25);
		Rx_Dwin_Point=0;
 8008bf4:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <_ZN9Modbusrtu9dwinFrameEv+0x148>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	701a      	strb	r2, [r3, #0]
		noOfData=7;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2207      	movs	r2, #7
 8008bfe:	721a      	strb	r2, [r3, #8]
		Cntid=0;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	711a      	strb	r2, [r3, #4]
	break;
 8008c06:	e003      	b.n	8008c10 <_ZN9Modbusrtu9dwinFrameEv+0x124>
	default:
		Cntid=0;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	711a      	strb	r2, [r3, #4]
	break;
 8008c0e:	bf00      	nop
	}
	//out_read_rxint_set.Noofbytesrx = (_u16ReadQty*2)+5;
	HAL_UART_Transmit_IT(&hlpuart1,u8ModbusRegister,noOfData);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f103 0109 	add.w	r1, r3, #9
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	7a1b      	ldrb	r3, [r3, #8]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	4806      	ldr	r0, [pc, #24]	; (8008c38 <_ZN9Modbusrtu9dwinFrameEv+0x14c>)
 8008c20:	f003 fda8 	bl	800c774 <HAL_UART_Transmit_IT>

}
 8008c24:	bf00      	nop
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20002d7c 	.word	0x20002d7c
 8008c30:	20000909 	.word	0x20000909
 8008c34:	2000011f 	.word	0x2000011f
 8008c38:	20000598 	.word	0x20000598

08008c3c <_ZN9Modbusrtu11dwinDecoderEv>:

void Modbusrtu::dwinDecoder(void)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
	if(Rx_Dwin_Complete == 0){return;}
 8008c44:	4b3e      	ldr	r3, [pc, #248]	; (8008d40 <_ZN9Modbusrtu11dwinDecoderEv+0x104>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d072      	beq.n	8008d32 <_ZN9Modbusrtu11dwinDecoderEv+0xf6>
	Rx_Dwin_Complete=0;
 8008c4c:	4b3c      	ldr	r3, [pc, #240]	; (8008d40 <_ZN9Modbusrtu11dwinDecoderEv+0x104>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	701a      	strb	r2, [r3, #0]

	if(Rx_Dwin_Data_Buff[43] !=0 )
 8008c52:	4b3c      	ldr	r3, [pc, #240]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008c54:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d06b      	beq.n	8008d34 <_ZN9Modbusrtu11dwinDecoderEv+0xf8>
	{
		Ip_config_Ip[0] = Rx_Dwin_Data_Buff[1];
 8008c5c:	4b39      	ldr	r3, [pc, #228]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008c5e:	785a      	ldrb	r2, [r3, #1]
 8008c60:	4b39      	ldr	r3, [pc, #228]	; (8008d48 <_ZN9Modbusrtu11dwinDecoderEv+0x10c>)
 8008c62:	701a      	strb	r2, [r3, #0]
		Ip_config_Ip[1] = Rx_Dwin_Data_Buff[3];
 8008c64:	4b37      	ldr	r3, [pc, #220]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008c66:	78da      	ldrb	r2, [r3, #3]
 8008c68:	4b37      	ldr	r3, [pc, #220]	; (8008d48 <_ZN9Modbusrtu11dwinDecoderEv+0x10c>)
 8008c6a:	705a      	strb	r2, [r3, #1]
		Ip_config_Ip[2] = Rx_Dwin_Data_Buff[5];
 8008c6c:	4b35      	ldr	r3, [pc, #212]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008c6e:	795a      	ldrb	r2, [r3, #5]
 8008c70:	4b35      	ldr	r3, [pc, #212]	; (8008d48 <_ZN9Modbusrtu11dwinDecoderEv+0x10c>)
 8008c72:	709a      	strb	r2, [r3, #2]
		Ip_config_Ip[3] = Rx_Dwin_Data_Buff[7];
 8008c74:	4b33      	ldr	r3, [pc, #204]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008c76:	79da      	ldrb	r2, [r3, #7]
 8008c78:	4b33      	ldr	r3, [pc, #204]	; (8008d48 <_ZN9Modbusrtu11dwinDecoderEv+0x10c>)
 8008c7a:	70da      	strb	r2, [r3, #3]

		Ip_Config_Subnet[0] = Rx_Dwin_Data_Buff[9];
 8008c7c:	4b31      	ldr	r3, [pc, #196]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008c7e:	7a5a      	ldrb	r2, [r3, #9]
 8008c80:	4b32      	ldr	r3, [pc, #200]	; (8008d4c <_ZN9Modbusrtu11dwinDecoderEv+0x110>)
 8008c82:	701a      	strb	r2, [r3, #0]
		Ip_Config_Subnet[1] = Rx_Dwin_Data_Buff[11];
 8008c84:	4b2f      	ldr	r3, [pc, #188]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008c86:	7ada      	ldrb	r2, [r3, #11]
 8008c88:	4b30      	ldr	r3, [pc, #192]	; (8008d4c <_ZN9Modbusrtu11dwinDecoderEv+0x110>)
 8008c8a:	705a      	strb	r2, [r3, #1]
		Ip_Config_Subnet[2] = Rx_Dwin_Data_Buff[13];
 8008c8c:	4b2d      	ldr	r3, [pc, #180]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008c8e:	7b5a      	ldrb	r2, [r3, #13]
 8008c90:	4b2e      	ldr	r3, [pc, #184]	; (8008d4c <_ZN9Modbusrtu11dwinDecoderEv+0x110>)
 8008c92:	709a      	strb	r2, [r3, #2]
		Ip_Config_Subnet[3] = Rx_Dwin_Data_Buff[15];
 8008c94:	4b2b      	ldr	r3, [pc, #172]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008c96:	7bda      	ldrb	r2, [r3, #15]
 8008c98:	4b2c      	ldr	r3, [pc, #176]	; (8008d4c <_ZN9Modbusrtu11dwinDecoderEv+0x110>)
 8008c9a:	70da      	strb	r2, [r3, #3]

		Ip_config_gateway[0] = Rx_Dwin_Data_Buff[17];
 8008c9c:	4b29      	ldr	r3, [pc, #164]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008c9e:	7c5a      	ldrb	r2, [r3, #17]
 8008ca0:	4b2b      	ldr	r3, [pc, #172]	; (8008d50 <_ZN9Modbusrtu11dwinDecoderEv+0x114>)
 8008ca2:	701a      	strb	r2, [r3, #0]
		Ip_config_gateway[1] = Rx_Dwin_Data_Buff[19];
 8008ca4:	4b27      	ldr	r3, [pc, #156]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008ca6:	7cda      	ldrb	r2, [r3, #19]
 8008ca8:	4b29      	ldr	r3, [pc, #164]	; (8008d50 <_ZN9Modbusrtu11dwinDecoderEv+0x114>)
 8008caa:	705a      	strb	r2, [r3, #1]
		Ip_config_gateway[2] = Rx_Dwin_Data_Buff[21];
 8008cac:	4b25      	ldr	r3, [pc, #148]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008cae:	7d5a      	ldrb	r2, [r3, #21]
 8008cb0:	4b27      	ldr	r3, [pc, #156]	; (8008d50 <_ZN9Modbusrtu11dwinDecoderEv+0x114>)
 8008cb2:	709a      	strb	r2, [r3, #2]
		Ip_config_gateway[3] = Rx_Dwin_Data_Buff[23];
 8008cb4:	4b23      	ldr	r3, [pc, #140]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008cb6:	7dda      	ldrb	r2, [r3, #23]
 8008cb8:	4b25      	ldr	r3, [pc, #148]	; (8008d50 <_ZN9Modbusrtu11dwinDecoderEv+0x114>)
 8008cba:	70da      	strb	r2, [r3, #3]

		Ip_config_DNS[0] = Rx_Dwin_Data_Buff[25];
 8008cbc:	4b21      	ldr	r3, [pc, #132]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008cbe:	7e5a      	ldrb	r2, [r3, #25]
 8008cc0:	4b24      	ldr	r3, [pc, #144]	; (8008d54 <_ZN9Modbusrtu11dwinDecoderEv+0x118>)
 8008cc2:	701a      	strb	r2, [r3, #0]
		Ip_config_DNS[1] = Rx_Dwin_Data_Buff[27];
 8008cc4:	4b1f      	ldr	r3, [pc, #124]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008cc6:	7eda      	ldrb	r2, [r3, #27]
 8008cc8:	4b22      	ldr	r3, [pc, #136]	; (8008d54 <_ZN9Modbusrtu11dwinDecoderEv+0x118>)
 8008cca:	705a      	strb	r2, [r3, #1]
		Ip_config_DNS[2] = Rx_Dwin_Data_Buff[29];
 8008ccc:	4b1d      	ldr	r3, [pc, #116]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008cce:	7f5a      	ldrb	r2, [r3, #29]
 8008cd0:	4b20      	ldr	r3, [pc, #128]	; (8008d54 <_ZN9Modbusrtu11dwinDecoderEv+0x118>)
 8008cd2:	709a      	strb	r2, [r3, #2]
		Ip_config_DNS[3] = Rx_Dwin_Data_Buff[31];
 8008cd4:	4b1b      	ldr	r3, [pc, #108]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008cd6:	7fda      	ldrb	r2, [r3, #31]
 8008cd8:	4b1e      	ldr	r3, [pc, #120]	; (8008d54 <_ZN9Modbusrtu11dwinDecoderEv+0x118>)
 8008cda:	70da      	strb	r2, [r3, #3]

		Ip_config_Server[0] = Rx_Dwin_Data_Buff[33];
 8008cdc:	4b19      	ldr	r3, [pc, #100]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008cde:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008ce2:	4b1d      	ldr	r3, [pc, #116]	; (8008d58 <_ZN9Modbusrtu11dwinDecoderEv+0x11c>)
 8008ce4:	701a      	strb	r2, [r3, #0]
		Ip_config_Server[1] = Rx_Dwin_Data_Buff[35];
 8008ce6:	4b17      	ldr	r3, [pc, #92]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008ce8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8008cec:	4b1a      	ldr	r3, [pc, #104]	; (8008d58 <_ZN9Modbusrtu11dwinDecoderEv+0x11c>)
 8008cee:	705a      	strb	r2, [r3, #1]
		Ip_config_Server[2] = Rx_Dwin_Data_Buff[37];
 8008cf0:	4b14      	ldr	r3, [pc, #80]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008cf2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8008cf6:	4b18      	ldr	r3, [pc, #96]	; (8008d58 <_ZN9Modbusrtu11dwinDecoderEv+0x11c>)
 8008cf8:	709a      	strb	r2, [r3, #2]
		Ip_config_Server[3] = Rx_Dwin_Data_Buff[39];
 8008cfa:	4b12      	ldr	r3, [pc, #72]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008cfc:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8008d00:	4b15      	ldr	r3, [pc, #84]	; (8008d58 <_ZN9Modbusrtu11dwinDecoderEv+0x11c>)
 8008d02:	70da      	strb	r2, [r3, #3]

		Ip_config_Server_Port = ((Rx_Dwin_Data_Buff[40]<<8)|(Rx_Dwin_Data_Buff[41]));
 8008d04:	4b0f      	ldr	r3, [pc, #60]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d0a:	021b      	lsls	r3, r3, #8
 8008d0c:	b21a      	sxth	r2, r3
 8008d0e:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008d10:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008d14:	b21b      	sxth	r3, r3
 8008d16:	4313      	orrs	r3, r2
 8008d18:	b21b      	sxth	r3, r3
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	4b0f      	ldr	r3, [pc, #60]	; (8008d5c <_ZN9Modbusrtu11dwinDecoderEv+0x120>)
 8008d1e:	801a      	strh	r2, [r3, #0]

		No_Of_Furnace 		= Rx_Dwin_Data_Buff[43];
 8008d20:	4b08      	ldr	r3, [pc, #32]	; (8008d44 <_ZN9Modbusrtu11dwinDecoderEv+0x108>)
 8008d22:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8008d26:	4b0e      	ldr	r3, [pc, #56]	; (8008d60 <_ZN9Modbusrtu11dwinDecoderEv+0x124>)
 8008d28:	701a      	strb	r2, [r3, #0]
		Update_Dwin_Set_Data =1;
 8008d2a:	4b0e      	ldr	r3, [pc, #56]	; (8008d64 <_ZN9Modbusrtu11dwinDecoderEv+0x128>)
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	701a      	strb	r2, [r3, #0]
 8008d30:	e000      	b.n	8008d34 <_ZN9Modbusrtu11dwinDecoderEv+0xf8>
	if(Rx_Dwin_Complete == 0){return;}
 8008d32:	bf00      	nop
	}
}
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	20000121 	.word	0x20000121
 8008d44:	20000124 	.word	0x20000124
 8008d48:	20002d80 	.word	0x20002d80
 8008d4c:	20002d84 	.word	0x20002d84
 8008d50:	20002d88 	.word	0x20002d88
 8008d54:	20002d8c 	.word	0x20002d8c
 8008d58:	20002d90 	.word	0x20002d90
 8008d5c:	20002d96 	.word	0x20002d96
 8008d60:	20002d7d 	.word	0x20002d7d
 8008d64:	20002d94 	.word	0x20002d94

08008d68 <HAL_UART_TxCpltCallback>:
//Hardware callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart1,u8rxbuf,9);
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <_ZN14OfflineStorageC1Ev>:
/*check for change in data*/
extern uint8_t Trigger_Memory_Update,Trigger_Memory_Furnaceno;
extern SpectrumResult SpectrumResult_furnace[4];


OfflineStorage::OfflineStorage() {
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	4a04      	ldr	r2, [pc, #16]	; (8008d98 <_ZN14OfflineStorageC1Ev+0x1c>)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	0800f538 	.word	0x0800f538

08008d9c <_ZN14OfflineStorageD1Ev>:

OfflineStorage::~OfflineStorage() {
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	4a04      	ldr	r2, [pc, #16]	; (8008db8 <_ZN14OfflineStorageD1Ev+0x1c>)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	0800f538 	.word	0x0800f538

08008dbc <_ZN14OfflineStorageD0Ev>:
OfflineStorage::~OfflineStorage() {
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
}
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7ff ffe9 	bl	8008d9c <_ZN14OfflineStorageD1Ev>
 8008dca:	2144      	movs	r1, #68	; 0x44
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f005 f82a 	bl	800de26 <_ZdlPvj>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <_ZN14OfflineStorage3runEv>:

void OfflineStorage::run()
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
	m_writesetdata();
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f805 	bl	8008df4 <_ZN14OfflineStorage14m_writesetdataEv>
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <_ZN14OfflineStorage14m_writesetdataEv>:

void OfflineStorage::m_writesetdata(){
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
	if(Trigger_Memory_Update)
 8008dfc:	4b61      	ldr	r3, [pc, #388]	; (8008f84 <_ZN14OfflineStorage14m_writesetdataEv+0x190>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d036      	beq.n	8008e72 <_ZN14OfflineStorage14m_writesetdataEv+0x7e>
	{
		Trigger_Memory_Update=0;
 8008e04:	4b5f      	ldr	r3, [pc, #380]	; (8008f84 <_ZN14OfflineStorage14m_writesetdataEv+0x190>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]

		sectorselect = Trigger_Memory_Furnaceno*2;
 8008e0a:	4b5f      	ldr	r3, [pc, #380]	; (8008f88 <_ZN14OfflineStorage14m_writesetdataEv+0x194>)
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	005b      	lsls	r3, r3, #1
 8008e10:	461a      	mov	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	605a      	str	r2, [r3, #4]
		W25qxx_EraseSector(sectorselect);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7f8 fdde 	bl	80019dc <W25qxx_EraseSector>
		W25qxx_WriteSector(&SpectrumResult_furnace[Trigger_Memory_Furnaceno].result_spectrum[0],sectorselect,0,218);
 8008e20:	4b59      	ldr	r3, [pc, #356]	; (8008f88 <_ZN14OfflineStorage14m_writesetdataEv+0x194>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008e2a:	fb02 f303 	mul.w	r3, r2, r3
 8008e2e:	4a57      	ldr	r2, [pc, #348]	; (8008f8c <_ZN14OfflineStorage14m_writesetdataEv+0x198>)
 8008e30:	1898      	adds	r0, r3, r2
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6859      	ldr	r1, [r3, #4]
 8008e36:	23da      	movs	r3, #218	; 0xda
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f7f8 fec1 	bl	8001bc0 <W25qxx_WriteSector>
		W25qxx_EraseSector(sectorselect+1);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	3301      	adds	r3, #1
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7f8 fdc9 	bl	80019dc <W25qxx_EraseSector>
		W25qxx_WriteSector(&SpectrumResult_furnace[Trigger_Memory_Furnaceno].result_spectrum[218],(sectorselect+1),0,200);
 8008e4a:	4b4f      	ldr	r3, [pc, #316]	; (8008f88 <_ZN14OfflineStorage14m_writesetdataEv+0x194>)
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008e54:	fb02 f303 	mul.w	r3, r2, r3
 8008e58:	33da      	adds	r3, #218	; 0xda
 8008e5a:	4a4c      	ldr	r2, [pc, #304]	; (8008f8c <_ZN14OfflineStorage14m_writesetdataEv+0x198>)
 8008e5c:	1898      	adds	r0, r3, r2
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	1c59      	adds	r1, r3, #1
 8008e64:	23c8      	movs	r3, #200	; 0xc8
 8008e66:	2200      	movs	r2, #0
 8008e68:	f7f8 feaa 	bl	8001bc0 <W25qxx_WriteSector>
		Trigger_Memory_Furnaceno=0;
 8008e6c:	4b46      	ldr	r3, [pc, #280]	; (8008f88 <_ZN14OfflineStorage14m_writesetdataEv+0x194>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	701a      	strb	r2, [r3, #0]
	}
	if(Update_Dwin_Set_Data)
 8008e72:	4b47      	ldr	r3, [pc, #284]	; (8008f90 <_ZN14OfflineStorage14m_writesetdataEv+0x19c>)
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d07f      	beq.n	8008f7a <_ZN14OfflineStorage14m_writesetdataEv+0x186>
	{
		Update_Dwin_Set_Data=0;
 8008e7a:	4b45      	ldr	r3, [pc, #276]	; (8008f90 <_ZN14OfflineStorage14m_writesetdataEv+0x19c>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(100);
 8008e80:	2064      	movs	r0, #100	; 0x64
 8008e82:	f7f8 fdab 	bl	80019dc <W25qxx_EraseSector>
		m_writeDwinBuf[0] = Ip_config_Ip[0];
 8008e86:	4b43      	ldr	r3, [pc, #268]	; (8008f94 <_ZN14OfflineStorage14m_writesetdataEv+0x1a0>)
 8008e88:	781a      	ldrb	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		m_writeDwinBuf[1] = Ip_config_Ip[1];
 8008e90:	4b40      	ldr	r3, [pc, #256]	; (8008f94 <_ZN14OfflineStorage14m_writesetdataEv+0x1a0>)
 8008e92:	785a      	ldrb	r2, [r3, #1]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		m_writeDwinBuf[2] = Ip_config_Ip[2];
 8008e9a:	4b3e      	ldr	r3, [pc, #248]	; (8008f94 <_ZN14OfflineStorage14m_writesetdataEv+0x1a0>)
 8008e9c:	789a      	ldrb	r2, [r3, #2]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		m_writeDwinBuf[3] = Ip_config_Ip[3];
 8008ea4:	4b3b      	ldr	r3, [pc, #236]	; (8008f94 <_ZN14OfflineStorage14m_writesetdataEv+0x1a0>)
 8008ea6:	78da      	ldrb	r2, [r3, #3]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

		m_writeDwinBuf[4] = Ip_Config_Subnet[0];
 8008eae:	4b3a      	ldr	r3, [pc, #232]	; (8008f98 <_ZN14OfflineStorage14m_writesetdataEv+0x1a4>)
 8008eb0:	781a      	ldrb	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		m_writeDwinBuf[5] = Ip_Config_Subnet[1];
 8008eb8:	4b37      	ldr	r3, [pc, #220]	; (8008f98 <_ZN14OfflineStorage14m_writesetdataEv+0x1a4>)
 8008eba:	785a      	ldrb	r2, [r3, #1]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		m_writeDwinBuf[6] = Ip_Config_Subnet[2];
 8008ec2:	4b35      	ldr	r3, [pc, #212]	; (8008f98 <_ZN14OfflineStorage14m_writesetdataEv+0x1a4>)
 8008ec4:	789a      	ldrb	r2, [r3, #2]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		m_writeDwinBuf[7] = Ip_Config_Subnet[3];
 8008ecc:	4b32      	ldr	r3, [pc, #200]	; (8008f98 <_ZN14OfflineStorage14m_writesetdataEv+0x1a4>)
 8008ece:	78da      	ldrb	r2, [r3, #3]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

		m_writeDwinBuf[8] = Ip_config_gateway[0];
 8008ed6:	4b31      	ldr	r3, [pc, #196]	; (8008f9c <_ZN14OfflineStorage14m_writesetdataEv+0x1a8>)
 8008ed8:	781a      	ldrb	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		m_writeDwinBuf[9] = Ip_config_gateway[1];
 8008ee0:	4b2e      	ldr	r3, [pc, #184]	; (8008f9c <_ZN14OfflineStorage14m_writesetdataEv+0x1a8>)
 8008ee2:	785a      	ldrb	r2, [r3, #1]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		m_writeDwinBuf[10] = Ip_config_gateway[2];
 8008eea:	4b2c      	ldr	r3, [pc, #176]	; (8008f9c <_ZN14OfflineStorage14m_writesetdataEv+0x1a8>)
 8008eec:	789a      	ldrb	r2, [r3, #2]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		m_writeDwinBuf[11] = Ip_config_gateway[3];
 8008ef4:	4b29      	ldr	r3, [pc, #164]	; (8008f9c <_ZN14OfflineStorage14m_writesetdataEv+0x1a8>)
 8008ef6:	78da      	ldrb	r2, [r3, #3]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

		m_writeDwinBuf[12] = Ip_config_DNS[0];
 8008efe:	4b28      	ldr	r3, [pc, #160]	; (8008fa0 <_ZN14OfflineStorage14m_writesetdataEv+0x1ac>)
 8008f00:	781a      	ldrb	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		m_writeDwinBuf[13] = Ip_config_DNS[1];
 8008f08:	4b25      	ldr	r3, [pc, #148]	; (8008fa0 <_ZN14OfflineStorage14m_writesetdataEv+0x1ac>)
 8008f0a:	785a      	ldrb	r2, [r3, #1]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		m_writeDwinBuf[14] = Ip_config_DNS[2];
 8008f12:	4b23      	ldr	r3, [pc, #140]	; (8008fa0 <_ZN14OfflineStorage14m_writesetdataEv+0x1ac>)
 8008f14:	789a      	ldrb	r2, [r3, #2]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		m_writeDwinBuf[15] = Ip_config_DNS[3];
 8008f1c:	4b20      	ldr	r3, [pc, #128]	; (8008fa0 <_ZN14OfflineStorage14m_writesetdataEv+0x1ac>)
 8008f1e:	78da      	ldrb	r2, [r3, #3]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		m_writeDwinBuf[16] = Ip_config_Server[0];
 8008f26:	4b1f      	ldr	r3, [pc, #124]	; (8008fa4 <_ZN14OfflineStorage14m_writesetdataEv+0x1b0>)
 8008f28:	781a      	ldrb	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		m_writeDwinBuf[17] = Ip_config_Server[1];
 8008f30:	4b1c      	ldr	r3, [pc, #112]	; (8008fa4 <_ZN14OfflineStorage14m_writesetdataEv+0x1b0>)
 8008f32:	785a      	ldrb	r2, [r3, #1]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		m_writeDwinBuf[18] = Ip_config_Server[2];
 8008f3a:	4b1a      	ldr	r3, [pc, #104]	; (8008fa4 <_ZN14OfflineStorage14m_writesetdataEv+0x1b0>)
 8008f3c:	789a      	ldrb	r2, [r3, #2]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		m_writeDwinBuf[19] = Ip_config_Server[3];
 8008f44:	4b17      	ldr	r3, [pc, #92]	; (8008fa4 <_ZN14OfflineStorage14m_writesetdataEv+0x1b0>)
 8008f46:	78da      	ldrb	r2, [r3, #3]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

		m_writeDwinBuf[20] = (unsigned char)(Ip_config_Server_Port>>8)&0x00ff;
 8008f4e:	4b16      	ldr	r3, [pc, #88]	; (8008fa8 <_ZN14OfflineStorage14m_writesetdataEv+0x1b4>)
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	0a1b      	lsrs	r3, r3, #8
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		m_writeDwinBuf[21] = (unsigned char)(Ip_config_Server_Port)&0x00ff;
 8008f5e:	4b12      	ldr	r3, [pc, #72]	; (8008fa8 <_ZN14OfflineStorage14m_writesetdataEv+0x1b4>)
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		W25qxx_WriteSector(m_writeDwinBuf,100,0,22);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8008f70:	2316      	movs	r3, #22
 8008f72:	2200      	movs	r2, #0
 8008f74:	2164      	movs	r1, #100	; 0x64
 8008f76:	f7f8 fe23 	bl	8001bc0 <W25qxx_WriteSector>
	}
}
 8008f7a:	bf00      	nop
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20002d75 	.word	0x20002d75
 8008f88:	20002d76 	.word	0x20002d76
 8008f8c:	200025a4 	.word	0x200025a4
 8008f90:	20002d94 	.word	0x20002d94
 8008f94:	20002d80 	.word	0x20002d80
 8008f98:	20002d84 	.word	0x20002d84
 8008f9c:	20002d88 	.word	0x20002d88
 8008fa0:	20002d8c 	.word	0x20002d8c
 8008fa4:	20002d90 	.word	0x20002d90
 8008fa8:	20002d96 	.word	0x20002d96

08008fac <_ZN14OfflineStorage19ReadOfflinedataInitEv>:


void OfflineStorage::ReadOfflinedataInit()
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(&SpectrumResult_furnace[0].result_spectrum[0],0,0,218);
 8008fb4:	23da      	movs	r3, #218	; 0xda
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	2100      	movs	r1, #0
 8008fba:	484a      	ldr	r0, [pc, #296]	; (80090e4 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x138>)
 8008fbc:	f7f8 fee0 	bl	8001d80 <W25qxx_ReadSector>
	W25qxx_ReadSector(&SpectrumResult_furnace[0].result_spectrum[218],1,0,200);
 8008fc0:	23c8      	movs	r3, #200	; 0xc8
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	4848      	ldr	r0, [pc, #288]	; (80090e8 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x13c>)
 8008fc8:	f7f8 feda 	bl	8001d80 <W25qxx_ReadSector>


	W25qxx_ReadSector(&SpectrumResult_furnace[1].result_spectrum[0],2,0,218);
 8008fcc:	23da      	movs	r3, #218	; 0xda
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2102      	movs	r1, #2
 8008fd2:	4846      	ldr	r0, [pc, #280]	; (80090ec <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x140>)
 8008fd4:	f7f8 fed4 	bl	8001d80 <W25qxx_ReadSector>
	W25qxx_ReadSector(&SpectrumResult_furnace[1].result_spectrum[218],3,0,200);
 8008fd8:	23c8      	movs	r3, #200	; 0xc8
 8008fda:	2200      	movs	r2, #0
 8008fdc:	2103      	movs	r1, #3
 8008fde:	4844      	ldr	r0, [pc, #272]	; (80090f0 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x144>)
 8008fe0:	f7f8 fece 	bl	8001d80 <W25qxx_ReadSector>

	W25qxx_ReadSector(&SpectrumResult_furnace[2].result_spectrum[0],4,0,218);
 8008fe4:	23da      	movs	r3, #218	; 0xda
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2104      	movs	r1, #4
 8008fea:	4842      	ldr	r0, [pc, #264]	; (80090f4 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x148>)
 8008fec:	f7f8 fec8 	bl	8001d80 <W25qxx_ReadSector>
	W25qxx_ReadSector(&SpectrumResult_furnace[2].result_spectrum[218],5,0,200);
 8008ff0:	23c8      	movs	r3, #200	; 0xc8
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2105      	movs	r1, #5
 8008ff6:	4840      	ldr	r0, [pc, #256]	; (80090f8 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x14c>)
 8008ff8:	f7f8 fec2 	bl	8001d80 <W25qxx_ReadSector>

	W25qxx_ReadSector(&SpectrumResult_furnace[3].result_spectrum[0],6,0,218);
 8008ffc:	23da      	movs	r3, #218	; 0xda
 8008ffe:	2200      	movs	r2, #0
 8009000:	2106      	movs	r1, #6
 8009002:	483e      	ldr	r0, [pc, #248]	; (80090fc <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x150>)
 8009004:	f7f8 febc 	bl	8001d80 <W25qxx_ReadSector>
	W25qxx_ReadSector(&SpectrumResult_furnace[3].result_spectrum[218],7,0,200);
 8009008:	23c8      	movs	r3, #200	; 0xc8
 800900a:	2200      	movs	r2, #0
 800900c:	2107      	movs	r1, #7
 800900e:	483c      	ldr	r0, [pc, #240]	; (8009100 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x154>)
 8009010:	f7f8 feb6 	bl	8001d80 <W25qxx_ReadSector>

	W25qxx_ReadSector(m_readFlashBuf,100,0,22);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f103 0008 	add.w	r0, r3, #8
 800901a:	2316      	movs	r3, #22
 800901c:	2200      	movs	r2, #0
 800901e:	2164      	movs	r1, #100	; 0x64
 8009020:	f7f8 feae 	bl	8001d80 <W25qxx_ReadSector>

	 Ip_config_Ip[0] = m_readFlashBuf[0];
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	7a1a      	ldrb	r2, [r3, #8]
 8009028:	4b36      	ldr	r3, [pc, #216]	; (8009104 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x158>)
 800902a:	701a      	strb	r2, [r3, #0]
	 Ip_config_Ip[1] = m_readFlashBuf[1];
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	7a5a      	ldrb	r2, [r3, #9]
 8009030:	4b34      	ldr	r3, [pc, #208]	; (8009104 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x158>)
 8009032:	705a      	strb	r2, [r3, #1]
	 Ip_config_Ip[2] = m_readFlashBuf[2];
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	7a9a      	ldrb	r2, [r3, #10]
 8009038:	4b32      	ldr	r3, [pc, #200]	; (8009104 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x158>)
 800903a:	709a      	strb	r2, [r3, #2]
	 Ip_config_Ip[3] = m_readFlashBuf[3];
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	7ada      	ldrb	r2, [r3, #11]
 8009040:	4b30      	ldr	r3, [pc, #192]	; (8009104 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x158>)
 8009042:	70da      	strb	r2, [r3, #3]

	 Ip_Config_Subnet[0]= m_readFlashBuf[4];
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	7b1a      	ldrb	r2, [r3, #12]
 8009048:	4b2f      	ldr	r3, [pc, #188]	; (8009108 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x15c>)
 800904a:	701a      	strb	r2, [r3, #0]
	 Ip_Config_Subnet[1]= m_readFlashBuf[5];
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	7b5a      	ldrb	r2, [r3, #13]
 8009050:	4b2d      	ldr	r3, [pc, #180]	; (8009108 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x15c>)
 8009052:	705a      	strb	r2, [r3, #1]
	 Ip_Config_Subnet[2]= m_readFlashBuf[6];
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	7b9a      	ldrb	r2, [r3, #14]
 8009058:	4b2b      	ldr	r3, [pc, #172]	; (8009108 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x15c>)
 800905a:	709a      	strb	r2, [r3, #2]
	 Ip_Config_Subnet[3]= m_readFlashBuf[7];
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	7bda      	ldrb	r2, [r3, #15]
 8009060:	4b29      	ldr	r3, [pc, #164]	; (8009108 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x15c>)
 8009062:	70da      	strb	r2, [r3, #3]

	 Ip_config_gateway[0] = m_readFlashBuf[8];
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	7c1a      	ldrb	r2, [r3, #16]
 8009068:	4b28      	ldr	r3, [pc, #160]	; (800910c <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x160>)
 800906a:	701a      	strb	r2, [r3, #0]
	 Ip_config_gateway[1] = m_readFlashBuf[9];
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	7c5a      	ldrb	r2, [r3, #17]
 8009070:	4b26      	ldr	r3, [pc, #152]	; (800910c <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x160>)
 8009072:	705a      	strb	r2, [r3, #1]
	 Ip_config_gateway[2] = m_readFlashBuf[10];
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	7c9a      	ldrb	r2, [r3, #18]
 8009078:	4b24      	ldr	r3, [pc, #144]	; (800910c <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x160>)
 800907a:	709a      	strb	r2, [r3, #2]
	 Ip_config_gateway[3] = m_readFlashBuf[11];
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	7cda      	ldrb	r2, [r3, #19]
 8009080:	4b22      	ldr	r3, [pc, #136]	; (800910c <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x160>)
 8009082:	70da      	strb	r2, [r3, #3]

	 Ip_config_DNS[0] = m_readFlashBuf[12];
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	7d1a      	ldrb	r2, [r3, #20]
 8009088:	4b21      	ldr	r3, [pc, #132]	; (8009110 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x164>)
 800908a:	701a      	strb	r2, [r3, #0]
	 Ip_config_DNS[1] = m_readFlashBuf[13];
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	7d5a      	ldrb	r2, [r3, #21]
 8009090:	4b1f      	ldr	r3, [pc, #124]	; (8009110 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x164>)
 8009092:	705a      	strb	r2, [r3, #1]
	 Ip_config_DNS[2] = m_readFlashBuf[14];
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	7d9a      	ldrb	r2, [r3, #22]
 8009098:	4b1d      	ldr	r3, [pc, #116]	; (8009110 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x164>)
 800909a:	709a      	strb	r2, [r3, #2]
	 Ip_config_DNS[3] = m_readFlashBuf[15];
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	7dda      	ldrb	r2, [r3, #23]
 80090a0:	4b1b      	ldr	r3, [pc, #108]	; (8009110 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x164>)
 80090a2:	70da      	strb	r2, [r3, #3]

	 Ip_config_Server[0] = m_readFlashBuf[16];
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	7e1a      	ldrb	r2, [r3, #24]
 80090a8:	4b1a      	ldr	r3, [pc, #104]	; (8009114 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x168>)
 80090aa:	701a      	strb	r2, [r3, #0]
	 Ip_config_Server[1] = m_readFlashBuf[17];
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	7e5a      	ldrb	r2, [r3, #25]
 80090b0:	4b18      	ldr	r3, [pc, #96]	; (8009114 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x168>)
 80090b2:	705a      	strb	r2, [r3, #1]
	 Ip_config_Server[2] = m_readFlashBuf[18];
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	7e9a      	ldrb	r2, [r3, #26]
 80090b8:	4b16      	ldr	r3, [pc, #88]	; (8009114 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x168>)
 80090ba:	709a      	strb	r2, [r3, #2]
	 Ip_config_Server[3] = m_readFlashBuf[19];
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	7eda      	ldrb	r2, [r3, #27]
 80090c0:	4b14      	ldr	r3, [pc, #80]	; (8009114 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x168>)
 80090c2:	70da      	strb	r2, [r3, #3]

	 Ip_config_Server_Port = ((m_readFlashBuf[20]<<8)|(m_readFlashBuf[21]));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	7f1b      	ldrb	r3, [r3, #28]
 80090c8:	021b      	lsls	r3, r3, #8
 80090ca:	b21a      	sxth	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	7f5b      	ldrb	r3, [r3, #29]
 80090d0:	b21b      	sxth	r3, r3
 80090d2:	4313      	orrs	r3, r2
 80090d4:	b21b      	sxth	r3, r3
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	4b0f      	ldr	r3, [pc, #60]	; (8009118 <_ZN14OfflineStorage19ReadOfflinedataInitEv+0x16c>)
 80090da:	801a      	strh	r2, [r3, #0]

}
 80090dc:	bf00      	nop
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	200025a4 	.word	0x200025a4
 80090e8:	2000267e 	.word	0x2000267e
 80090ec:	20002798 	.word	0x20002798
 80090f0:	20002872 	.word	0x20002872
 80090f4:	2000298c 	.word	0x2000298c
 80090f8:	20002a66 	.word	0x20002a66
 80090fc:	20002b80 	.word	0x20002b80
 8009100:	20002c5a 	.word	0x20002c5a
 8009104:	20002d80 	.word	0x20002d80
 8009108:	20002d84 	.word	0x20002d84
 800910c:	20002d88 	.word	0x20002d88
 8009110:	20002d8c 	.word	0x20002d8c
 8009114:	20002d90 	.word	0x20002d90
 8009118:	20002d96 	.word	0x20002d96

0800911c <cppMain>:
  * @brief  The application entry point for cpp
  * @retval int
  */
//TIM_HandleTypeDef htim6;
void cppMain()
{
 800911c:	b580      	push	{r7, lr}
 800911e:	f5ad 5da5 	sub.w	sp, sp, #5280	; 0x14a0
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
	GLCD glcd;
 8009126:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800912a:	4618      	mov	r0, r3
 800912c:	f7fb f9b0 	bl	8004490 <_ZN4GLCDC1Ev>
	DisplayRoutine displayRoutineInst;
 8009130:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009134:	3b10      	subs	r3, #16
 8009136:	4618      	mov	r0, r3
 8009138:	f7fa ff76 	bl	8004028 <_ZN14DisplayRoutineC1Ev>
	BusinessLogic businessLogicInst;
 800913c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009140:	3b18      	subs	r3, #24
 8009142:	4618      	mov	r0, r3
 8009144:	f7fa febe 	bl	8003ec4 <_ZN13BusinessLogicC1Ev>
	OfflineStorage offlineStorageInst;
 8009148:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800914c:	3b1c      	subs	r3, #28
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff fe14 	bl	8008d7c <_ZN14OfflineStorageC1Ev>
	Modbusrtu dwininst;
 8009154:	f107 0318 	add.w	r3, r7, #24
 8009158:	3b14      	subs	r3, #20
 800915a:	4618      	mov	r0, r3
 800915c:	f7ff fc96 	bl	8008a8c <_ZN9ModbusrtuC1Ev>

//	ESP8266 esp8266Inst;
//	SHIFT shiftInst;
	offlineStorageInst.ReadOfflinedataInit();
 8009160:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009164:	3b1c      	subs	r3, #28
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff ff20 	bl	8008fac <_ZN14OfflineStorage19ReadOfflinedataInitEv>
	displayRoutineInst.Init();
 800916c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009170:	3b10      	subs	r3, #16
 8009172:	4618      	mov	r0, r3
 8009174:	f7fb f954 	bl	8004420 <_ZN14DisplayRoutine4InitEv>

	wiz5500Init();
 8009178:	f7fa f81e 	bl	80031b8 <wiz5500Init>
//	esp8266Inst.Init();
//	ReadOnlineData();
	TxSeqComplete=1;
 800917c:	4b1c      	ldr	r3, [pc, #112]	; (80091f0 <cppMain+0xd4>)
 800917e:	2201      	movs	r2, #1
 8009180:	701a      	strb	r2, [r3, #0]


	while(1)
	{

		if(Flag1MS)
 8009182:	4b1c      	ldr	r3, [pc, #112]	; (80091f4 <cppMain+0xd8>)
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00e      	beq.n	80091a8 <cppMain+0x8c>
		{
			Flag1MS=0;
 800918a:	4b1a      	ldr	r3, [pc, #104]	; (80091f4 <cppMain+0xd8>)
 800918c:	2200      	movs	r2, #0
 800918e:	701a      	strb	r2, [r3, #0]
			businessLogicInst.run();
 8009190:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009194:	3b18      	subs	r3, #24
 8009196:	4618      	mov	r0, r3
 8009198:	f7fa fec4 	bl	8003f24 <_ZN13BusinessLogic3runEv>
			offlineStorageInst.run();
 800919c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80091a0:	3b1c      	subs	r3, #28
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7ff fe1a 	bl	8008ddc <_ZN14OfflineStorage3runEv>
		}
		if(Flag1Second)
 80091a8:	4b13      	ldr	r3, [pc, #76]	; (80091f8 <cppMain+0xdc>)
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d016      	beq.n	80091de <cppMain+0xc2>
		{
			Flag1Second=0;
 80091b0:	4b11      	ldr	r3, [pc, #68]	; (80091f8 <cppMain+0xdc>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	701a      	strb	r2, [r3, #0]
			displayRoutineInst.run();
 80091b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80091ba:	3b10      	subs	r3, #16
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fa ffbb 	bl	8004138 <_ZN14DisplayRoutine3runEv>
			ethernetHTTPRoutine();
 80091c2:	f7fa f8bd 	bl	8003340 <ethernetHTTPRoutine>
			dwininst.dwinFrame();
 80091c6:	f107 0318 	add.w	r3, r7, #24
 80091ca:	3b14      	subs	r3, #20
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7ff fc8d 	bl	8008aec <_ZN9Modbusrtu9dwinFrameEv>
			dwininst.dwinDecoder();
 80091d2:	f107 0318 	add.w	r3, r7, #24
 80091d6:	3b14      	subs	r3, #20
 80091d8:	4618      	mov	r0, r3
 80091da:	f7ff fd2f 	bl	8008c3c <_ZN9Modbusrtu11dwinDecoderEv>
		}
		if(Flag2Second)
 80091de:	4b07      	ldr	r3, [pc, #28]	; (80091fc <cppMain+0xe0>)
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0cd      	beq.n	8009182 <cppMain+0x66>
		{
			Flag2Second=0;
 80091e6:	4b05      	ldr	r3, [pc, #20]	; (80091fc <cppMain+0xe0>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	701a      	strb	r2, [r3, #0]
		if(Flag1MS)
 80091ec:	e7c9      	b.n	8009182 <cppMain+0x66>
 80091ee:	bf00      	nop
 80091f0:	20002d98 	.word	0x20002d98
 80091f4:	2000010c 	.word	0x2000010c
 80091f8:	2000010d 	.word	0x2000010d
 80091fc:	2000010e 	.word	0x2000010e

08009200 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800920a:	2003      	movs	r0, #3
 800920c:	f000 f960 	bl	80094d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009210:	200f      	movs	r0, #15
 8009212:	f000 f80d 	bl	8009230 <HAL_InitTick>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	71fb      	strb	r3, [r7, #7]
 8009220:	e001      	b.n	8009226 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009222:	f7f7 fe95 	bl	8000f50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009226:	79fb      	ldrb	r3, [r7, #7]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800923c:	4b17      	ldr	r3, [pc, #92]	; (800929c <HAL_InitTick+0x6c>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d023      	beq.n	800928c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009244:	4b16      	ldr	r3, [pc, #88]	; (80092a0 <HAL_InitTick+0x70>)
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	4b14      	ldr	r3, [pc, #80]	; (800929c <HAL_InitTick+0x6c>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	4619      	mov	r1, r3
 800924e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009252:	fbb3 f3f1 	udiv	r3, r3, r1
 8009256:	fbb2 f3f3 	udiv	r3, r2, r3
 800925a:	4618      	mov	r0, r3
 800925c:	f000 f96d 	bl	800953a <HAL_SYSTICK_Config>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10f      	bne.n	8009286 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b0f      	cmp	r3, #15
 800926a:	d809      	bhi.n	8009280 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800926c:	2200      	movs	r2, #0
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	f04f 30ff 	mov.w	r0, #4294967295
 8009274:	f000 f937 	bl	80094e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009278:	4a0a      	ldr	r2, [pc, #40]	; (80092a4 <HAL_InitTick+0x74>)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	e007      	b.n	8009290 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	73fb      	strb	r3, [r7, #15]
 8009284:	e004      	b.n	8009290 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	73fb      	strb	r3, [r7, #15]
 800928a:	e001      	b.n	8009290 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20000088 	.word	0x20000088
 80092a0:	20000000 	.word	0x20000000
 80092a4:	20000084 	.word	0x20000084

080092a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80092a8:	b480      	push	{r7}
 80092aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80092ac:	4b06      	ldr	r3, [pc, #24]	; (80092c8 <HAL_IncTick+0x20>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	4b06      	ldr	r3, [pc, #24]	; (80092cc <HAL_IncTick+0x24>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4413      	add	r3, r2
 80092b8:	4a04      	ldr	r2, [pc, #16]	; (80092cc <HAL_IncTick+0x24>)
 80092ba:	6013      	str	r3, [r2, #0]
}
 80092bc:	bf00      	nop
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	20000088 	.word	0x20000088
 80092cc:	20002da4 	.word	0x20002da4

080092d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80092d0:	b480      	push	{r7}
 80092d2:	af00      	add	r7, sp, #0
  return uwTick;
 80092d4:	4b03      	ldr	r3, [pc, #12]	; (80092e4 <HAL_GetTick+0x14>)
 80092d6:	681b      	ldr	r3, [r3, #0]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	20002da4 	.word	0x20002da4

080092e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80092f0:	f7ff ffee 	bl	80092d0 <HAL_GetTick>
 80092f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009300:	d005      	beq.n	800930e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8009302:	4b0a      	ldr	r3, [pc, #40]	; (800932c <HAL_Delay+0x44>)
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4413      	add	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800930e:	bf00      	nop
 8009310:	f7ff ffde 	bl	80092d0 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	429a      	cmp	r2, r3
 800931e:	d8f7      	bhi.n	8009310 <HAL_Delay+0x28>
  {
  }
}
 8009320:	bf00      	nop
 8009322:	bf00      	nop
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20000088 	.word	0x20000088

08009330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f003 0307 	and.w	r3, r3, #7
 800933e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009340:	4b0c      	ldr	r3, [pc, #48]	; (8009374 <__NVIC_SetPriorityGrouping+0x44>)
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800934c:	4013      	ands	r3, r2
 800934e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800935c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009362:	4a04      	ldr	r2, [pc, #16]	; (8009374 <__NVIC_SetPriorityGrouping+0x44>)
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	60d3      	str	r3, [r2, #12]
}
 8009368:	bf00      	nop
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	e000ed00 	.word	0xe000ed00

08009378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009378:	b480      	push	{r7}
 800937a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800937c:	4b04      	ldr	r3, [pc, #16]	; (8009390 <__NVIC_GetPriorityGrouping+0x18>)
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	0a1b      	lsrs	r3, r3, #8
 8009382:	f003 0307 	and.w	r3, r3, #7
}
 8009386:	4618      	mov	r0, r3
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	e000ed00 	.word	0xe000ed00

08009394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800939e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	db0b      	blt.n	80093be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80093a6:	79fb      	ldrb	r3, [r7, #7]
 80093a8:	f003 021f 	and.w	r2, r3, #31
 80093ac:	4907      	ldr	r1, [pc, #28]	; (80093cc <__NVIC_EnableIRQ+0x38>)
 80093ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093b2:	095b      	lsrs	r3, r3, #5
 80093b4:	2001      	movs	r0, #1
 80093b6:	fa00 f202 	lsl.w	r2, r0, r2
 80093ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80093be:	bf00      	nop
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	e000e100 	.word	0xe000e100

080093d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	6039      	str	r1, [r7, #0]
 80093da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	db0a      	blt.n	80093fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	490c      	ldr	r1, [pc, #48]	; (800941c <__NVIC_SetPriority+0x4c>)
 80093ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ee:	0112      	lsls	r2, r2, #4
 80093f0:	b2d2      	uxtb	r2, r2
 80093f2:	440b      	add	r3, r1
 80093f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80093f8:	e00a      	b.n	8009410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	4908      	ldr	r1, [pc, #32]	; (8009420 <__NVIC_SetPriority+0x50>)
 8009400:	79fb      	ldrb	r3, [r7, #7]
 8009402:	f003 030f 	and.w	r3, r3, #15
 8009406:	3b04      	subs	r3, #4
 8009408:	0112      	lsls	r2, r2, #4
 800940a:	b2d2      	uxtb	r2, r2
 800940c:	440b      	add	r3, r1
 800940e:	761a      	strb	r2, [r3, #24]
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	e000e100 	.word	0xe000e100
 8009420:	e000ed00 	.word	0xe000ed00

08009424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009424:	b480      	push	{r7}
 8009426:	b089      	sub	sp, #36	; 0x24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	f1c3 0307 	rsb	r3, r3, #7
 800943e:	2b04      	cmp	r3, #4
 8009440:	bf28      	it	cs
 8009442:	2304      	movcs	r3, #4
 8009444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	3304      	adds	r3, #4
 800944a:	2b06      	cmp	r3, #6
 800944c:	d902      	bls.n	8009454 <NVIC_EncodePriority+0x30>
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	3b03      	subs	r3, #3
 8009452:	e000      	b.n	8009456 <NVIC_EncodePriority+0x32>
 8009454:	2300      	movs	r3, #0
 8009456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009458:	f04f 32ff 	mov.w	r2, #4294967295
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	fa02 f303 	lsl.w	r3, r2, r3
 8009462:	43da      	mvns	r2, r3
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	401a      	ands	r2, r3
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800946c:	f04f 31ff 	mov.w	r1, #4294967295
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	fa01 f303 	lsl.w	r3, r1, r3
 8009476:	43d9      	mvns	r1, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800947c:	4313      	orrs	r3, r2
         );
}
 800947e:	4618      	mov	r0, r3
 8009480:	3724      	adds	r7, #36	; 0x24
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
	...

0800948c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	3b01      	subs	r3, #1
 8009498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800949c:	d301      	bcc.n	80094a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800949e:	2301      	movs	r3, #1
 80094a0:	e00f      	b.n	80094c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80094a2:	4a0a      	ldr	r2, [pc, #40]	; (80094cc <SysTick_Config+0x40>)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80094aa:	210f      	movs	r1, #15
 80094ac:	f04f 30ff 	mov.w	r0, #4294967295
 80094b0:	f7ff ff8e 	bl	80093d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80094b4:	4b05      	ldr	r3, [pc, #20]	; (80094cc <SysTick_Config+0x40>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80094ba:	4b04      	ldr	r3, [pc, #16]	; (80094cc <SysTick_Config+0x40>)
 80094bc:	2207      	movs	r2, #7
 80094be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	e000e010 	.word	0xe000e010

080094d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff ff29 	bl	8009330 <__NVIC_SetPriorityGrouping>
}
 80094de:	bf00      	nop
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b086      	sub	sp, #24
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	4603      	mov	r3, r0
 80094ee:	60b9      	str	r1, [r7, #8]
 80094f0:	607a      	str	r2, [r7, #4]
 80094f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80094f4:	2300      	movs	r3, #0
 80094f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80094f8:	f7ff ff3e 	bl	8009378 <__NVIC_GetPriorityGrouping>
 80094fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	68b9      	ldr	r1, [r7, #8]
 8009502:	6978      	ldr	r0, [r7, #20]
 8009504:	f7ff ff8e 	bl	8009424 <NVIC_EncodePriority>
 8009508:	4602      	mov	r2, r0
 800950a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800950e:	4611      	mov	r1, r2
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff ff5d 	bl	80093d0 <__NVIC_SetPriority>
}
 8009516:	bf00      	nop
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	4603      	mov	r3, r0
 8009526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800952c:	4618      	mov	r0, r3
 800952e:	f7ff ff31 	bl	8009394 <__NVIC_EnableIRQ>
}
 8009532:	bf00      	nop
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7ff ffa2 	bl	800948c <SysTick_Config>
 8009548:	4603      	mov	r3, r0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009552:	b480      	push	{r7}
 8009554:	b085      	sub	sp, #20
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b02      	cmp	r3, #2
 8009568:	d008      	beq.n	800957c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2204      	movs	r2, #4
 800956e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e022      	b.n	80095c2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f022 020e 	bic.w	r2, r2, #14
 800958a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 0201 	bic.w	r2, r2, #1
 800959a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a0:	f003 021c 	and.w	r2, r3, #28
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a8:	2101      	movs	r1, #1
 80095aa:	fa01 f202 	lsl.w	r2, r1, r2
 80095ae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d005      	beq.n	80095f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2204      	movs	r2, #4
 80095ea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	73fb      	strb	r3, [r7, #15]
 80095f0:	e029      	b.n	8009646 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 020e 	bic.w	r2, r2, #14
 8009600:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 0201 	bic.w	r2, r2, #1
 8009610:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009616:	f003 021c 	and.w	r2, r3, #28
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961e:	2101      	movs	r1, #1
 8009620:	fa01 f202 	lsl.w	r2, r1, r2
 8009624:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	4798      	blx	r3
    }
  }
  return status;
 8009646:	7bfb      	ldrb	r3, [r7, #15]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009650:	b480      	push	{r7}
 8009652:	b087      	sub	sp, #28
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800965a:	2300      	movs	r3, #0
 800965c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800965e:	e154      	b.n	800990a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	2101      	movs	r1, #1
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	fa01 f303 	lsl.w	r3, r1, r3
 800966c:	4013      	ands	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 8146 	beq.w	8009904 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	f003 0303 	and.w	r3, r3, #3
 8009680:	2b01      	cmp	r3, #1
 8009682:	d005      	beq.n	8009690 <HAL_GPIO_Init+0x40>
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	f003 0303 	and.w	r3, r3, #3
 800968c:	2b02      	cmp	r3, #2
 800968e:	d130      	bne.n	80096f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	2203      	movs	r2, #3
 800969c:	fa02 f303 	lsl.w	r3, r2, r3
 80096a0:	43db      	mvns	r3, r3
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	4013      	ands	r3, r2
 80096a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	68da      	ldr	r2, [r3, #12]
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	fa02 f303 	lsl.w	r3, r2, r3
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80096c6:	2201      	movs	r2, #1
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	fa02 f303 	lsl.w	r3, r2, r3
 80096ce:	43db      	mvns	r3, r3
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	4013      	ands	r3, r2
 80096d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	091b      	lsrs	r3, r3, #4
 80096dc:	f003 0201 	and.w	r2, r3, #1
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	fa02 f303 	lsl.w	r3, r2, r3
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	f003 0303 	and.w	r3, r3, #3
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d017      	beq.n	800972e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	005b      	lsls	r3, r3, #1
 8009708:	2203      	movs	r2, #3
 800970a:	fa02 f303 	lsl.w	r3, r2, r3
 800970e:	43db      	mvns	r3, r3
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	4013      	ands	r3, r2
 8009714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	689a      	ldr	r2, [r3, #8]
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	005b      	lsls	r3, r3, #1
 800971e:	fa02 f303 	lsl.w	r3, r2, r3
 8009722:	693a      	ldr	r2, [r7, #16]
 8009724:	4313      	orrs	r3, r2
 8009726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	2b02      	cmp	r3, #2
 8009738:	d123      	bne.n	8009782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	08da      	lsrs	r2, r3, #3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	3208      	adds	r2, #8
 8009742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	f003 0307 	and.w	r3, r3, #7
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	220f      	movs	r2, #15
 8009752:	fa02 f303 	lsl.w	r3, r2, r3
 8009756:	43db      	mvns	r3, r3
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	4013      	ands	r3, r2
 800975c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	691a      	ldr	r2, [r3, #16]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f003 0307 	and.w	r3, r3, #7
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	fa02 f303 	lsl.w	r3, r2, r3
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	4313      	orrs	r3, r2
 8009772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	08da      	lsrs	r2, r3, #3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	3208      	adds	r2, #8
 800977c:	6939      	ldr	r1, [r7, #16]
 800977e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	2203      	movs	r2, #3
 800978e:	fa02 f303 	lsl.w	r3, r2, r3
 8009792:	43db      	mvns	r3, r3
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	4013      	ands	r3, r2
 8009798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f003 0203 	and.w	r2, r3, #3
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	fa02 f303 	lsl.w	r3, r2, r3
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 80a0 	beq.w	8009904 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097c4:	4b58      	ldr	r3, [pc, #352]	; (8009928 <HAL_GPIO_Init+0x2d8>)
 80097c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c8:	4a57      	ldr	r2, [pc, #348]	; (8009928 <HAL_GPIO_Init+0x2d8>)
 80097ca:	f043 0301 	orr.w	r3, r3, #1
 80097ce:	6613      	str	r3, [r2, #96]	; 0x60
 80097d0:	4b55      	ldr	r3, [pc, #340]	; (8009928 <HAL_GPIO_Init+0x2d8>)
 80097d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	60bb      	str	r3, [r7, #8]
 80097da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80097dc:	4a53      	ldr	r2, [pc, #332]	; (800992c <HAL_GPIO_Init+0x2dc>)
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	089b      	lsrs	r3, r3, #2
 80097e2:	3302      	adds	r3, #2
 80097e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f003 0303 	and.w	r3, r3, #3
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	220f      	movs	r2, #15
 80097f4:	fa02 f303 	lsl.w	r3, r2, r3
 80097f8:	43db      	mvns	r3, r3
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	4013      	ands	r3, r2
 80097fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009806:	d019      	beq.n	800983c <HAL_GPIO_Init+0x1ec>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a49      	ldr	r2, [pc, #292]	; (8009930 <HAL_GPIO_Init+0x2e0>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d013      	beq.n	8009838 <HAL_GPIO_Init+0x1e8>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a48      	ldr	r2, [pc, #288]	; (8009934 <HAL_GPIO_Init+0x2e4>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d00d      	beq.n	8009834 <HAL_GPIO_Init+0x1e4>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a47      	ldr	r2, [pc, #284]	; (8009938 <HAL_GPIO_Init+0x2e8>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d007      	beq.n	8009830 <HAL_GPIO_Init+0x1e0>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a46      	ldr	r2, [pc, #280]	; (800993c <HAL_GPIO_Init+0x2ec>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d101      	bne.n	800982c <HAL_GPIO_Init+0x1dc>
 8009828:	2304      	movs	r3, #4
 800982a:	e008      	b.n	800983e <HAL_GPIO_Init+0x1ee>
 800982c:	2307      	movs	r3, #7
 800982e:	e006      	b.n	800983e <HAL_GPIO_Init+0x1ee>
 8009830:	2303      	movs	r3, #3
 8009832:	e004      	b.n	800983e <HAL_GPIO_Init+0x1ee>
 8009834:	2302      	movs	r3, #2
 8009836:	e002      	b.n	800983e <HAL_GPIO_Init+0x1ee>
 8009838:	2301      	movs	r3, #1
 800983a:	e000      	b.n	800983e <HAL_GPIO_Init+0x1ee>
 800983c:	2300      	movs	r3, #0
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	f002 0203 	and.w	r2, r2, #3
 8009844:	0092      	lsls	r2, r2, #2
 8009846:	4093      	lsls	r3, r2
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	4313      	orrs	r3, r2
 800984c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800984e:	4937      	ldr	r1, [pc, #220]	; (800992c <HAL_GPIO_Init+0x2dc>)
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	089b      	lsrs	r3, r3, #2
 8009854:	3302      	adds	r3, #2
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800985c:	4b38      	ldr	r3, [pc, #224]	; (8009940 <HAL_GPIO_Init+0x2f0>)
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	43db      	mvns	r3, r3
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	4013      	ands	r3, r2
 800986a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4313      	orrs	r3, r2
 800987e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009880:	4a2f      	ldr	r2, [pc, #188]	; (8009940 <HAL_GPIO_Init+0x2f0>)
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009886:	4b2e      	ldr	r3, [pc, #184]	; (8009940 <HAL_GPIO_Init+0x2f0>)
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	43db      	mvns	r3, r3
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	4013      	ands	r3, r2
 8009894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80098aa:	4a25      	ldr	r2, [pc, #148]	; (8009940 <HAL_GPIO_Init+0x2f0>)
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80098b0:	4b23      	ldr	r3, [pc, #140]	; (8009940 <HAL_GPIO_Init+0x2f0>)
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	43db      	mvns	r3, r3
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	4013      	ands	r3, r2
 80098be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80098d4:	4a1a      	ldr	r2, [pc, #104]	; (8009940 <HAL_GPIO_Init+0x2f0>)
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80098da:	4b19      	ldr	r3, [pc, #100]	; (8009940 <HAL_GPIO_Init+0x2f0>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	43db      	mvns	r3, r3
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	4013      	ands	r3, r2
 80098e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80098fe:	4a10      	ldr	r2, [pc, #64]	; (8009940 <HAL_GPIO_Init+0x2f0>)
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	3301      	adds	r3, #1
 8009908:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	fa22 f303 	lsr.w	r3, r2, r3
 8009914:	2b00      	cmp	r3, #0
 8009916:	f47f aea3 	bne.w	8009660 <HAL_GPIO_Init+0x10>
  }
}
 800991a:	bf00      	nop
 800991c:	bf00      	nop
 800991e:	371c      	adds	r7, #28
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	40021000 	.word	0x40021000
 800992c:	40010000 	.word	0x40010000
 8009930:	48000400 	.word	0x48000400
 8009934:	48000800 	.word	0x48000800
 8009938:	48000c00 	.word	0x48000c00
 800993c:	48001000 	.word	0x48001000
 8009940:	40010400 	.word	0x40010400

08009944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	807b      	strh	r3, [r7, #2]
 8009950:	4613      	mov	r3, r2
 8009952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009954:	787b      	ldrb	r3, [r7, #1]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800995a:	887a      	ldrh	r2, [r7, #2]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009960:	e002      	b.n	8009968 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009962:	887a      	ldrh	r2, [r7, #2]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	695b      	ldr	r3, [r3, #20]
 8009984:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009986:	887a      	ldrh	r2, [r7, #2]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4013      	ands	r3, r2
 800998c:	041a      	lsls	r2, r3, #16
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	43d9      	mvns	r1, r3
 8009992:	887b      	ldrh	r3, [r7, #2]
 8009994:	400b      	ands	r3, r1
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	619a      	str	r2, [r3, #24]
}
 800999c:	bf00      	nop
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d101      	bne.n	80099ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e081      	b.n	8009abe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d106      	bne.n	80099d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7f7 fae2 	bl	8000f98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2224      	movs	r2, #36	; 0x24
 80099d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f022 0201 	bic.w	r2, r2, #1
 80099ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80099f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d107      	bne.n	8009a22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	689a      	ldr	r2, [r3, #8]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a1e:	609a      	str	r2, [r3, #8]
 8009a20:	e006      	b.n	8009a30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	689a      	ldr	r2, [r3, #8]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009a2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d104      	bne.n	8009a42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	6812      	ldr	r2, [r2, #0]
 8009a4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68da      	ldr	r2, [r3, #12]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	691a      	ldr	r2, [r3, #16]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	695b      	ldr	r3, [r3, #20]
 8009a6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	430a      	orrs	r2, r1
 8009a7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	69d9      	ldr	r1, [r3, #28]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a1a      	ldr	r2, [r3, #32]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	430a      	orrs	r2, r1
 8009a8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f042 0201 	orr.w	r2, r2, #1
 8009a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b20      	cmp	r3, #32
 8009ada:	d138      	bne.n	8009b4e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d101      	bne.n	8009aea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	e032      	b.n	8009b50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2224      	movs	r2, #36	; 0x24
 8009af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0201 	bic.w	r2, r2, #1
 8009b08:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009b18:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	6819      	ldr	r1, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f042 0201 	orr.w	r2, r2, #1
 8009b38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2220      	movs	r2, #32
 8009b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	e000      	b.n	8009b50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b4e:	2302      	movs	r3, #2
  }
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b20      	cmp	r3, #32
 8009b70:	d139      	bne.n	8009be6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d101      	bne.n	8009b80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e033      	b.n	8009be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2224      	movs	r2, #36	; 0x24
 8009b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f022 0201 	bic.w	r2, r2, #1
 8009b9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009bae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f042 0201 	orr.w	r2, r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	e000      	b.n	8009be8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009be6:	2302      	movs	r3, #2
  }
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009bf8:	4b04      	ldr	r3, [pc, #16]	; (8009c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	40007000 	.word	0x40007000

08009c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c1e:	d130      	bne.n	8009c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c20:	4b23      	ldr	r3, [pc, #140]	; (8009cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c2c:	d038      	beq.n	8009ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c2e:	4b20      	ldr	r3, [pc, #128]	; (8009cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009c36:	4a1e      	ldr	r2, [pc, #120]	; (8009cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009c3e:	4b1d      	ldr	r3, [pc, #116]	; (8009cb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2232      	movs	r2, #50	; 0x32
 8009c44:	fb02 f303 	mul.w	r3, r2, r3
 8009c48:	4a1b      	ldr	r2, [pc, #108]	; (8009cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c4e:	0c9b      	lsrs	r3, r3, #18
 8009c50:	3301      	adds	r3, #1
 8009c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009c54:	e002      	b.n	8009c5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009c5c:	4b14      	ldr	r3, [pc, #80]	; (8009cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c68:	d102      	bne.n	8009c70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1f2      	bne.n	8009c56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009c70:	4b0f      	ldr	r3, [pc, #60]	; (8009cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c7c:	d110      	bne.n	8009ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e00f      	b.n	8009ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009c82:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c8e:	d007      	beq.n	8009ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009c90:	4b07      	ldr	r3, [pc, #28]	; (8009cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009c98:	4a05      	ldr	r2, [pc, #20]	; (8009cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3714      	adds	r7, #20
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	40007000 	.word	0x40007000
 8009cb4:	20000000 	.word	0x20000000
 8009cb8:	431bde83 	.word	0x431bde83

08009cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b088      	sub	sp, #32
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d102      	bne.n	8009cd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	f000 bc02 	b.w	800a4d4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cd0:	4b96      	ldr	r3, [pc, #600]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	f003 030c 	and.w	r3, r3, #12
 8009cd8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009cda:	4b94      	ldr	r3, [pc, #592]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	f003 0303 	and.w	r3, r3, #3
 8009ce2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0310 	and.w	r3, r3, #16
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f000 80e4 	beq.w	8009eba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d007      	beq.n	8009d08 <HAL_RCC_OscConfig+0x4c>
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	2b0c      	cmp	r3, #12
 8009cfc:	f040 808b 	bne.w	8009e16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	f040 8087 	bne.w	8009e16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009d08:	4b88      	ldr	r3, [pc, #544]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0302 	and.w	r3, r3, #2
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d005      	beq.n	8009d20 <HAL_RCC_OscConfig+0x64>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e3d9      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a1a      	ldr	r2, [r3, #32]
 8009d24:	4b81      	ldr	r3, [pc, #516]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0308 	and.w	r3, r3, #8
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d004      	beq.n	8009d3a <HAL_RCC_OscConfig+0x7e>
 8009d30:	4b7e      	ldr	r3, [pc, #504]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d38:	e005      	b.n	8009d46 <HAL_RCC_OscConfig+0x8a>
 8009d3a:	4b7c      	ldr	r3, [pc, #496]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d40:	091b      	lsrs	r3, r3, #4
 8009d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d223      	bcs.n	8009d92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 fd8c 	bl	800a86c <RCC_SetFlashLatencyFromMSIRange>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e3ba      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d5e:	4b73      	ldr	r3, [pc, #460]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a72      	ldr	r2, [pc, #456]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009d64:	f043 0308 	orr.w	r3, r3, #8
 8009d68:	6013      	str	r3, [r2, #0]
 8009d6a:	4b70      	ldr	r3, [pc, #448]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	496d      	ldr	r1, [pc, #436]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d7c:	4b6b      	ldr	r3, [pc, #428]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	021b      	lsls	r3, r3, #8
 8009d8a:	4968      	ldr	r1, [pc, #416]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	604b      	str	r3, [r1, #4]
 8009d90:	e025      	b.n	8009dde <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d92:	4b66      	ldr	r3, [pc, #408]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a65      	ldr	r2, [pc, #404]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009d98:	f043 0308 	orr.w	r3, r3, #8
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	4b63      	ldr	r3, [pc, #396]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
 8009daa:	4960      	ldr	r1, [pc, #384]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009db0:	4b5e      	ldr	r3, [pc, #376]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	69db      	ldr	r3, [r3, #28]
 8009dbc:	021b      	lsls	r3, r3, #8
 8009dbe:	495b      	ldr	r1, [pc, #364]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d109      	bne.n	8009dde <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fd4c 	bl	800a86c <RCC_SetFlashLatencyFromMSIRange>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e37a      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009dde:	f000 fc81 	bl	800a6e4 <HAL_RCC_GetSysClockFreq>
 8009de2:	4602      	mov	r2, r0
 8009de4:	4b51      	ldr	r3, [pc, #324]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	091b      	lsrs	r3, r3, #4
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	4950      	ldr	r1, [pc, #320]	; (8009f30 <HAL_RCC_OscConfig+0x274>)
 8009df0:	5ccb      	ldrb	r3, [r1, r3]
 8009df2:	f003 031f 	and.w	r3, r3, #31
 8009df6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfa:	4a4e      	ldr	r2, [pc, #312]	; (8009f34 <HAL_RCC_OscConfig+0x278>)
 8009dfc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009dfe:	4b4e      	ldr	r3, [pc, #312]	; (8009f38 <HAL_RCC_OscConfig+0x27c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7ff fa14 	bl	8009230 <HAL_InitTick>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d052      	beq.n	8009eb8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
 8009e14:	e35e      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d032      	beq.n	8009e84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009e1e:	4b43      	ldr	r3, [pc, #268]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a42      	ldr	r2, [pc, #264]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009e24:	f043 0301 	orr.w	r3, r3, #1
 8009e28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009e2a:	f7ff fa51 	bl	80092d0 <HAL_GetTick>
 8009e2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009e30:	e008      	b.n	8009e44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e32:	f7ff fa4d 	bl	80092d0 <HAL_GetTick>
 8009e36:	4602      	mov	r2, r0
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d901      	bls.n	8009e44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e347      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009e44:	4b39      	ldr	r3, [pc, #228]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f003 0302 	and.w	r3, r3, #2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d0f0      	beq.n	8009e32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009e50:	4b36      	ldr	r3, [pc, #216]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a35      	ldr	r2, [pc, #212]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009e56:	f043 0308 	orr.w	r3, r3, #8
 8009e5a:	6013      	str	r3, [r2, #0]
 8009e5c:	4b33      	ldr	r3, [pc, #204]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a1b      	ldr	r3, [r3, #32]
 8009e68:	4930      	ldr	r1, [pc, #192]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009e6e:	4b2f      	ldr	r3, [pc, #188]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	69db      	ldr	r3, [r3, #28]
 8009e7a:	021b      	lsls	r3, r3, #8
 8009e7c:	492b      	ldr	r1, [pc, #172]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	604b      	str	r3, [r1, #4]
 8009e82:	e01a      	b.n	8009eba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009e84:	4b29      	ldr	r3, [pc, #164]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a28      	ldr	r2, [pc, #160]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009e8a:	f023 0301 	bic.w	r3, r3, #1
 8009e8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009e90:	f7ff fa1e 	bl	80092d0 <HAL_GetTick>
 8009e94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009e96:	e008      	b.n	8009eaa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e98:	f7ff fa1a 	bl	80092d0 <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d901      	bls.n	8009eaa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e314      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009eaa:	4b20      	ldr	r3, [pc, #128]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1f0      	bne.n	8009e98 <HAL_RCC_OscConfig+0x1dc>
 8009eb6:	e000      	b.n	8009eba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d073      	beq.n	8009fae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	2b08      	cmp	r3, #8
 8009eca:	d005      	beq.n	8009ed8 <HAL_RCC_OscConfig+0x21c>
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	2b0c      	cmp	r3, #12
 8009ed0:	d10e      	bne.n	8009ef0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d10b      	bne.n	8009ef0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ed8:	4b14      	ldr	r3, [pc, #80]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d063      	beq.n	8009fac <HAL_RCC_OscConfig+0x2f0>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d15f      	bne.n	8009fac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e2f1      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ef8:	d106      	bne.n	8009f08 <HAL_RCC_OscConfig+0x24c>
 8009efa:	4b0c      	ldr	r3, [pc, #48]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a0b      	ldr	r2, [pc, #44]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f04:	6013      	str	r3, [r2, #0]
 8009f06:	e025      	b.n	8009f54 <HAL_RCC_OscConfig+0x298>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f10:	d114      	bne.n	8009f3c <HAL_RCC_OscConfig+0x280>
 8009f12:	4b06      	ldr	r3, [pc, #24]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a05      	ldr	r2, [pc, #20]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f1c:	6013      	str	r3, [r2, #0]
 8009f1e:	4b03      	ldr	r3, [pc, #12]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a02      	ldr	r2, [pc, #8]	; (8009f2c <HAL_RCC_OscConfig+0x270>)
 8009f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f28:	6013      	str	r3, [r2, #0]
 8009f2a:	e013      	b.n	8009f54 <HAL_RCC_OscConfig+0x298>
 8009f2c:	40021000 	.word	0x40021000
 8009f30:	0800f488 	.word	0x0800f488
 8009f34:	20000000 	.word	0x20000000
 8009f38:	20000084 	.word	0x20000084
 8009f3c:	4ba0      	ldr	r3, [pc, #640]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a9f      	ldr	r2, [pc, #636]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 8009f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f46:	6013      	str	r3, [r2, #0]
 8009f48:	4b9d      	ldr	r3, [pc, #628]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a9c      	ldr	r2, [pc, #624]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 8009f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d013      	beq.n	8009f84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f5c:	f7ff f9b8 	bl	80092d0 <HAL_GetTick>
 8009f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f62:	e008      	b.n	8009f76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f64:	f7ff f9b4 	bl	80092d0 <HAL_GetTick>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	2b64      	cmp	r3, #100	; 0x64
 8009f70:	d901      	bls.n	8009f76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009f72:	2303      	movs	r3, #3
 8009f74:	e2ae      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f76:	4b92      	ldr	r3, [pc, #584]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0f0      	beq.n	8009f64 <HAL_RCC_OscConfig+0x2a8>
 8009f82:	e014      	b.n	8009fae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f84:	f7ff f9a4 	bl	80092d0 <HAL_GetTick>
 8009f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f8a:	e008      	b.n	8009f9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f8c:	f7ff f9a0 	bl	80092d0 <HAL_GetTick>
 8009f90:	4602      	mov	r2, r0
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	2b64      	cmp	r3, #100	; 0x64
 8009f98:	d901      	bls.n	8009f9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e29a      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f9e:	4b88      	ldr	r3, [pc, #544]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1f0      	bne.n	8009f8c <HAL_RCC_OscConfig+0x2d0>
 8009faa:	e000      	b.n	8009fae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 0302 	and.w	r3, r3, #2
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d060      	beq.n	800a07c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	2b04      	cmp	r3, #4
 8009fbe:	d005      	beq.n	8009fcc <HAL_RCC_OscConfig+0x310>
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	2b0c      	cmp	r3, #12
 8009fc4:	d119      	bne.n	8009ffa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d116      	bne.n	8009ffa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fcc:	4b7c      	ldr	r3, [pc, #496]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d005      	beq.n	8009fe4 <HAL_RCC_OscConfig+0x328>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e277      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fe4:	4b76      	ldr	r3, [pc, #472]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	061b      	lsls	r3, r3, #24
 8009ff2:	4973      	ldr	r1, [pc, #460]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ff8:	e040      	b.n	800a07c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d023      	beq.n	800a04a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a002:	4b6f      	ldr	r3, [pc, #444]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a6e      	ldr	r2, [pc, #440]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a00c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a00e:	f7ff f95f 	bl	80092d0 <HAL_GetTick>
 800a012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a014:	e008      	b.n	800a028 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a016:	f7ff f95b 	bl	80092d0 <HAL_GetTick>
 800a01a:	4602      	mov	r2, r0
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	1ad3      	subs	r3, r2, r3
 800a020:	2b02      	cmp	r3, #2
 800a022:	d901      	bls.n	800a028 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a024:	2303      	movs	r3, #3
 800a026:	e255      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a028:	4b65      	ldr	r3, [pc, #404]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a030:	2b00      	cmp	r3, #0
 800a032:	d0f0      	beq.n	800a016 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a034:	4b62      	ldr	r3, [pc, #392]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	061b      	lsls	r3, r3, #24
 800a042:	495f      	ldr	r1, [pc, #380]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a044:	4313      	orrs	r3, r2
 800a046:	604b      	str	r3, [r1, #4]
 800a048:	e018      	b.n	800a07c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a04a:	4b5d      	ldr	r3, [pc, #372]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a5c      	ldr	r2, [pc, #368]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a056:	f7ff f93b 	bl	80092d0 <HAL_GetTick>
 800a05a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a05c:	e008      	b.n	800a070 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a05e:	f7ff f937 	bl	80092d0 <HAL_GetTick>
 800a062:	4602      	mov	r2, r0
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d901      	bls.n	800a070 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e231      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a070:	4b53      	ldr	r3, [pc, #332]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1f0      	bne.n	800a05e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0308 	and.w	r3, r3, #8
 800a084:	2b00      	cmp	r3, #0
 800a086:	d03c      	beq.n	800a102 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d01c      	beq.n	800a0ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a090:	4b4b      	ldr	r3, [pc, #300]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a096:	4a4a      	ldr	r2, [pc, #296]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a098:	f043 0301 	orr.w	r3, r3, #1
 800a09c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0a0:	f7ff f916 	bl	80092d0 <HAL_GetTick>
 800a0a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a0a6:	e008      	b.n	800a0ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0a8:	f7ff f912 	bl	80092d0 <HAL_GetTick>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d901      	bls.n	800a0ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e20c      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a0ba:	4b41      	ldr	r3, [pc, #260]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a0bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0c0:	f003 0302 	and.w	r3, r3, #2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d0ef      	beq.n	800a0a8 <HAL_RCC_OscConfig+0x3ec>
 800a0c8:	e01b      	b.n	800a102 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0ca:	4b3d      	ldr	r3, [pc, #244]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a0cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0d0:	4a3b      	ldr	r2, [pc, #236]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a0d2:	f023 0301 	bic.w	r3, r3, #1
 800a0d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0da:	f7ff f8f9 	bl	80092d0 <HAL_GetTick>
 800a0de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a0e0:	e008      	b.n	800a0f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0e2:	f7ff f8f5 	bl	80092d0 <HAL_GetTick>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	1ad3      	subs	r3, r2, r3
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d901      	bls.n	800a0f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e1ef      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a0f4:	4b32      	ldr	r3, [pc, #200]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a0f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0fa:	f003 0302 	and.w	r3, r3, #2
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1ef      	bne.n	800a0e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0304 	and.w	r3, r3, #4
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 80a6 	beq.w	800a25c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a110:	2300      	movs	r3, #0
 800a112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a114:	4b2a      	ldr	r3, [pc, #168]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10d      	bne.n	800a13c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a120:	4b27      	ldr	r3, [pc, #156]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a124:	4a26      	ldr	r2, [pc, #152]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a12a:	6593      	str	r3, [r2, #88]	; 0x58
 800a12c:	4b24      	ldr	r3, [pc, #144]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a134:	60bb      	str	r3, [r7, #8]
 800a136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a138:	2301      	movs	r3, #1
 800a13a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a13c:	4b21      	ldr	r3, [pc, #132]	; (800a1c4 <HAL_RCC_OscConfig+0x508>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a144:	2b00      	cmp	r3, #0
 800a146:	d118      	bne.n	800a17a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a148:	4b1e      	ldr	r3, [pc, #120]	; (800a1c4 <HAL_RCC_OscConfig+0x508>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a1d      	ldr	r2, [pc, #116]	; (800a1c4 <HAL_RCC_OscConfig+0x508>)
 800a14e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a154:	f7ff f8bc 	bl	80092d0 <HAL_GetTick>
 800a158:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a15a:	e008      	b.n	800a16e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a15c:	f7ff f8b8 	bl	80092d0 <HAL_GetTick>
 800a160:	4602      	mov	r2, r0
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	2b02      	cmp	r3, #2
 800a168:	d901      	bls.n	800a16e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a16a:	2303      	movs	r3, #3
 800a16c:	e1b2      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a16e:	4b15      	ldr	r3, [pc, #84]	; (800a1c4 <HAL_RCC_OscConfig+0x508>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a176:	2b00      	cmp	r3, #0
 800a178:	d0f0      	beq.n	800a15c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d108      	bne.n	800a194 <HAL_RCC_OscConfig+0x4d8>
 800a182:	4b0f      	ldr	r3, [pc, #60]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a188:	4a0d      	ldr	r2, [pc, #52]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a18a:	f043 0301 	orr.w	r3, r3, #1
 800a18e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a192:	e029      	b.n	800a1e8 <HAL_RCC_OscConfig+0x52c>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	2b05      	cmp	r3, #5
 800a19a:	d115      	bne.n	800a1c8 <HAL_RCC_OscConfig+0x50c>
 800a19c:	4b08      	ldr	r3, [pc, #32]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a19e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1a2:	4a07      	ldr	r2, [pc, #28]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a1a4:	f043 0304 	orr.w	r3, r3, #4
 800a1a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a1ac:	4b04      	ldr	r3, [pc, #16]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a1ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1b2:	4a03      	ldr	r2, [pc, #12]	; (800a1c0 <HAL_RCC_OscConfig+0x504>)
 800a1b4:	f043 0301 	orr.w	r3, r3, #1
 800a1b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a1bc:	e014      	b.n	800a1e8 <HAL_RCC_OscConfig+0x52c>
 800a1be:	bf00      	nop
 800a1c0:	40021000 	.word	0x40021000
 800a1c4:	40007000 	.word	0x40007000
 800a1c8:	4b9a      	ldr	r3, [pc, #616]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ce:	4a99      	ldr	r2, [pc, #612]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a1d0:	f023 0301 	bic.w	r3, r3, #1
 800a1d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a1d8:	4b96      	ldr	r3, [pc, #600]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1de:	4a95      	ldr	r2, [pc, #596]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a1e0:	f023 0304 	bic.w	r3, r3, #4
 800a1e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d016      	beq.n	800a21e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1f0:	f7ff f86e 	bl	80092d0 <HAL_GetTick>
 800a1f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1f6:	e00a      	b.n	800a20e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1f8:	f7ff f86a 	bl	80092d0 <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	f241 3288 	movw	r2, #5000	; 0x1388
 800a206:	4293      	cmp	r3, r2
 800a208:	d901      	bls.n	800a20e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e162      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a20e:	4b89      	ldr	r3, [pc, #548]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d0ed      	beq.n	800a1f8 <HAL_RCC_OscConfig+0x53c>
 800a21c:	e015      	b.n	800a24a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a21e:	f7ff f857 	bl	80092d0 <HAL_GetTick>
 800a222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a224:	e00a      	b.n	800a23c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a226:	f7ff f853 	bl	80092d0 <HAL_GetTick>
 800a22a:	4602      	mov	r2, r0
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	f241 3288 	movw	r2, #5000	; 0x1388
 800a234:	4293      	cmp	r3, r2
 800a236:	d901      	bls.n	800a23c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e14b      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a23c:	4b7d      	ldr	r3, [pc, #500]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a242:	f003 0302 	and.w	r3, r3, #2
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1ed      	bne.n	800a226 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a24a:	7ffb      	ldrb	r3, [r7, #31]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d105      	bne.n	800a25c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a250:	4b78      	ldr	r3, [pc, #480]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a254:	4a77      	ldr	r2, [pc, #476]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a25a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0320 	and.w	r3, r3, #32
 800a264:	2b00      	cmp	r3, #0
 800a266:	d03c      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d01c      	beq.n	800a2aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a270:	4b70      	ldr	r3, [pc, #448]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a276:	4a6f      	ldr	r2, [pc, #444]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a278:	f043 0301 	orr.w	r3, r3, #1
 800a27c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a280:	f7ff f826 	bl	80092d0 <HAL_GetTick>
 800a284:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a286:	e008      	b.n	800a29a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a288:	f7ff f822 	bl	80092d0 <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	2b02      	cmp	r3, #2
 800a294:	d901      	bls.n	800a29a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a296:	2303      	movs	r3, #3
 800a298:	e11c      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a29a:	4b66      	ldr	r3, [pc, #408]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a29c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2a0:	f003 0302 	and.w	r3, r3, #2
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d0ef      	beq.n	800a288 <HAL_RCC_OscConfig+0x5cc>
 800a2a8:	e01b      	b.n	800a2e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2aa:	4b62      	ldr	r3, [pc, #392]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a2ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2b0:	4a60      	ldr	r2, [pc, #384]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a2b2:	f023 0301 	bic.w	r3, r3, #1
 800a2b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2ba:	f7ff f809 	bl	80092d0 <HAL_GetTick>
 800a2be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a2c0:	e008      	b.n	800a2d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2c2:	f7ff f805 	bl	80092d0 <HAL_GetTick>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d901      	bls.n	800a2d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e0ff      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a2d4:	4b57      	ldr	r3, [pc, #348]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a2d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1ef      	bne.n	800a2c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f000 80f3 	beq.w	800a4d2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	f040 80c9 	bne.w	800a488 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a2f6:	4b4f      	ldr	r3, [pc, #316]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f003 0203 	and.w	r2, r3, #3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a306:	429a      	cmp	r2, r3
 800a308:	d12c      	bne.n	800a364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a314:	3b01      	subs	r3, #1
 800a316:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a318:	429a      	cmp	r2, r3
 800a31a:	d123      	bne.n	800a364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a326:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a328:	429a      	cmp	r2, r3
 800a32a:	d11b      	bne.n	800a364 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a336:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a338:	429a      	cmp	r2, r3
 800a33a:	d113      	bne.n	800a364 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a346:	085b      	lsrs	r3, r3, #1
 800a348:	3b01      	subs	r3, #1
 800a34a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d109      	bne.n	800a364 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	085b      	lsrs	r3, r3, #1
 800a35c:	3b01      	subs	r3, #1
 800a35e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a360:	429a      	cmp	r2, r3
 800a362:	d06b      	beq.n	800a43c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	2b0c      	cmp	r3, #12
 800a368:	d062      	beq.n	800a430 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a36a:	4b32      	ldr	r3, [pc, #200]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e0ac      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a37a:	4b2e      	ldr	r3, [pc, #184]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a2d      	ldr	r2, [pc, #180]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a384:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a386:	f7fe ffa3 	bl	80092d0 <HAL_GetTick>
 800a38a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a38c:	e008      	b.n	800a3a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a38e:	f7fe ff9f 	bl	80092d0 <HAL_GetTick>
 800a392:	4602      	mov	r2, r0
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d901      	bls.n	800a3a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800a39c:	2303      	movs	r3, #3
 800a39e:	e099      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3a0:	4b24      	ldr	r3, [pc, #144]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1f0      	bne.n	800a38e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a3ac:	4b21      	ldr	r3, [pc, #132]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a3ae:	68da      	ldr	r2, [r3, #12]
 800a3b0:	4b21      	ldr	r3, [pc, #132]	; (800a438 <HAL_RCC_OscConfig+0x77c>)
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a3bc:	3a01      	subs	r2, #1
 800a3be:	0112      	lsls	r2, r2, #4
 800a3c0:	4311      	orrs	r1, r2
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a3c6:	0212      	lsls	r2, r2, #8
 800a3c8:	4311      	orrs	r1, r2
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a3ce:	0852      	lsrs	r2, r2, #1
 800a3d0:	3a01      	subs	r2, #1
 800a3d2:	0552      	lsls	r2, r2, #21
 800a3d4:	4311      	orrs	r1, r2
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a3da:	0852      	lsrs	r2, r2, #1
 800a3dc:	3a01      	subs	r2, #1
 800a3de:	0652      	lsls	r2, r2, #25
 800a3e0:	4311      	orrs	r1, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a3e6:	06d2      	lsls	r2, r2, #27
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	4912      	ldr	r1, [pc, #72]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a3f0:	4b10      	ldr	r3, [pc, #64]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a0f      	ldr	r2, [pc, #60]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a3f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a3fc:	4b0d      	ldr	r3, [pc, #52]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	4a0c      	ldr	r2, [pc, #48]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a406:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a408:	f7fe ff62 	bl	80092d0 <HAL_GetTick>
 800a40c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a40e:	e008      	b.n	800a422 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a410:	f7fe ff5e 	bl	80092d0 <HAL_GetTick>
 800a414:	4602      	mov	r2, r0
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d901      	bls.n	800a422 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e058      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a422:	4b04      	ldr	r3, [pc, #16]	; (800a434 <HAL_RCC_OscConfig+0x778>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d0f0      	beq.n	800a410 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a42e:	e050      	b.n	800a4d2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e04f      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
 800a434:	40021000 	.word	0x40021000
 800a438:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a43c:	4b27      	ldr	r3, [pc, #156]	; (800a4dc <HAL_RCC_OscConfig+0x820>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d144      	bne.n	800a4d2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a448:	4b24      	ldr	r3, [pc, #144]	; (800a4dc <HAL_RCC_OscConfig+0x820>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a23      	ldr	r2, [pc, #140]	; (800a4dc <HAL_RCC_OscConfig+0x820>)
 800a44e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a452:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a454:	4b21      	ldr	r3, [pc, #132]	; (800a4dc <HAL_RCC_OscConfig+0x820>)
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	4a20      	ldr	r2, [pc, #128]	; (800a4dc <HAL_RCC_OscConfig+0x820>)
 800a45a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a45e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a460:	f7fe ff36 	bl	80092d0 <HAL_GetTick>
 800a464:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a466:	e008      	b.n	800a47a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a468:	f7fe ff32 	bl	80092d0 <HAL_GetTick>
 800a46c:	4602      	mov	r2, r0
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	2b02      	cmp	r3, #2
 800a474:	d901      	bls.n	800a47a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800a476:	2303      	movs	r3, #3
 800a478:	e02c      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a47a:	4b18      	ldr	r3, [pc, #96]	; (800a4dc <HAL_RCC_OscConfig+0x820>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0f0      	beq.n	800a468 <HAL_RCC_OscConfig+0x7ac>
 800a486:	e024      	b.n	800a4d2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	2b0c      	cmp	r3, #12
 800a48c:	d01f      	beq.n	800a4ce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a48e:	4b13      	ldr	r3, [pc, #76]	; (800a4dc <HAL_RCC_OscConfig+0x820>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a12      	ldr	r2, [pc, #72]	; (800a4dc <HAL_RCC_OscConfig+0x820>)
 800a494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a49a:	f7fe ff19 	bl	80092d0 <HAL_GetTick>
 800a49e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a4a0:	e008      	b.n	800a4b4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4a2:	f7fe ff15 	bl	80092d0 <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d901      	bls.n	800a4b4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e00f      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a4b4:	4b09      	ldr	r3, [pc, #36]	; (800a4dc <HAL_RCC_OscConfig+0x820>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1f0      	bne.n	800a4a2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800a4c0:	4b06      	ldr	r3, [pc, #24]	; (800a4dc <HAL_RCC_OscConfig+0x820>)
 800a4c2:	68da      	ldr	r2, [r3, #12]
 800a4c4:	4905      	ldr	r1, [pc, #20]	; (800a4dc <HAL_RCC_OscConfig+0x820>)
 800a4c6:	4b06      	ldr	r3, [pc, #24]	; (800a4e0 <HAL_RCC_OscConfig+0x824>)
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	60cb      	str	r3, [r1, #12]
 800a4cc:	e001      	b.n	800a4d2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e000      	b.n	800a4d4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3720      	adds	r7, #32
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	40021000 	.word	0x40021000
 800a4e0:	feeefffc 	.word	0xfeeefffc

0800a4e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d101      	bne.n	800a4f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e0e7      	b.n	800a6c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a4f8:	4b75      	ldr	r3, [pc, #468]	; (800a6d0 <HAL_RCC_ClockConfig+0x1ec>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0307 	and.w	r3, r3, #7
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	429a      	cmp	r2, r3
 800a504:	d910      	bls.n	800a528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a506:	4b72      	ldr	r3, [pc, #456]	; (800a6d0 <HAL_RCC_ClockConfig+0x1ec>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f023 0207 	bic.w	r2, r3, #7
 800a50e:	4970      	ldr	r1, [pc, #448]	; (800a6d0 <HAL_RCC_ClockConfig+0x1ec>)
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	4313      	orrs	r3, r2
 800a514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a516:	4b6e      	ldr	r3, [pc, #440]	; (800a6d0 <HAL_RCC_ClockConfig+0x1ec>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0307 	and.w	r3, r3, #7
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	429a      	cmp	r2, r3
 800a522:	d001      	beq.n	800a528 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e0cf      	b.n	800a6c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b00      	cmp	r3, #0
 800a532:	d010      	beq.n	800a556 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689a      	ldr	r2, [r3, #8]
 800a538:	4b66      	ldr	r3, [pc, #408]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a540:	429a      	cmp	r2, r3
 800a542:	d908      	bls.n	800a556 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a544:	4b63      	ldr	r3, [pc, #396]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	4960      	ldr	r1, [pc, #384]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a552:	4313      	orrs	r3, r2
 800a554:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 0301 	and.w	r3, r3, #1
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d04c      	beq.n	800a5fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	2b03      	cmp	r3, #3
 800a568:	d107      	bne.n	800a57a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a56a:	4b5a      	ldr	r3, [pc, #360]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d121      	bne.n	800a5ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e0a6      	b.n	800a6c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d107      	bne.n	800a592 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a582:	4b54      	ldr	r3, [pc, #336]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d115      	bne.n	800a5ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e09a      	b.n	800a6c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d107      	bne.n	800a5aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a59a:	4b4e      	ldr	r3, [pc, #312]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0302 	and.w	r3, r3, #2
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d109      	bne.n	800a5ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e08e      	b.n	800a6c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5aa:	4b4a      	ldr	r3, [pc, #296]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e086      	b.n	800a6c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a5ba:	4b46      	ldr	r3, [pc, #280]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	f023 0203 	bic.w	r2, r3, #3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	4943      	ldr	r1, [pc, #268]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5cc:	f7fe fe80 	bl	80092d0 <HAL_GetTick>
 800a5d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5d2:	e00a      	b.n	800a5ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5d4:	f7fe fe7c 	bl	80092d0 <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d901      	bls.n	800a5ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e06e      	b.n	800a6c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5ea:	4b3a      	ldr	r3, [pc, #232]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f003 020c 	and.w	r2, r3, #12
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d1eb      	bne.n	800a5d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0302 	and.w	r3, r3, #2
 800a604:	2b00      	cmp	r3, #0
 800a606:	d010      	beq.n	800a62a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	4b31      	ldr	r3, [pc, #196]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a614:	429a      	cmp	r2, r3
 800a616:	d208      	bcs.n	800a62a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a618:	4b2e      	ldr	r3, [pc, #184]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	492b      	ldr	r1, [pc, #172]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a626:	4313      	orrs	r3, r2
 800a628:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a62a:	4b29      	ldr	r3, [pc, #164]	; (800a6d0 <HAL_RCC_ClockConfig+0x1ec>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 0307 	and.w	r3, r3, #7
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	429a      	cmp	r2, r3
 800a636:	d210      	bcs.n	800a65a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a638:	4b25      	ldr	r3, [pc, #148]	; (800a6d0 <HAL_RCC_ClockConfig+0x1ec>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f023 0207 	bic.w	r2, r3, #7
 800a640:	4923      	ldr	r1, [pc, #140]	; (800a6d0 <HAL_RCC_ClockConfig+0x1ec>)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	4313      	orrs	r3, r2
 800a646:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a648:	4b21      	ldr	r3, [pc, #132]	; (800a6d0 <HAL_RCC_ClockConfig+0x1ec>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 0307 	and.w	r3, r3, #7
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d001      	beq.n	800a65a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e036      	b.n	800a6c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 0304 	and.w	r3, r3, #4
 800a662:	2b00      	cmp	r3, #0
 800a664:	d008      	beq.n	800a678 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a666:	4b1b      	ldr	r3, [pc, #108]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	4918      	ldr	r1, [pc, #96]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a674:	4313      	orrs	r3, r2
 800a676:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0308 	and.w	r3, r3, #8
 800a680:	2b00      	cmp	r3, #0
 800a682:	d009      	beq.n	800a698 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a684:	4b13      	ldr	r3, [pc, #76]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	00db      	lsls	r3, r3, #3
 800a692:	4910      	ldr	r1, [pc, #64]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a694:	4313      	orrs	r3, r2
 800a696:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a698:	f000 f824 	bl	800a6e4 <HAL_RCC_GetSysClockFreq>
 800a69c:	4602      	mov	r2, r0
 800a69e:	4b0d      	ldr	r3, [pc, #52]	; (800a6d4 <HAL_RCC_ClockConfig+0x1f0>)
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	091b      	lsrs	r3, r3, #4
 800a6a4:	f003 030f 	and.w	r3, r3, #15
 800a6a8:	490b      	ldr	r1, [pc, #44]	; (800a6d8 <HAL_RCC_ClockConfig+0x1f4>)
 800a6aa:	5ccb      	ldrb	r3, [r1, r3]
 800a6ac:	f003 031f 	and.w	r3, r3, #31
 800a6b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6b4:	4a09      	ldr	r2, [pc, #36]	; (800a6dc <HAL_RCC_ClockConfig+0x1f8>)
 800a6b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a6b8:	4b09      	ldr	r3, [pc, #36]	; (800a6e0 <HAL_RCC_ClockConfig+0x1fc>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7fe fdb7 	bl	8009230 <HAL_InitTick>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	72fb      	strb	r3, [r7, #11]

  return status;
 800a6c6:	7afb      	ldrb	r3, [r7, #11]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	40022000 	.word	0x40022000
 800a6d4:	40021000 	.word	0x40021000
 800a6d8:	0800f488 	.word	0x0800f488
 800a6dc:	20000000 	.word	0x20000000
 800a6e0:	20000084 	.word	0x20000084

0800a6e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b089      	sub	sp, #36	; 0x24
 800a6e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	61fb      	str	r3, [r7, #28]
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6f2:	4b3e      	ldr	r3, [pc, #248]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x108>)
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	f003 030c 	and.w	r3, r3, #12
 800a6fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a6fc:	4b3b      	ldr	r3, [pc, #236]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x108>)
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	f003 0303 	and.w	r3, r3, #3
 800a704:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d005      	beq.n	800a718 <HAL_RCC_GetSysClockFreq+0x34>
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	2b0c      	cmp	r3, #12
 800a710:	d121      	bne.n	800a756 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d11e      	bne.n	800a756 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a718:	4b34      	ldr	r3, [pc, #208]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x108>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 0308 	and.w	r3, r3, #8
 800a720:	2b00      	cmp	r3, #0
 800a722:	d107      	bne.n	800a734 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a724:	4b31      	ldr	r3, [pc, #196]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x108>)
 800a726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a72a:	0a1b      	lsrs	r3, r3, #8
 800a72c:	f003 030f 	and.w	r3, r3, #15
 800a730:	61fb      	str	r3, [r7, #28]
 800a732:	e005      	b.n	800a740 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a734:	4b2d      	ldr	r3, [pc, #180]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x108>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	091b      	lsrs	r3, r3, #4
 800a73a:	f003 030f 	and.w	r3, r3, #15
 800a73e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a740:	4a2b      	ldr	r2, [pc, #172]	; (800a7f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a748:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10d      	bne.n	800a76c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a754:	e00a      	b.n	800a76c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	2b04      	cmp	r3, #4
 800a75a:	d102      	bne.n	800a762 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a75c:	4b25      	ldr	r3, [pc, #148]	; (800a7f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800a75e:	61bb      	str	r3, [r7, #24]
 800a760:	e004      	b.n	800a76c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	2b08      	cmp	r3, #8
 800a766:	d101      	bne.n	800a76c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a768:	4b23      	ldr	r3, [pc, #140]	; (800a7f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800a76a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	2b0c      	cmp	r3, #12
 800a770:	d134      	bne.n	800a7dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a772:	4b1e      	ldr	r3, [pc, #120]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x108>)
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	f003 0303 	and.w	r3, r3, #3
 800a77a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d003      	beq.n	800a78a <HAL_RCC_GetSysClockFreq+0xa6>
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2b03      	cmp	r3, #3
 800a786:	d003      	beq.n	800a790 <HAL_RCC_GetSysClockFreq+0xac>
 800a788:	e005      	b.n	800a796 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a78a:	4b1a      	ldr	r3, [pc, #104]	; (800a7f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800a78c:	617b      	str	r3, [r7, #20]
      break;
 800a78e:	e005      	b.n	800a79c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a790:	4b19      	ldr	r3, [pc, #100]	; (800a7f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800a792:	617b      	str	r3, [r7, #20]
      break;
 800a794:	e002      	b.n	800a79c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	617b      	str	r3, [r7, #20]
      break;
 800a79a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a79c:	4b13      	ldr	r3, [pc, #76]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x108>)
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	091b      	lsrs	r3, r3, #4
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a7aa:	4b10      	ldr	r3, [pc, #64]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x108>)
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	0a1b      	lsrs	r3, r3, #8
 800a7b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	fb03 f202 	mul.w	r2, r3, r2
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a7c2:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x108>)
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	0e5b      	lsrs	r3, r3, #25
 800a7c8:	f003 0303 	and.w	r3, r3, #3
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	005b      	lsls	r3, r3, #1
 800a7d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a7dc:	69bb      	ldr	r3, [r7, #24]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3724      	adds	r7, #36	; 0x24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	40021000 	.word	0x40021000
 800a7f0:	0800f4a0 	.word	0x0800f4a0
 800a7f4:	00f42400 	.word	0x00f42400
 800a7f8:	007a1200 	.word	0x007a1200

0800a7fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a800:	4b03      	ldr	r3, [pc, #12]	; (800a810 <HAL_RCC_GetHCLKFreq+0x14>)
 800a802:	681b      	ldr	r3, [r3, #0]
}
 800a804:	4618      	mov	r0, r3
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	20000000 	.word	0x20000000

0800a814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a818:	f7ff fff0 	bl	800a7fc <HAL_RCC_GetHCLKFreq>
 800a81c:	4602      	mov	r2, r0
 800a81e:	4b06      	ldr	r3, [pc, #24]	; (800a838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	0a1b      	lsrs	r3, r3, #8
 800a824:	f003 0307 	and.w	r3, r3, #7
 800a828:	4904      	ldr	r1, [pc, #16]	; (800a83c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a82a:	5ccb      	ldrb	r3, [r1, r3]
 800a82c:	f003 031f 	and.w	r3, r3, #31
 800a830:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a834:	4618      	mov	r0, r3
 800a836:	bd80      	pop	{r7, pc}
 800a838:	40021000 	.word	0x40021000
 800a83c:	0800f498 	.word	0x0800f498

0800a840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a844:	f7ff ffda 	bl	800a7fc <HAL_RCC_GetHCLKFreq>
 800a848:	4602      	mov	r2, r0
 800a84a:	4b06      	ldr	r3, [pc, #24]	; (800a864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	0adb      	lsrs	r3, r3, #11
 800a850:	f003 0307 	and.w	r3, r3, #7
 800a854:	4904      	ldr	r1, [pc, #16]	; (800a868 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a856:	5ccb      	ldrb	r3, [r1, r3]
 800a858:	f003 031f 	and.w	r3, r3, #31
 800a85c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a860:	4618      	mov	r0, r3
 800a862:	bd80      	pop	{r7, pc}
 800a864:	40021000 	.word	0x40021000
 800a868:	0800f498 	.word	0x0800f498

0800a86c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a874:	2300      	movs	r3, #0
 800a876:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a878:	4b2a      	ldr	r3, [pc, #168]	; (800a924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a87a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a87c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d003      	beq.n	800a88c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a884:	f7ff f9b6 	bl	8009bf4 <HAL_PWREx_GetVoltageRange>
 800a888:	6178      	str	r0, [r7, #20]
 800a88a:	e014      	b.n	800a8b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a88c:	4b25      	ldr	r3, [pc, #148]	; (800a924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a88e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a890:	4a24      	ldr	r2, [pc, #144]	; (800a924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a896:	6593      	str	r3, [r2, #88]	; 0x58
 800a898:	4b22      	ldr	r3, [pc, #136]	; (800a924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a89a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a89c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8a0:	60fb      	str	r3, [r7, #12]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a8a4:	f7ff f9a6 	bl	8009bf4 <HAL_PWREx_GetVoltageRange>
 800a8a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a8aa:	4b1e      	ldr	r3, [pc, #120]	; (800a924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a8ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ae:	4a1d      	ldr	r2, [pc, #116]	; (800a924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a8b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8bc:	d10b      	bne.n	800a8d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b80      	cmp	r3, #128	; 0x80
 800a8c2:	d919      	bls.n	800a8f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2ba0      	cmp	r3, #160	; 0xa0
 800a8c8:	d902      	bls.n	800a8d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	613b      	str	r3, [r7, #16]
 800a8ce:	e013      	b.n	800a8f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	613b      	str	r3, [r7, #16]
 800a8d4:	e010      	b.n	800a8f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b80      	cmp	r3, #128	; 0x80
 800a8da:	d902      	bls.n	800a8e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a8dc:	2303      	movs	r3, #3
 800a8de:	613b      	str	r3, [r7, #16]
 800a8e0:	e00a      	b.n	800a8f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b80      	cmp	r3, #128	; 0x80
 800a8e6:	d102      	bne.n	800a8ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	613b      	str	r3, [r7, #16]
 800a8ec:	e004      	b.n	800a8f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b70      	cmp	r3, #112	; 0x70
 800a8f2:	d101      	bne.n	800a8f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a8f8:	4b0b      	ldr	r3, [pc, #44]	; (800a928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f023 0207 	bic.w	r2, r3, #7
 800a900:	4909      	ldr	r1, [pc, #36]	; (800a928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	4313      	orrs	r3, r2
 800a906:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a908:	4b07      	ldr	r3, [pc, #28]	; (800a928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0307 	and.w	r3, r3, #7
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	429a      	cmp	r2, r3
 800a914:	d001      	beq.n	800a91a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e000      	b.n	800a91c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	40021000 	.word	0x40021000
 800a928:	40022000 	.word	0x40022000

0800a92c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b086      	sub	sp, #24
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a934:	2300      	movs	r3, #0
 800a936:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a938:	2300      	movs	r3, #0
 800a93a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a944:	2b00      	cmp	r3, #0
 800a946:	d031      	beq.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a94c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a950:	d01a      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a952:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a956:	d814      	bhi.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d009      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a95c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a960:	d10f      	bne.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800a962:	4b5d      	ldr	r3, [pc, #372]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	4a5c      	ldr	r2, [pc, #368]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a96c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a96e:	e00c      	b.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3304      	adds	r3, #4
 800a974:	2100      	movs	r1, #0
 800a976:	4618      	mov	r0, r3
 800a978:	f000 fa22 	bl	800adc0 <RCCEx_PLLSAI1_Config>
 800a97c:	4603      	mov	r3, r0
 800a97e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a980:	e003      	b.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	74fb      	strb	r3, [r7, #19]
      break;
 800a986:	e000      	b.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800a988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a98a:	7cfb      	ldrb	r3, [r7, #19]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10b      	bne.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a990:	4b51      	ldr	r3, [pc, #324]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a996:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a99e:	494e      	ldr	r1, [pc, #312]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a9a6:	e001      	b.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9a8:	7cfb      	ldrb	r3, [r7, #19]
 800a9aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f000 809e 	beq.w	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a9be:	4b46      	ldr	r3, [pc, #280]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e000      	b.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00d      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9d4:	4b40      	ldr	r3, [pc, #256]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d8:	4a3f      	ldr	r2, [pc, #252]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9de:	6593      	str	r3, [r2, #88]	; 0x58
 800a9e0:	4b3d      	ldr	r3, [pc, #244]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9e8:	60bb      	str	r3, [r7, #8]
 800a9ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9f0:	4b3a      	ldr	r3, [pc, #232]	; (800aadc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a39      	ldr	r2, [pc, #228]	; (800aadc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a9f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a9fc:	f7fe fc68 	bl	80092d0 <HAL_GetTick>
 800aa00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800aa02:	e009      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa04:	f7fe fc64 	bl	80092d0 <HAL_GetTick>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d902      	bls.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	74fb      	strb	r3, [r7, #19]
        break;
 800aa16:	e005      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800aa18:	4b30      	ldr	r3, [pc, #192]	; (800aadc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d0ef      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800aa24:	7cfb      	ldrb	r3, [r7, #19]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d15a      	bne.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aa2a:	4b2b      	ldr	r3, [pc, #172]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d01e      	beq.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d019      	beq.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aa46:	4b24      	ldr	r3, [pc, #144]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa50:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa52:	4b21      	ldr	r3, [pc, #132]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa58:	4a1f      	ldr	r2, [pc, #124]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa62:	4b1d      	ldr	r3, [pc, #116]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa68:	4a1b      	ldr	r2, [pc, #108]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aa72:	4a19      	ldr	r2, [pc, #100]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d016      	beq.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa84:	f7fe fc24 	bl	80092d0 <HAL_GetTick>
 800aa88:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa8a:	e00b      	b.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa8c:	f7fe fc20 	bl	80092d0 <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d902      	bls.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	74fb      	strb	r3, [r7, #19]
            break;
 800aaa2:	e006      	b.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aaa4:	4b0c      	ldr	r3, [pc, #48]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aaa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaaa:	f003 0302 	and.w	r3, r3, #2
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d0ec      	beq.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800aab2:	7cfb      	ldrb	r3, [r7, #19]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10b      	bne.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aab8:	4b07      	ldr	r3, [pc, #28]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aaba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aabe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aac6:	4904      	ldr	r1, [pc, #16]	; (800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aac8:	4313      	orrs	r3, r2
 800aaca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aace:	e009      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aad0:	7cfb      	ldrb	r3, [r7, #19]
 800aad2:	74bb      	strb	r3, [r7, #18]
 800aad4:	e006      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800aad6:	bf00      	nop
 800aad8:	40021000 	.word	0x40021000
 800aadc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae0:	7cfb      	ldrb	r3, [r7, #19]
 800aae2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aae4:	7c7b      	ldrb	r3, [r7, #17]
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d105      	bne.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aaea:	4b8d      	ldr	r3, [pc, #564]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800aaec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaee:	4a8c      	ldr	r2, [pc, #560]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800aaf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aaf4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f003 0301 	and.w	r3, r3, #1
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00a      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ab02:	4b87      	ldr	r3, [pc, #540]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ab04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab08:	f023 0203 	bic.w	r2, r3, #3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a1b      	ldr	r3, [r3, #32]
 800ab10:	4983      	ldr	r1, [pc, #524]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ab12:	4313      	orrs	r3, r2
 800ab14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 0302 	and.w	r3, r3, #2
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00a      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ab24:	4b7e      	ldr	r3, [pc, #504]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ab26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab2a:	f023 020c 	bic.w	r2, r3, #12
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab32:	497b      	ldr	r1, [pc, #492]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ab34:	4313      	orrs	r3, r2
 800ab36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f003 0304 	and.w	r3, r3, #4
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00a      	beq.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ab46:	4b76      	ldr	r3, [pc, #472]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ab48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab54:	4972      	ldr	r1, [pc, #456]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ab56:	4313      	orrs	r3, r2
 800ab58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 0320 	and.w	r3, r3, #32
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00a      	beq.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ab68:	4b6d      	ldr	r3, [pc, #436]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ab6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab76:	496a      	ldr	r1, [pc, #424]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00a      	beq.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ab8a:	4b65      	ldr	r3, [pc, #404]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ab8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab98:	4961      	ldr	r1, [pc, #388]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00a      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800abac:	4b5c      	ldr	r3, [pc, #368]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800abae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abba:	4959      	ldr	r1, [pc, #356]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800abbc:	4313      	orrs	r3, r2
 800abbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00a      	beq.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800abce:	4b54      	ldr	r3, [pc, #336]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800abd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abdc:	4950      	ldr	r1, [pc, #320]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800abde:	4313      	orrs	r3, r2
 800abe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00a      	beq.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800abf0:	4b4b      	ldr	r3, [pc, #300]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800abf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abfe:	4948      	ldr	r1, [pc, #288]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ac00:	4313      	orrs	r3, r2
 800ac02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00a      	beq.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ac12:	4b43      	ldr	r3, [pc, #268]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ac14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac20:	493f      	ldr	r1, [pc, #252]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ac22:	4313      	orrs	r3, r2
 800ac24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d028      	beq.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac34:	4b3a      	ldr	r3, [pc, #232]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ac36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac42:	4937      	ldr	r1, [pc, #220]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ac44:	4313      	orrs	r3, r2
 800ac46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac52:	d106      	bne.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac54:	4b32      	ldr	r3, [pc, #200]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	4a31      	ldr	r2, [pc, #196]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ac5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac5e:	60d3      	str	r3, [r2, #12]
 800ac60:	e011      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac6a:	d10c      	bne.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	3304      	adds	r3, #4
 800ac70:	2101      	movs	r1, #1
 800ac72:	4618      	mov	r0, r3
 800ac74:	f000 f8a4 	bl	800adc0 <RCCEx_PLLSAI1_Config>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800ac7c:	7cfb      	ldrb	r3, [r7, #19]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800ac82:	7cfb      	ldrb	r3, [r7, #19]
 800ac84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d028      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ac92:	4b23      	ldr	r3, [pc, #140]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ac94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aca0:	491f      	ldr	r1, [pc, #124]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800aca2:	4313      	orrs	r3, r2
 800aca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acb0:	d106      	bne.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800acb2:	4b1b      	ldr	r3, [pc, #108]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	4a1a      	ldr	r2, [pc, #104]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800acb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acbc:	60d3      	str	r3, [r2, #12]
 800acbe:	e011      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800acc8:	d10c      	bne.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	3304      	adds	r3, #4
 800acce:	2101      	movs	r1, #1
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 f875 	bl	800adc0 <RCCEx_PLLSAI1_Config>
 800acd6:	4603      	mov	r3, r0
 800acd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800acda:	7cfb      	ldrb	r3, [r7, #19]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d001      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800ace0:	7cfb      	ldrb	r3, [r7, #19]
 800ace2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d02b      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800acf0:	4b0b      	ldr	r3, [pc, #44]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800acf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acfe:	4908      	ldr	r1, [pc, #32]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ad00:	4313      	orrs	r3, r2
 800ad02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad0e:	d109      	bne.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad10:	4b03      	ldr	r3, [pc, #12]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	4a02      	ldr	r2, [pc, #8]	; (800ad20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800ad16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad1a:	60d3      	str	r3, [r2, #12]
 800ad1c:	e014      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800ad1e:	bf00      	nop
 800ad20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad2c:	d10c      	bne.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	3304      	adds	r3, #4
 800ad32:	2101      	movs	r1, #1
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 f843 	bl	800adc0 <RCCEx_PLLSAI1_Config>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad3e:	7cfb      	ldrb	r3, [r7, #19]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800ad44:	7cfb      	ldrb	r3, [r7, #19]
 800ad46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d01c      	beq.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad54:	4b19      	ldr	r3, [pc, #100]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad62:	4916      	ldr	r1, [pc, #88]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad64:	4313      	orrs	r3, r2
 800ad66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad72:	d10c      	bne.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	3304      	adds	r3, #4
 800ad78:	2102      	movs	r1, #2
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 f820 	bl	800adc0 <RCCEx_PLLSAI1_Config>
 800ad80:	4603      	mov	r3, r0
 800ad82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad84:	7cfb      	ldrb	r3, [r7, #19]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800ad8a:	7cfb      	ldrb	r3, [r7, #19]
 800ad8c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00a      	beq.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ad9a:	4b08      	ldr	r3, [pc, #32]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada8:	4904      	ldr	r1, [pc, #16]	; (800adbc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800adaa:	4313      	orrs	r3, r2
 800adac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800adb0:	7cbb      	ldrb	r3, [r7, #18]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3718      	adds	r7, #24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	40021000 	.word	0x40021000

0800adc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adca:	2300      	movs	r3, #0
 800adcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800adce:	4b74      	ldr	r3, [pc, #464]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	f003 0303 	and.w	r3, r3, #3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d018      	beq.n	800ae0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800adda:	4b71      	ldr	r3, [pc, #452]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	f003 0203 	and.w	r2, r3, #3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d10d      	bne.n	800ae06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
       ||
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d009      	beq.n	800ae06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800adf2:	4b6b      	ldr	r3, [pc, #428]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	091b      	lsrs	r3, r3, #4
 800adf8:	f003 0307 	and.w	r3, r3, #7
 800adfc:	1c5a      	adds	r2, r3, #1
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
       ||
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d047      	beq.n	800ae96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	73fb      	strb	r3, [r7, #15]
 800ae0a:	e044      	b.n	800ae96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b03      	cmp	r3, #3
 800ae12:	d018      	beq.n	800ae46 <RCCEx_PLLSAI1_Config+0x86>
 800ae14:	2b03      	cmp	r3, #3
 800ae16:	d825      	bhi.n	800ae64 <RCCEx_PLLSAI1_Config+0xa4>
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d002      	beq.n	800ae22 <RCCEx_PLLSAI1_Config+0x62>
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d009      	beq.n	800ae34 <RCCEx_PLLSAI1_Config+0x74>
 800ae20:	e020      	b.n	800ae64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ae22:	4b5f      	ldr	r3, [pc, #380]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 0302 	and.w	r3, r3, #2
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d11d      	bne.n	800ae6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae32:	e01a      	b.n	800ae6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ae34:	4b5a      	ldr	r3, [pc, #360]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d116      	bne.n	800ae6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae44:	e013      	b.n	800ae6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ae46:	4b56      	ldr	r3, [pc, #344]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10f      	bne.n	800ae72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ae52:	4b53      	ldr	r3, [pc, #332]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d109      	bne.n	800ae72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ae62:	e006      	b.n	800ae72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	73fb      	strb	r3, [r7, #15]
      break;
 800ae68:	e004      	b.n	800ae74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ae6a:	bf00      	nop
 800ae6c:	e002      	b.n	800ae74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ae6e:	bf00      	nop
 800ae70:	e000      	b.n	800ae74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ae72:	bf00      	nop
    }

    if(status == HAL_OK)
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10d      	bne.n	800ae96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ae7a:	4b49      	ldr	r3, [pc, #292]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6819      	ldr	r1, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	011b      	lsls	r3, r3, #4
 800ae8e:	430b      	orrs	r3, r1
 800ae90:	4943      	ldr	r1, [pc, #268]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ae96:	7bfb      	ldrb	r3, [r7, #15]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d17c      	bne.n	800af96 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ae9c:	4b40      	ldr	r3, [pc, #256]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a3f      	ldr	r2, [pc, #252]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aea2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aea8:	f7fe fa12 	bl	80092d0 <HAL_GetTick>
 800aeac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800aeae:	e009      	b.n	800aec4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aeb0:	f7fe fa0e 	bl	80092d0 <HAL_GetTick>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d902      	bls.n	800aec4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	73fb      	strb	r3, [r7, #15]
        break;
 800aec2:	e005      	b.n	800aed0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800aec4:	4b36      	ldr	r3, [pc, #216]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1ef      	bne.n	800aeb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800aed0:	7bfb      	ldrb	r3, [r7, #15]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d15f      	bne.n	800af96 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d110      	bne.n	800aefe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aedc:	4b30      	ldr	r3, [pc, #192]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800aee4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	6892      	ldr	r2, [r2, #8]
 800aeec:	0211      	lsls	r1, r2, #8
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	68d2      	ldr	r2, [r2, #12]
 800aef2:	06d2      	lsls	r2, r2, #27
 800aef4:	430a      	orrs	r2, r1
 800aef6:	492a      	ldr	r1, [pc, #168]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aef8:	4313      	orrs	r3, r2
 800aefa:	610b      	str	r3, [r1, #16]
 800aefc:	e027      	b.n	800af4e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d112      	bne.n	800af2a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800af04:	4b26      	ldr	r3, [pc, #152]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800af0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	6892      	ldr	r2, [r2, #8]
 800af14:	0211      	lsls	r1, r2, #8
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	6912      	ldr	r2, [r2, #16]
 800af1a:	0852      	lsrs	r2, r2, #1
 800af1c:	3a01      	subs	r2, #1
 800af1e:	0552      	lsls	r2, r2, #21
 800af20:	430a      	orrs	r2, r1
 800af22:	491f      	ldr	r1, [pc, #124]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af24:	4313      	orrs	r3, r2
 800af26:	610b      	str	r3, [r1, #16]
 800af28:	e011      	b.n	800af4e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800af2a:	4b1d      	ldr	r3, [pc, #116]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800af32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	6892      	ldr	r2, [r2, #8]
 800af3a:	0211      	lsls	r1, r2, #8
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	6952      	ldr	r2, [r2, #20]
 800af40:	0852      	lsrs	r2, r2, #1
 800af42:	3a01      	subs	r2, #1
 800af44:	0652      	lsls	r2, r2, #25
 800af46:	430a      	orrs	r2, r1
 800af48:	4915      	ldr	r1, [pc, #84]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af4a:	4313      	orrs	r3, r2
 800af4c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800af4e:	4b14      	ldr	r3, [pc, #80]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a13      	ldr	r2, [pc, #76]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af5a:	f7fe f9b9 	bl	80092d0 <HAL_GetTick>
 800af5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800af60:	e009      	b.n	800af76 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800af62:	f7fe f9b5 	bl	80092d0 <HAL_GetTick>
 800af66:	4602      	mov	r2, r0
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d902      	bls.n	800af76 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	73fb      	strb	r3, [r7, #15]
          break;
 800af74:	e005      	b.n	800af82 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800af76:	4b0a      	ldr	r3, [pc, #40]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0ef      	beq.n	800af62 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800af82:	7bfb      	ldrb	r3, [r7, #15]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d106      	bne.n	800af96 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800af88:	4b05      	ldr	r3, [pc, #20]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af8a:	691a      	ldr	r2, [r3, #16]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	4903      	ldr	r1, [pc, #12]	; (800afa0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800af92:	4313      	orrs	r3, r2
 800af94:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800af96:	7bfb      	ldrb	r3, [r7, #15]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	40021000 	.word	0x40021000

0800afa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d101      	bne.n	800afb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e095      	b.n	800b0e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d108      	bne.n	800afd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afc6:	d009      	beq.n	800afdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	61da      	str	r2, [r3, #28]
 800afce:	e005      	b.n	800afdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2b00      	cmp	r3, #0
 800afec:	d106      	bne.n	800affc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f7f6 f920 	bl	800123c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b012:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b01c:	d902      	bls.n	800b024 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b01e:	2300      	movs	r3, #0
 800b020:	60fb      	str	r3, [r7, #12]
 800b022:	e002      	b.n	800b02a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b028:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b032:	d007      	beq.n	800b044 <HAL_SPI_Init+0xa0>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b03c:	d002      	beq.n	800b044 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b054:	431a      	orrs	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	f003 0302 	and.w	r3, r3, #2
 800b05e:	431a      	orrs	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	695b      	ldr	r3, [r3, #20]
 800b064:	f003 0301 	and.w	r3, r3, #1
 800b068:	431a      	orrs	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b072:	431a      	orrs	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	69db      	ldr	r3, [r3, #28]
 800b078:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b07c:	431a      	orrs	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b086:	ea42 0103 	orr.w	r1, r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	430a      	orrs	r2, r1
 800b098:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	0c1b      	lsrs	r3, r3, #16
 800b0a0:	f003 0204 	and.w	r2, r3, #4
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a8:	f003 0310 	and.w	r3, r3, #16
 800b0ac:	431a      	orrs	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b2:	f003 0308 	and.w	r3, r3, #8
 800b0b6:	431a      	orrs	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b0c0:	ea42 0103 	orr.w	r1, r2, r3
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b088      	sub	sp, #32
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	60f8      	str	r0, [r7, #12]
 800b0f2:	60b9      	str	r1, [r7, #8]
 800b0f4:	603b      	str	r3, [r7, #0]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b104:	2b01      	cmp	r3, #1
 800b106:	d101      	bne.n	800b10c <HAL_SPI_Transmit+0x22>
 800b108:	2302      	movs	r3, #2
 800b10a:	e158      	b.n	800b3be <HAL_SPI_Transmit+0x2d4>
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b114:	f7fe f8dc 	bl	80092d0 <HAL_GetTick>
 800b118:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b11a:	88fb      	ldrh	r3, [r7, #6]
 800b11c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b01      	cmp	r3, #1
 800b128:	d002      	beq.n	800b130 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b12a:	2302      	movs	r3, #2
 800b12c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b12e:	e13d      	b.n	800b3ac <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d002      	beq.n	800b13c <HAL_SPI_Transmit+0x52>
 800b136:	88fb      	ldrh	r3, [r7, #6]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d102      	bne.n	800b142 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b140:	e134      	b.n	800b3ac <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2203      	movs	r2, #3
 800b146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	88fa      	ldrh	r2, [r7, #6]
 800b15a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	88fa      	ldrh	r2, [r7, #6]
 800b160:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b18c:	d10f      	bne.n	800b1ae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b19c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1b8:	2b40      	cmp	r3, #64	; 0x40
 800b1ba:	d007      	beq.n	800b1cc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b1d4:	d94b      	bls.n	800b26e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d002      	beq.n	800b1e4 <HAL_SPI_Transmit+0xfa>
 800b1de:	8afb      	ldrh	r3, [r7, #22]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d13e      	bne.n	800b262 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e8:	881a      	ldrh	r2, [r3, #0]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f4:	1c9a      	adds	r2, r3, #2
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	3b01      	subs	r3, #1
 800b202:	b29a      	uxth	r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b208:	e02b      	b.n	800b262 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	f003 0302 	and.w	r3, r3, #2
 800b214:	2b02      	cmp	r3, #2
 800b216:	d112      	bne.n	800b23e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21c:	881a      	ldrh	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b228:	1c9a      	adds	r2, r3, #2
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b232:	b29b      	uxth	r3, r3
 800b234:	3b01      	subs	r3, #1
 800b236:	b29a      	uxth	r2, r3
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b23c:	e011      	b.n	800b262 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b23e:	f7fe f847 	bl	80092d0 <HAL_GetTick>
 800b242:	4602      	mov	r2, r0
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d803      	bhi.n	800b256 <HAL_SPI_Transmit+0x16c>
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b254:	d102      	bne.n	800b25c <HAL_SPI_Transmit+0x172>
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d102      	bne.n	800b262 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800b25c:	2303      	movs	r3, #3
 800b25e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b260:	e0a4      	b.n	800b3ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b266:	b29b      	uxth	r3, r3
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1ce      	bne.n	800b20a <HAL_SPI_Transmit+0x120>
 800b26c:	e07c      	b.n	800b368 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d002      	beq.n	800b27c <HAL_SPI_Transmit+0x192>
 800b276:	8afb      	ldrh	r3, [r7, #22]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d170      	bne.n	800b35e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b280:	b29b      	uxth	r3, r3
 800b282:	2b01      	cmp	r3, #1
 800b284:	d912      	bls.n	800b2ac <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28a:	881a      	ldrh	r2, [r3, #0]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b296:	1c9a      	adds	r2, r3, #2
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	3b02      	subs	r3, #2
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b2aa:	e058      	b.n	800b35e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	330c      	adds	r3, #12
 800b2b6:	7812      	ldrb	r2, [r2, #0]
 800b2b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2be:	1c5a      	adds	r2, r3, #1
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b2d2:	e044      	b.n	800b35e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	f003 0302 	and.w	r3, r3, #2
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d12b      	bne.n	800b33a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d912      	bls.n	800b312 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f0:	881a      	ldrh	r2, [r3, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2fc:	1c9a      	adds	r2, r3, #2
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b306:	b29b      	uxth	r3, r3
 800b308:	3b02      	subs	r3, #2
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b310:	e025      	b.n	800b35e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	330c      	adds	r3, #12
 800b31c:	7812      	ldrb	r2, [r2, #0]
 800b31e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b324:	1c5a      	adds	r2, r3, #1
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b32e:	b29b      	uxth	r3, r3
 800b330:	3b01      	subs	r3, #1
 800b332:	b29a      	uxth	r2, r3
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b338:	e011      	b.n	800b35e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b33a:	f7fd ffc9 	bl	80092d0 <HAL_GetTick>
 800b33e:	4602      	mov	r2, r0
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	429a      	cmp	r2, r3
 800b348:	d803      	bhi.n	800b352 <HAL_SPI_Transmit+0x268>
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b350:	d102      	bne.n	800b358 <HAL_SPI_Transmit+0x26e>
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d102      	bne.n	800b35e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800b358:	2303      	movs	r3, #3
 800b35a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b35c:	e026      	b.n	800b3ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b362:	b29b      	uxth	r3, r3
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1b5      	bne.n	800b2d4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b368:	69ba      	ldr	r2, [r7, #24]
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f000 fce3 	bl	800bd38 <SPI_EndRxTxTransaction>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d002      	beq.n	800b37e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2220      	movs	r2, #32
 800b37c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d10a      	bne.n	800b39c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b386:	2300      	movs	r3, #0
 800b388:	613b      	str	r3, [r7, #16]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	613b      	str	r3, [r7, #16]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	613b      	str	r3, [r7, #16]
 800b39a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	77fb      	strb	r3, [r7, #31]
 800b3a8:	e000      	b.n	800b3ac <HAL_SPI_Transmit+0x2c2>
  }

error:
 800b3aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b3bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3720      	adds	r7, #32
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b088      	sub	sp, #32
 800b3ca:	af02      	add	r7, sp, #8
 800b3cc:	60f8      	str	r0, [r7, #12]
 800b3ce:	60b9      	str	r1, [r7, #8]
 800b3d0:	603b      	str	r3, [r7, #0]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3e2:	d112      	bne.n	800b40a <HAL_SPI_Receive+0x44>
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10e      	bne.n	800b40a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2204      	movs	r2, #4
 800b3f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b3f4:	88fa      	ldrh	r2, [r7, #6]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	68b9      	ldr	r1, [r7, #8]
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f000 f910 	bl	800b626 <HAL_SPI_TransmitReceive>
 800b406:	4603      	mov	r3, r0
 800b408:	e109      	b.n	800b61e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b410:	2b01      	cmp	r3, #1
 800b412:	d101      	bne.n	800b418 <HAL_SPI_Receive+0x52>
 800b414:	2302      	movs	r3, #2
 800b416:	e102      	b.n	800b61e <HAL_SPI_Receive+0x258>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b420:	f7fd ff56 	bl	80092d0 <HAL_GetTick>
 800b424:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d002      	beq.n	800b438 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b432:	2302      	movs	r3, #2
 800b434:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b436:	e0e9      	b.n	800b60c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d002      	beq.n	800b444 <HAL_SPI_Receive+0x7e>
 800b43e:	88fb      	ldrh	r3, [r7, #6]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d102      	bne.n	800b44a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b448:	e0e0      	b.n	800b60c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2204      	movs	r2, #4
 800b44e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	88fa      	ldrh	r2, [r7, #6]
 800b462:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	88fa      	ldrh	r2, [r7, #6]
 800b46a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2200      	movs	r2, #0
 800b472:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2200      	movs	r2, #0
 800b47e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2200      	movs	r2, #0
 800b48a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b494:	d908      	bls.n	800b4a8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	685a      	ldr	r2, [r3, #4]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b4a4:	605a      	str	r2, [r3, #4]
 800b4a6:	e007      	b.n	800b4b8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b4b6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4c0:	d10f      	bne.n	800b4e2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b4e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ec:	2b40      	cmp	r3, #64	; 0x40
 800b4ee:	d007      	beq.n	800b500 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b508:	d867      	bhi.n	800b5da <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b50a:	e030      	b.n	800b56e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	2b01      	cmp	r3, #1
 800b518:	d117      	bne.n	800b54a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f103 020c 	add.w	r2, r3, #12
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b526:	7812      	ldrb	r2, [r2, #0]
 800b528:	b2d2      	uxtb	r2, r2
 800b52a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b530:	1c5a      	adds	r2, r3, #1
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	3b01      	subs	r3, #1
 800b540:	b29a      	uxth	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b548:	e011      	b.n	800b56e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b54a:	f7fd fec1 	bl	80092d0 <HAL_GetTick>
 800b54e:	4602      	mov	r2, r0
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	d803      	bhi.n	800b562 <HAL_SPI_Receive+0x19c>
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b560:	d102      	bne.n	800b568 <HAL_SPI_Receive+0x1a2>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d102      	bne.n	800b56e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800b568:	2303      	movs	r3, #3
 800b56a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b56c:	e04e      	b.n	800b60c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b574:	b29b      	uxth	r3, r3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1c8      	bne.n	800b50c <HAL_SPI_Receive+0x146>
 800b57a:	e034      	b.n	800b5e6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	f003 0301 	and.w	r3, r3, #1
 800b586:	2b01      	cmp	r3, #1
 800b588:	d115      	bne.n	800b5b6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68da      	ldr	r2, [r3, #12]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b594:	b292      	uxth	r2, r2
 800b596:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59c:	1c9a      	adds	r2, r3, #2
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800b5b4:	e011      	b.n	800b5da <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5b6:	f7fd fe8b 	bl	80092d0 <HAL_GetTick>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	683a      	ldr	r2, [r7, #0]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d803      	bhi.n	800b5ce <HAL_SPI_Receive+0x208>
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5cc:	d102      	bne.n	800b5d4 <HAL_SPI_Receive+0x20e>
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d102      	bne.n	800b5da <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b5d8:	e018      	b.n	800b60c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d1ca      	bne.n	800b57c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b5e6:	693a      	ldr	r2, [r7, #16]
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f000 fb4c 	bl	800bc88 <SPI_EndRxTransaction>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d002      	beq.n	800b5fc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2220      	movs	r2, #32
 800b5fa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b600:	2b00      	cmp	r3, #0
 800b602:	d002      	beq.n	800b60a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	75fb      	strb	r3, [r7, #23]
 800b608:	e000      	b.n	800b60c <HAL_SPI_Receive+0x246>
  }

error :
 800b60a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2201      	movs	r2, #1
 800b610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2200      	movs	r2, #0
 800b618:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b61c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3718      	adds	r7, #24
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b08a      	sub	sp, #40	; 0x28
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	60f8      	str	r0, [r7, #12]
 800b62e:	60b9      	str	r1, [r7, #8]
 800b630:	607a      	str	r2, [r7, #4]
 800b632:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b634:	2301      	movs	r3, #1
 800b636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b638:	2300      	movs	r3, #0
 800b63a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b644:	2b01      	cmp	r3, #1
 800b646:	d101      	bne.n	800b64c <HAL_SPI_TransmitReceive+0x26>
 800b648:	2302      	movs	r3, #2
 800b64a:	e1fb      	b.n	800ba44 <HAL_SPI_TransmitReceive+0x41e>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b654:	f7fd fe3c 	bl	80092d0 <HAL_GetTick>
 800b658:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b660:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b668:	887b      	ldrh	r3, [r7, #2]
 800b66a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b66c:	887b      	ldrh	r3, [r7, #2]
 800b66e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b670:	7efb      	ldrb	r3, [r7, #27]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d00e      	beq.n	800b694 <HAL_SPI_TransmitReceive+0x6e>
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b67c:	d106      	bne.n	800b68c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d102      	bne.n	800b68c <HAL_SPI_TransmitReceive+0x66>
 800b686:	7efb      	ldrb	r3, [r7, #27]
 800b688:	2b04      	cmp	r3, #4
 800b68a:	d003      	beq.n	800b694 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b68c:	2302      	movs	r3, #2
 800b68e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b692:	e1cd      	b.n	800ba30 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d005      	beq.n	800b6a6 <HAL_SPI_TransmitReceive+0x80>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <HAL_SPI_TransmitReceive+0x80>
 800b6a0:	887b      	ldrh	r3, [r7, #2]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d103      	bne.n	800b6ae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b6ac:	e1c0      	b.n	800ba30 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	2b04      	cmp	r3, #4
 800b6b8:	d003      	beq.n	800b6c2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2205      	movs	r2, #5
 800b6be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	887a      	ldrh	r2, [r7, #2]
 800b6d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	887a      	ldrh	r2, [r7, #2]
 800b6da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	887a      	ldrh	r2, [r7, #2]
 800b6e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	887a      	ldrh	r2, [r7, #2]
 800b6ee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b704:	d802      	bhi.n	800b70c <HAL_SPI_TransmitReceive+0xe6>
 800b706:	8a3b      	ldrh	r3, [r7, #16]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d908      	bls.n	800b71e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b71a:	605a      	str	r2, [r3, #4]
 800b71c:	e007      	b.n	800b72e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	685a      	ldr	r2, [r3, #4]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b72c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b738:	2b40      	cmp	r3, #64	; 0x40
 800b73a:	d007      	beq.n	800b74c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b74a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b754:	d97c      	bls.n	800b850 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d002      	beq.n	800b764 <HAL_SPI_TransmitReceive+0x13e>
 800b75e:	8a7b      	ldrh	r3, [r7, #18]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d169      	bne.n	800b838 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b768:	881a      	ldrh	r2, [r3, #0]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b774:	1c9a      	adds	r2, r3, #2
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b77e:	b29b      	uxth	r3, r3
 800b780:	3b01      	subs	r3, #1
 800b782:	b29a      	uxth	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b788:	e056      	b.n	800b838 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	f003 0302 	and.w	r3, r3, #2
 800b794:	2b02      	cmp	r3, #2
 800b796:	d11b      	bne.n	800b7d0 <HAL_SPI_TransmitReceive+0x1aa>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d016      	beq.n	800b7d0 <HAL_SPI_TransmitReceive+0x1aa>
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d113      	bne.n	800b7d0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ac:	881a      	ldrh	r2, [r3, #0]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b8:	1c9a      	adds	r2, r3, #2
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d11c      	bne.n	800b818 <HAL_SPI_TransmitReceive+0x1f2>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d016      	beq.n	800b818 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68da      	ldr	r2, [r3, #12]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f4:	b292      	uxth	r2, r2
 800b7f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fc:	1c9a      	adds	r2, r3, #2
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b808:	b29b      	uxth	r3, r3
 800b80a:	3b01      	subs	r3, #1
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b814:	2301      	movs	r3, #1
 800b816:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b818:	f7fd fd5a 	bl	80092d0 <HAL_GetTick>
 800b81c:	4602      	mov	r2, r0
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b824:	429a      	cmp	r2, r3
 800b826:	d807      	bhi.n	800b838 <HAL_SPI_TransmitReceive+0x212>
 800b828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b82e:	d003      	beq.n	800b838 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800b830:	2303      	movs	r3, #3
 800b832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b836:	e0fb      	b.n	800ba30 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d1a3      	bne.n	800b78a <HAL_SPI_TransmitReceive+0x164>
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b848:	b29b      	uxth	r3, r3
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d19d      	bne.n	800b78a <HAL_SPI_TransmitReceive+0x164>
 800b84e:	e0df      	b.n	800ba10 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d003      	beq.n	800b860 <HAL_SPI_TransmitReceive+0x23a>
 800b858:	8a7b      	ldrh	r3, [r7, #18]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	f040 80cb 	bne.w	800b9f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b864:	b29b      	uxth	r3, r3
 800b866:	2b01      	cmp	r3, #1
 800b868:	d912      	bls.n	800b890 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b86e:	881a      	ldrh	r2, [r3, #0]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b87a:	1c9a      	adds	r2, r3, #2
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b884:	b29b      	uxth	r3, r3
 800b886:	3b02      	subs	r3, #2
 800b888:	b29a      	uxth	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b88e:	e0b2      	b.n	800b9f6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	330c      	adds	r3, #12
 800b89a:	7812      	ldrb	r2, [r2, #0]
 800b89c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8b6:	e09e      	b.n	800b9f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	f003 0302 	and.w	r3, r3, #2
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d134      	bne.n	800b930 <HAL_SPI_TransmitReceive+0x30a>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d02f      	beq.n	800b930 <HAL_SPI_TransmitReceive+0x30a>
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d12c      	bne.n	800b930 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d912      	bls.n	800b906 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e4:	881a      	ldrh	r2, [r3, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f0:	1c9a      	adds	r2, r3, #2
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	3b02      	subs	r3, #2
 800b8fe:	b29a      	uxth	r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b904:	e012      	b.n	800b92c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	330c      	adds	r3, #12
 800b910:	7812      	ldrb	r2, [r2, #0]
 800b912:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b918:	1c5a      	adds	r2, r3, #1
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b922:	b29b      	uxth	r3, r3
 800b924:	3b01      	subs	r3, #1
 800b926:	b29a      	uxth	r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b92c:	2300      	movs	r3, #0
 800b92e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	f003 0301 	and.w	r3, r3, #1
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d148      	bne.n	800b9d0 <HAL_SPI_TransmitReceive+0x3aa>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b944:	b29b      	uxth	r3, r3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d042      	beq.n	800b9d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b950:	b29b      	uxth	r3, r3
 800b952:	2b01      	cmp	r3, #1
 800b954:	d923      	bls.n	800b99e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68da      	ldr	r2, [r3, #12]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b960:	b292      	uxth	r2, r2
 800b962:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b968:	1c9a      	adds	r2, r3, #2
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b974:	b29b      	uxth	r3, r3
 800b976:	3b02      	subs	r3, #2
 800b978:	b29a      	uxth	r2, r3
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b986:	b29b      	uxth	r3, r3
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d81f      	bhi.n	800b9cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	685a      	ldr	r2, [r3, #4]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b99a:	605a      	str	r2, [r3, #4]
 800b99c:	e016      	b.n	800b9cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f103 020c 	add.w	r2, r3, #12
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9aa:	7812      	ldrb	r2, [r2, #0]
 800b9ac:	b2d2      	uxtb	r2, r2
 800b9ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b4:	1c5a      	adds	r2, r3, #1
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b9d0:	f7fd fc7e 	bl	80092d0 <HAL_GetTick>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d803      	bhi.n	800b9e8 <HAL_SPI_TransmitReceive+0x3c2>
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e6:	d102      	bne.n	800b9ee <HAL_SPI_TransmitReceive+0x3c8>
 800b9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d103      	bne.n	800b9f6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800b9ee:	2303      	movs	r3, #3
 800b9f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b9f4:	e01c      	b.n	800ba30 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f47f af5b 	bne.w	800b8b8 <HAL_SPI_TransmitReceive+0x292>
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f47f af54 	bne.w	800b8b8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba10:	69fa      	ldr	r2, [r7, #28]
 800ba12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f000 f98f 	bl	800bd38 <SPI_EndRxTxTransaction>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d006      	beq.n	800ba2e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800ba20:	2301      	movs	r3, #1
 800ba22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2220      	movs	r2, #32
 800ba2a:	661a      	str	r2, [r3, #96]	; 0x60
 800ba2c:	e000      	b.n	800ba30 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800ba2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ba40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3728      	adds	r7, #40	; 0x28
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b088      	sub	sp, #32
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	603b      	str	r3, [r7, #0]
 800ba58:	4613      	mov	r3, r2
 800ba5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ba5c:	f7fd fc38 	bl	80092d0 <HAL_GetTick>
 800ba60:	4602      	mov	r2, r0
 800ba62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba64:	1a9b      	subs	r3, r3, r2
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	4413      	add	r3, r2
 800ba6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ba6c:	f7fd fc30 	bl	80092d0 <HAL_GetTick>
 800ba70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ba72:	4b39      	ldr	r3, [pc, #228]	; (800bb58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	015b      	lsls	r3, r3, #5
 800ba78:	0d1b      	lsrs	r3, r3, #20
 800ba7a:	69fa      	ldr	r2, [r7, #28]
 800ba7c:	fb02 f303 	mul.w	r3, r2, r3
 800ba80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba82:	e054      	b.n	800bb2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8a:	d050      	beq.n	800bb2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ba8c:	f7fd fc20 	bl	80092d0 <HAL_GetTick>
 800ba90:	4602      	mov	r2, r0
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	69fa      	ldr	r2, [r7, #28]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d902      	bls.n	800baa2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d13d      	bne.n	800bb1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	685a      	ldr	r2, [r3, #4]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bab0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800baba:	d111      	bne.n	800bae0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bac4:	d004      	beq.n	800bad0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bace:	d107      	bne.n	800bae0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bade:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bae8:	d10f      	bne.n	800bb0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800baf8:	601a      	str	r2, [r3, #0]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bb08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	e017      	b.n	800bb4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d101      	bne.n	800bb28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bb24:	2300      	movs	r3, #0
 800bb26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	4013      	ands	r3, r2
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	bf0c      	ite	eq
 800bb3e:	2301      	moveq	r3, #1
 800bb40:	2300      	movne	r3, #0
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	461a      	mov	r2, r3
 800bb46:	79fb      	ldrb	r3, [r7, #7]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d19b      	bne.n	800ba84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3720      	adds	r7, #32
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20000000 	.word	0x20000000

0800bb5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08a      	sub	sp, #40	; 0x28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
 800bb68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bb6e:	f7fd fbaf 	bl	80092d0 <HAL_GetTick>
 800bb72:	4602      	mov	r2, r0
 800bb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb76:	1a9b      	subs	r3, r3, r2
 800bb78:	683a      	ldr	r2, [r7, #0]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800bb7e:	f7fd fba7 	bl	80092d0 <HAL_GetTick>
 800bb82:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	330c      	adds	r3, #12
 800bb8a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bb8c:	4b3d      	ldr	r3, [pc, #244]	; (800bc84 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	4613      	mov	r3, r2
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4413      	add	r3, r2
 800bb96:	00da      	lsls	r2, r3, #3
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	0d1b      	lsrs	r3, r3, #20
 800bb9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb9e:	fb02 f303 	mul.w	r3, r2, r3
 800bba2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bba4:	e060      	b.n	800bc68 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bbac:	d107      	bne.n	800bbbe <SPI_WaitFifoStateUntilTimeout+0x62>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d104      	bne.n	800bbbe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bbbc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc4:	d050      	beq.n	800bc68 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bbc6:	f7fd fb83 	bl	80092d0 <HAL_GetTick>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	6a3b      	ldr	r3, [r7, #32]
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d902      	bls.n	800bbdc <SPI_WaitFifoStateUntilTimeout+0x80>
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d13d      	bne.n	800bc58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	685a      	ldr	r2, [r3, #4]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bbea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbf4:	d111      	bne.n	800bc1a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbfe:	d004      	beq.n	800bc0a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc08:	d107      	bne.n	800bc1a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc22:	d10f      	bne.n	800bc44 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc32:	601a      	str	r2, [r3, #0]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bc54:	2303      	movs	r3, #3
 800bc56:	e010      	b.n	800bc7a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	3b01      	subs	r3, #1
 800bc66:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	689a      	ldr	r2, [r3, #8]
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	4013      	ands	r3, r2
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d196      	bne.n	800bba6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3728      	adds	r7, #40	; 0x28
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	20000000 	.word	0x20000000

0800bc88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af02      	add	r7, sp, #8
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc9c:	d111      	bne.n	800bcc2 <SPI_EndRxTransaction+0x3a>
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bca6:	d004      	beq.n	800bcb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcb0:	d107      	bne.n	800bcc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcc0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	2180      	movs	r1, #128	; 0x80
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f7ff febd 	bl	800ba4c <SPI_WaitFlagStateUntilTimeout>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d007      	beq.n	800bce8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcdc:	f043 0220 	orr.w	r2, r3, #32
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bce4:	2303      	movs	r3, #3
 800bce6:	e023      	b.n	800bd30 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcf0:	d11d      	bne.n	800bd2e <SPI_EndRxTransaction+0xa6>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcfa:	d004      	beq.n	800bd06 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd04:	d113      	bne.n	800bd2e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f7ff ff22 	bl	800bb5c <SPI_WaitFifoStateUntilTimeout>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d007      	beq.n	800bd2e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd22:	f043 0220 	orr.w	r2, r3, #32
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	e000      	b.n	800bd30 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b086      	sub	sp, #24
 800bd3c:	af02      	add	r7, sp, #8
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f7ff ff03 	bl	800bb5c <SPI_WaitFifoStateUntilTimeout>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d007      	beq.n	800bd6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd60:	f043 0220 	orr.w	r2, r3, #32
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bd68:	2303      	movs	r3, #3
 800bd6a:	e027      	b.n	800bdbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2200      	movs	r2, #0
 800bd74:	2180      	movs	r1, #128	; 0x80
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f7ff fe68 	bl	800ba4c <SPI_WaitFlagStateUntilTimeout>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d007      	beq.n	800bd92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd86:	f043 0220 	orr.w	r2, r3, #32
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bd8e:	2303      	movs	r3, #3
 800bd90:	e014      	b.n	800bdbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f7ff fedc 	bl	800bb5c <SPI_WaitFifoStateUntilTimeout>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d007      	beq.n	800bdba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdae:	f043 0220 	orr.w	r2, r3, #32
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bdb6:	2303      	movs	r3, #3
 800bdb8:	e000      	b.n	800bdbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d101      	bne.n	800bdd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e049      	b.n	800be6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d106      	bne.n	800bdf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7f5 fa9c 	bl	8001328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2202      	movs	r2, #2
 800bdf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	3304      	adds	r3, #4
 800be00:	4619      	mov	r1, r3
 800be02:	4610      	mov	r0, r2
 800be04:	f000 fae6 	bl	800c3d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2201      	movs	r2, #1
 800be3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2201      	movs	r2, #1
 800be44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2201      	movs	r2, #1
 800be54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2201      	movs	r2, #1
 800be5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
	...

0800be74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b01      	cmp	r3, #1
 800be86:	d001      	beq.n	800be8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	e033      	b.n	800bef4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2202      	movs	r2, #2
 800be90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a19      	ldr	r2, [pc, #100]	; (800bf00 <HAL_TIM_Base_Start+0x8c>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d009      	beq.n	800beb2 <HAL_TIM_Base_Start+0x3e>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bea6:	d004      	beq.n	800beb2 <HAL_TIM_Base_Start+0x3e>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a15      	ldr	r2, [pc, #84]	; (800bf04 <HAL_TIM_Base_Start+0x90>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d115      	bne.n	800bede <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	689a      	ldr	r2, [r3, #8]
 800beb8:	4b13      	ldr	r3, [pc, #76]	; (800bf08 <HAL_TIM_Base_Start+0x94>)
 800beba:	4013      	ands	r3, r2
 800bebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2b06      	cmp	r3, #6
 800bec2:	d015      	beq.n	800bef0 <HAL_TIM_Base_Start+0x7c>
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beca:	d011      	beq.n	800bef0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f042 0201 	orr.w	r2, r2, #1
 800beda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bedc:	e008      	b.n	800bef0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f042 0201 	orr.w	r2, r2, #1
 800beec:	601a      	str	r2, [r3, #0]
 800beee:	e000      	b.n	800bef2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bef0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bef2:	2300      	movs	r3, #0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr
 800bf00:	40012c00 	.word	0x40012c00
 800bf04:	40014000 	.word	0x40014000
 800bf08:	00010007 	.word	0x00010007

0800bf0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b085      	sub	sp, #20
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d001      	beq.n	800bf24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	e03b      	b.n	800bf9c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2202      	movs	r2, #2
 800bf28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	68da      	ldr	r2, [r3, #12]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f042 0201 	orr.w	r2, r2, #1
 800bf3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a19      	ldr	r2, [pc, #100]	; (800bfa8 <HAL_TIM_Base_Start_IT+0x9c>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d009      	beq.n	800bf5a <HAL_TIM_Base_Start_IT+0x4e>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf4e:	d004      	beq.n	800bf5a <HAL_TIM_Base_Start_IT+0x4e>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a15      	ldr	r2, [pc, #84]	; (800bfac <HAL_TIM_Base_Start_IT+0xa0>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d115      	bne.n	800bf86 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	689a      	ldr	r2, [r3, #8]
 800bf60:	4b13      	ldr	r3, [pc, #76]	; (800bfb0 <HAL_TIM_Base_Start_IT+0xa4>)
 800bf62:	4013      	ands	r3, r2
 800bf64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2b06      	cmp	r3, #6
 800bf6a:	d015      	beq.n	800bf98 <HAL_TIM_Base_Start_IT+0x8c>
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf72:	d011      	beq.n	800bf98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f042 0201 	orr.w	r2, r2, #1
 800bf82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf84:	e008      	b.n	800bf98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f042 0201 	orr.w	r2, r2, #1
 800bf94:	601a      	str	r2, [r3, #0]
 800bf96:	e000      	b.n	800bf9a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr
 800bfa8:	40012c00 	.word	0x40012c00
 800bfac:	40014000 	.word	0x40014000
 800bfb0:	00010007 	.word	0x00010007

0800bfb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	f003 0302 	and.w	r3, r3, #2
 800bfc6:	2b02      	cmp	r3, #2
 800bfc8:	d122      	bne.n	800c010 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	f003 0302 	and.w	r3, r3, #2
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d11b      	bne.n	800c010 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f06f 0202 	mvn.w	r2, #2
 800bfe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	699b      	ldr	r3, [r3, #24]
 800bfee:	f003 0303 	and.w	r3, r3, #3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f9ce 	bl	800c398 <HAL_TIM_IC_CaptureCallback>
 800bffc:	e005      	b.n	800c00a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f9c0 	bl	800c384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f9d1 	bl	800c3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	f003 0304 	and.w	r3, r3, #4
 800c01a:	2b04      	cmp	r3, #4
 800c01c:	d122      	bne.n	800c064 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	f003 0304 	and.w	r3, r3, #4
 800c028:	2b04      	cmp	r3, #4
 800c02a:	d11b      	bne.n	800c064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f06f 0204 	mvn.w	r2, #4
 800c034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2202      	movs	r2, #2
 800c03a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c046:	2b00      	cmp	r3, #0
 800c048:	d003      	beq.n	800c052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f9a4 	bl	800c398 <HAL_TIM_IC_CaptureCallback>
 800c050:	e005      	b.n	800c05e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f996 	bl	800c384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 f9a7 	bl	800c3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	f003 0308 	and.w	r3, r3, #8
 800c06e:	2b08      	cmp	r3, #8
 800c070:	d122      	bne.n	800c0b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	f003 0308 	and.w	r3, r3, #8
 800c07c:	2b08      	cmp	r3, #8
 800c07e:	d11b      	bne.n	800c0b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f06f 0208 	mvn.w	r2, #8
 800c088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2204      	movs	r2, #4
 800c08e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	69db      	ldr	r3, [r3, #28]
 800c096:	f003 0303 	and.w	r3, r3, #3
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d003      	beq.n	800c0a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 f97a 	bl	800c398 <HAL_TIM_IC_CaptureCallback>
 800c0a4:	e005      	b.n	800c0b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 f96c 	bl	800c384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 f97d 	bl	800c3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	f003 0310 	and.w	r3, r3, #16
 800c0c2:	2b10      	cmp	r3, #16
 800c0c4:	d122      	bne.n	800c10c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	f003 0310 	and.w	r3, r3, #16
 800c0d0:	2b10      	cmp	r3, #16
 800c0d2:	d11b      	bne.n	800c10c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f06f 0210 	mvn.w	r2, #16
 800c0dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2208      	movs	r2, #8
 800c0e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d003      	beq.n	800c0fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f950 	bl	800c398 <HAL_TIM_IC_CaptureCallback>
 800c0f8:	e005      	b.n	800c106 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f942 	bl	800c384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f953 	bl	800c3ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	f003 0301 	and.w	r3, r3, #1
 800c116:	2b01      	cmp	r3, #1
 800c118:	d10e      	bne.n	800c138 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	f003 0301 	and.w	r3, r3, #1
 800c124:	2b01      	cmp	r3, #1
 800c126:	d107      	bne.n	800c138 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f06f 0201 	mvn.w	r2, #1
 800c130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7f4 fa2e 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c142:	2b80      	cmp	r3, #128	; 0x80
 800c144:	d10e      	bne.n	800c164 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	68db      	ldr	r3, [r3, #12]
 800c14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c150:	2b80      	cmp	r3, #128	; 0x80
 800c152:	d107      	bne.n	800c164 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c15c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 faa6 	bl	800c6b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c16e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c172:	d10e      	bne.n	800c192 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c17e:	2b80      	cmp	r3, #128	; 0x80
 800c180:	d107      	bne.n	800c192 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c18a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 fa99 	bl	800c6c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c19c:	2b40      	cmp	r3, #64	; 0x40
 800c19e:	d10e      	bne.n	800c1be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1aa:	2b40      	cmp	r3, #64	; 0x40
 800c1ac:	d107      	bne.n	800c1be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c1b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f901 	bl	800c3c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	f003 0320 	and.w	r3, r3, #32
 800c1c8:	2b20      	cmp	r3, #32
 800c1ca:	d10e      	bne.n	800c1ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	f003 0320 	and.w	r3, r3, #32
 800c1d6:	2b20      	cmp	r3, #32
 800c1d8:	d107      	bne.n	800c1ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f06f 0220 	mvn.w	r2, #32
 800c1e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 fa59 	bl	800c69c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c1ea:	bf00      	nop
 800c1ec:	3708      	adds	r7, #8
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b084      	sub	sp, #16
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c206:	2b01      	cmp	r3, #1
 800c208:	d101      	bne.n	800c20e <HAL_TIM_ConfigClockSource+0x1c>
 800c20a:	2302      	movs	r3, #2
 800c20c:	e0b6      	b.n	800c37c <HAL_TIM_ConfigClockSource+0x18a>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2202      	movs	r2, #2
 800c21a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	689b      	ldr	r3, [r3, #8]
 800c224:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c22c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c230:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c238:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c24a:	d03e      	beq.n	800c2ca <HAL_TIM_ConfigClockSource+0xd8>
 800c24c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c250:	f200 8087 	bhi.w	800c362 <HAL_TIM_ConfigClockSource+0x170>
 800c254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c258:	f000 8086 	beq.w	800c368 <HAL_TIM_ConfigClockSource+0x176>
 800c25c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c260:	d87f      	bhi.n	800c362 <HAL_TIM_ConfigClockSource+0x170>
 800c262:	2b70      	cmp	r3, #112	; 0x70
 800c264:	d01a      	beq.n	800c29c <HAL_TIM_ConfigClockSource+0xaa>
 800c266:	2b70      	cmp	r3, #112	; 0x70
 800c268:	d87b      	bhi.n	800c362 <HAL_TIM_ConfigClockSource+0x170>
 800c26a:	2b60      	cmp	r3, #96	; 0x60
 800c26c:	d050      	beq.n	800c310 <HAL_TIM_ConfigClockSource+0x11e>
 800c26e:	2b60      	cmp	r3, #96	; 0x60
 800c270:	d877      	bhi.n	800c362 <HAL_TIM_ConfigClockSource+0x170>
 800c272:	2b50      	cmp	r3, #80	; 0x50
 800c274:	d03c      	beq.n	800c2f0 <HAL_TIM_ConfigClockSource+0xfe>
 800c276:	2b50      	cmp	r3, #80	; 0x50
 800c278:	d873      	bhi.n	800c362 <HAL_TIM_ConfigClockSource+0x170>
 800c27a:	2b40      	cmp	r3, #64	; 0x40
 800c27c:	d058      	beq.n	800c330 <HAL_TIM_ConfigClockSource+0x13e>
 800c27e:	2b40      	cmp	r3, #64	; 0x40
 800c280:	d86f      	bhi.n	800c362 <HAL_TIM_ConfigClockSource+0x170>
 800c282:	2b30      	cmp	r3, #48	; 0x30
 800c284:	d064      	beq.n	800c350 <HAL_TIM_ConfigClockSource+0x15e>
 800c286:	2b30      	cmp	r3, #48	; 0x30
 800c288:	d86b      	bhi.n	800c362 <HAL_TIM_ConfigClockSource+0x170>
 800c28a:	2b20      	cmp	r3, #32
 800c28c:	d060      	beq.n	800c350 <HAL_TIM_ConfigClockSource+0x15e>
 800c28e:	2b20      	cmp	r3, #32
 800c290:	d867      	bhi.n	800c362 <HAL_TIM_ConfigClockSource+0x170>
 800c292:	2b00      	cmp	r3, #0
 800c294:	d05c      	beq.n	800c350 <HAL_TIM_ConfigClockSource+0x15e>
 800c296:	2b10      	cmp	r3, #16
 800c298:	d05a      	beq.n	800c350 <HAL_TIM_ConfigClockSource+0x15e>
 800c29a:	e062      	b.n	800c362 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6818      	ldr	r0, [r3, #0]
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	6899      	ldr	r1, [r3, #8]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	f000 f970 	bl	800c590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c2be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	609a      	str	r2, [r3, #8]
      break;
 800c2c8:	e04f      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6818      	ldr	r0, [r3, #0]
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	6899      	ldr	r1, [r3, #8]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	f000 f959 	bl	800c590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	689a      	ldr	r2, [r3, #8]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2ec:	609a      	str	r2, [r3, #8]
      break;
 800c2ee:	e03c      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6818      	ldr	r0, [r3, #0]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	6859      	ldr	r1, [r3, #4]
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	f000 f8cd 	bl	800c49c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2150      	movs	r1, #80	; 0x50
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 f926 	bl	800c55a <TIM_ITRx_SetConfig>
      break;
 800c30e:	e02c      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6818      	ldr	r0, [r3, #0]
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	6859      	ldr	r1, [r3, #4]
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	461a      	mov	r2, r3
 800c31e:	f000 f8ec 	bl	800c4fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2160      	movs	r1, #96	; 0x60
 800c328:	4618      	mov	r0, r3
 800c32a:	f000 f916 	bl	800c55a <TIM_ITRx_SetConfig>
      break;
 800c32e:	e01c      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6818      	ldr	r0, [r3, #0]
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	6859      	ldr	r1, [r3, #4]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	461a      	mov	r2, r3
 800c33e:	f000 f8ad 	bl	800c49c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2140      	movs	r1, #64	; 0x40
 800c348:	4618      	mov	r0, r3
 800c34a:	f000 f906 	bl	800c55a <TIM_ITRx_SetConfig>
      break;
 800c34e:	e00c      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4619      	mov	r1, r3
 800c35a:	4610      	mov	r0, r2
 800c35c:	f000 f8fd 	bl	800c55a <TIM_ITRx_SetConfig>
      break;
 800c360:	e003      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	73fb      	strb	r3, [r7, #15]
      break;
 800c366:	e000      	b.n	800c36a <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c368:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c38c:	bf00      	nop
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c3a0:	bf00      	nop
 800c3a2:	370c      	adds	r7, #12
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3b4:	bf00      	nop
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4a2a      	ldr	r2, [pc, #168]	; (800c490 <TIM_Base_SetConfig+0xbc>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d003      	beq.n	800c3f4 <TIM_Base_SetConfig+0x20>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3f2:	d108      	bne.n	800c406 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	4313      	orrs	r3, r2
 800c404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4a21      	ldr	r2, [pc, #132]	; (800c490 <TIM_Base_SetConfig+0xbc>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d00b      	beq.n	800c426 <TIM_Base_SetConfig+0x52>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c414:	d007      	beq.n	800c426 <TIM_Base_SetConfig+0x52>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	4a1e      	ldr	r2, [pc, #120]	; (800c494 <TIM_Base_SetConfig+0xc0>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d003      	beq.n	800c426 <TIM_Base_SetConfig+0x52>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4a1d      	ldr	r2, [pc, #116]	; (800c498 <TIM_Base_SetConfig+0xc4>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d108      	bne.n	800c438 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c42c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	68fa      	ldr	r2, [r7, #12]
 800c434:	4313      	orrs	r3, r2
 800c436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	695b      	ldr	r3, [r3, #20]
 800c442:	4313      	orrs	r3, r2
 800c444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	689a      	ldr	r2, [r3, #8]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a0c      	ldr	r2, [pc, #48]	; (800c490 <TIM_Base_SetConfig+0xbc>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d007      	beq.n	800c474 <TIM_Base_SetConfig+0xa0>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	4a0b      	ldr	r2, [pc, #44]	; (800c494 <TIM_Base_SetConfig+0xc0>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d003      	beq.n	800c474 <TIM_Base_SetConfig+0xa0>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	4a0a      	ldr	r2, [pc, #40]	; (800c498 <TIM_Base_SetConfig+0xc4>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d103      	bne.n	800c47c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	691a      	ldr	r2, [r3, #16]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	615a      	str	r2, [r3, #20]
}
 800c482:	bf00      	nop
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	40012c00 	.word	0x40012c00
 800c494:	40014000 	.word	0x40014000
 800c498:	40014400 	.word	0x40014400

0800c49c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b087      	sub	sp, #28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6a1b      	ldr	r3, [r3, #32]
 800c4ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	f023 0201 	bic.w	r2, r3, #1
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c4c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	011b      	lsls	r3, r3, #4
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	f023 030a 	bic.w	r3, r3, #10
 800c4d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c4da:	697a      	ldr	r2, [r7, #20]
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	693a      	ldr	r2, [r7, #16]
 800c4e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	621a      	str	r2, [r3, #32]
}
 800c4ee:	bf00      	nop
 800c4f0:	371c      	adds	r7, #28
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	b087      	sub	sp, #28
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	60f8      	str	r0, [r7, #12]
 800c502:	60b9      	str	r1, [r7, #8]
 800c504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6a1b      	ldr	r3, [r3, #32]
 800c50a:	f023 0210 	bic.w	r2, r3, #16
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6a1b      	ldr	r3, [r3, #32]
 800c51c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	031b      	lsls	r3, r3, #12
 800c52a:	697a      	ldr	r2, [r7, #20]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	011b      	lsls	r3, r3, #4
 800c53c:	693a      	ldr	r2, [r7, #16]
 800c53e:	4313      	orrs	r3, r2
 800c540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	697a      	ldr	r2, [r7, #20]
 800c546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	693a      	ldr	r2, [r7, #16]
 800c54c:	621a      	str	r2, [r3, #32]
}
 800c54e:	bf00      	nop
 800c550:	371c      	adds	r7, #28
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr

0800c55a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c55a:	b480      	push	{r7}
 800c55c:	b085      	sub	sp, #20
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
 800c562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	4313      	orrs	r3, r2
 800c578:	f043 0307 	orr.w	r3, r3, #7
 800c57c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	609a      	str	r2, [r3, #8]
}
 800c584:	bf00      	nop
 800c586:	3714      	adds	r7, #20
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c590:	b480      	push	{r7}
 800c592:	b087      	sub	sp, #28
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]
 800c59c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c5aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	021a      	lsls	r2, r3, #8
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	431a      	orrs	r2, r3
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	697a      	ldr	r2, [r7, #20]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	697a      	ldr	r2, [r7, #20]
 800c5c2:	609a      	str	r2, [r3, #8]
}
 800c5c4:	bf00      	nop
 800c5c6:	371c      	adds	r7, #28
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d101      	bne.n	800c5e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c5e4:	2302      	movs	r3, #2
 800c5e6:	e04f      	b.n	800c688 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a21      	ldr	r2, [pc, #132]	; (800c694 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d108      	bne.n	800c624 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c618:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	4313      	orrs	r3, r2
 800c622:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c62a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	4313      	orrs	r3, r2
 800c634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a14      	ldr	r2, [pc, #80]	; (800c694 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d009      	beq.n	800c65c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c650:	d004      	beq.n	800c65c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a10      	ldr	r2, [pc, #64]	; (800c698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d10c      	bne.n	800c676 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c662:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2201      	movs	r2, #1
 800c67a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c686:	2300      	movs	r3, #0
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3714      	adds	r7, #20
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr
 800c694:	40012c00 	.word	0x40012c00
 800c698:	40014000 	.word	0x40014000

0800c69c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c6a4:	bf00      	nop
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c6b8:	bf00      	nop
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c6cc:	bf00      	nop
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d101      	bne.n	800c6ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e040      	b.n	800c76c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d106      	bne.n	800c700 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f7f4 fca8 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2224      	movs	r2, #36	; 0x24
 800c704:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f022 0201 	bic.w	r2, r2, #1
 800c714:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fbe8 	bl	800ceec <UART_SetConfig>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d101      	bne.n	800c726 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c722:	2301      	movs	r3, #1
 800c724:	e022      	b.n	800c76c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d002      	beq.n	800c734 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fe36 	bl	800d3a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	685a      	ldr	r2, [r3, #4]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	689a      	ldr	r2, [r3, #8]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f042 0201 	orr.w	r2, r2, #1
 800c762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 febd 	bl	800d4e4 <UART_CheckIdleState>
 800c76a:	4603      	mov	r3, r0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c774:	b480      	push	{r7}
 800c776:	b08b      	sub	sp, #44	; 0x2c
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	4613      	mov	r3, r2
 800c780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c786:	2b20      	cmp	r3, #32
 800c788:	d156      	bne.n	800c838 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <HAL_UART_Transmit_IT+0x22>
 800c790:	88fb      	ldrh	r3, [r7, #6]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	e04f      	b.n	800c83a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d101      	bne.n	800c7a8 <HAL_UART_Transmit_IT+0x34>
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	e048      	b.n	800c83a <HAL_UART_Transmit_IT+0xc6>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	88fa      	ldrh	r2, [r7, #6]
 800c7ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	88fa      	ldrh	r2, [r7, #6]
 800c7c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2221      	movs	r2, #33	; 0x21
 800c7d8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7e2:	d107      	bne.n	800c7f4 <HAL_UART_Transmit_IT+0x80>
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	691b      	ldr	r3, [r3, #16]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d103      	bne.n	800c7f4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	4a16      	ldr	r2, [pc, #88]	; (800c848 <HAL_UART_Transmit_IT+0xd4>)
 800c7f0:	669a      	str	r2, [r3, #104]	; 0x68
 800c7f2:	e002      	b.n	800c7fa <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	4a15      	ldr	r2, [pc, #84]	; (800c84c <HAL_UART_Transmit_IT+0xd8>)
 800c7f8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	e853 3f00 	ldrex	r3, [r3]
 800c80e:	613b      	str	r3, [r7, #16]
   return(result);
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c816:	627b      	str	r3, [r7, #36]	; 0x24
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	461a      	mov	r2, r3
 800c81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c820:	623b      	str	r3, [r7, #32]
 800c822:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c824:	69f9      	ldr	r1, [r7, #28]
 800c826:	6a3a      	ldr	r2, [r7, #32]
 800c828:	e841 2300 	strex	r3, r2, [r1]
 800c82c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1e6      	bne.n	800c802 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800c834:	2300      	movs	r3, #0
 800c836:	e000      	b.n	800c83a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800c838:	2302      	movs	r3, #2
  }
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	372c      	adds	r7, #44	; 0x2c
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr
 800c846:	bf00      	nop
 800c848:	0800da3f 	.word	0x0800da3f
 800c84c:	0800d987 	.word	0x0800d987

0800c850 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b08a      	sub	sp, #40	; 0x28
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	4613      	mov	r3, r2
 800c85c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c862:	2b20      	cmp	r3, #32
 800c864:	d142      	bne.n	800c8ec <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d002      	beq.n	800c872 <HAL_UART_Receive_IT+0x22>
 800c86c:	88fb      	ldrh	r3, [r7, #6]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d101      	bne.n	800c876 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	e03b      	b.n	800c8ee <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d101      	bne.n	800c884 <HAL_UART_Receive_IT+0x34>
 800c880:	2302      	movs	r3, #2
 800c882:	e034      	b.n	800c8ee <HAL_UART_Receive_IT+0x9e>
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2201      	movs	r2, #1
 800c888:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2200      	movs	r2, #0
 800c890:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a18      	ldr	r2, [pc, #96]	; (800c8f8 <HAL_UART_Receive_IT+0xa8>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d01f      	beq.n	800c8dc <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d018      	beq.n	800c8dc <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	e853 3f00 	ldrex	r3, [r3]
 800c8b6:	613b      	str	r3, [r7, #16]
   return(result);
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c8be:	627b      	str	r3, [r7, #36]	; 0x24
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c8:	623b      	str	r3, [r7, #32]
 800c8ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8cc:	69f9      	ldr	r1, [r7, #28]
 800c8ce:	6a3a      	ldr	r2, [r7, #32]
 800c8d0:	e841 2300 	strex	r3, r2, [r1]
 800c8d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1e6      	bne.n	800c8aa <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c8dc:	88fb      	ldrh	r3, [r7, #6]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	68b9      	ldr	r1, [r7, #8]
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	f000 ff0c 	bl	800d700 <UART_Start_Receive_IT>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	e000      	b.n	800c8ee <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c8ec:	2302      	movs	r3, #2
  }
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3728      	adds	r7, #40	; 0x28
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	40008000 	.word	0x40008000

0800c8fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b0ba      	sub	sp, #232	; 0xe8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	69db      	ldr	r3, [r3, #28]
 800c90a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c922:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c926:	f640 030f 	movw	r3, #2063	; 0x80f
 800c92a:	4013      	ands	r3, r2
 800c92c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c934:	2b00      	cmp	r3, #0
 800c936:	d115      	bne.n	800c964 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c93c:	f003 0320 	and.w	r3, r3, #32
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00f      	beq.n	800c964 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c948:	f003 0320 	and.w	r3, r3, #32
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d009      	beq.n	800c964 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 82a6 	beq.w	800cea6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	4798      	blx	r3
      }
      return;
 800c962:	e2a0      	b.n	800cea6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c968:	2b00      	cmp	r3, #0
 800c96a:	f000 8117 	beq.w	800cb9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c96e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c972:	f003 0301 	and.w	r3, r3, #1
 800c976:	2b00      	cmp	r3, #0
 800c978:	d106      	bne.n	800c988 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c97a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c97e:	4b85      	ldr	r3, [pc, #532]	; (800cb94 <HAL_UART_IRQHandler+0x298>)
 800c980:	4013      	ands	r3, r2
 800c982:	2b00      	cmp	r3, #0
 800c984:	f000 810a 	beq.w	800cb9c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c98c:	f003 0301 	and.w	r3, r3, #1
 800c990:	2b00      	cmp	r3, #0
 800c992:	d011      	beq.n	800c9b8 <HAL_UART_IRQHandler+0xbc>
 800c994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00b      	beq.n	800c9b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9ae:	f043 0201 	orr.w	r2, r3, #1
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9bc:	f003 0302 	and.w	r3, r3, #2
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d011      	beq.n	800c9e8 <HAL_UART_IRQHandler+0xec>
 800c9c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9c8:	f003 0301 	and.w	r3, r3, #1
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00b      	beq.n	800c9e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2202      	movs	r2, #2
 800c9d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9de:	f043 0204 	orr.w	r2, r3, #4
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9ec:	f003 0304 	and.w	r3, r3, #4
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d011      	beq.n	800ca18 <HAL_UART_IRQHandler+0x11c>
 800c9f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9f8:	f003 0301 	and.w	r3, r3, #1
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00b      	beq.n	800ca18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2204      	movs	r2, #4
 800ca06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca0e:	f043 0202 	orr.w	r2, r3, #2
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ca18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca1c:	f003 0308 	and.w	r3, r3, #8
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d017      	beq.n	800ca54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ca24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca28:	f003 0320 	and.w	r3, r3, #32
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d105      	bne.n	800ca3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ca30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00b      	beq.n	800ca54 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2208      	movs	r2, #8
 800ca42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca4a:	f043 0208 	orr.w	r2, r3, #8
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ca54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d012      	beq.n	800ca86 <HAL_UART_IRQHandler+0x18a>
 800ca60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00c      	beq.n	800ca86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca7c:	f043 0220 	orr.w	r2, r3, #32
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f000 820c 	beq.w	800ceaa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ca92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca96:	f003 0320 	and.w	r3, r3, #32
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00d      	beq.n	800caba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ca9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800caa2:	f003 0320 	and.w	r3, r3, #32
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d007      	beq.n	800caba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d003      	beq.n	800caba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cace:	2b40      	cmp	r3, #64	; 0x40
 800cad0:	d005      	beq.n	800cade <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cad6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d04f      	beq.n	800cb7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fed8 	bl	800d894 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caee:	2b40      	cmp	r3, #64	; 0x40
 800caf0:	d141      	bne.n	800cb76 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	3308      	adds	r3, #8
 800caf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cb00:	e853 3f00 	ldrex	r3, [r3]
 800cb04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cb08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cb0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	3308      	adds	r3, #8
 800cb1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cb1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cb22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cb2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cb2e:	e841 2300 	strex	r3, r2, [r1]
 800cb32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cb36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1d9      	bne.n	800caf2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d013      	beq.n	800cb6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb4a:	4a13      	ldr	r2, [pc, #76]	; (800cb98 <HAL_UART_IRQHandler+0x29c>)
 800cb4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fc fd3b 	bl	80095ce <HAL_DMA_Abort_IT>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d017      	beq.n	800cb8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800cb68:	4610      	mov	r0, r2
 800cb6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb6c:	e00f      	b.n	800cb8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 f9a6 	bl	800cec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb74:	e00b      	b.n	800cb8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 f9a2 	bl	800cec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb7c:	e007      	b.n	800cb8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 f99e 	bl	800cec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800cb8c:	e18d      	b.n	800ceaa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb8e:	bf00      	nop
    return;
 800cb90:	e18b      	b.n	800ceaa <HAL_UART_IRQHandler+0x5ae>
 800cb92:	bf00      	nop
 800cb94:	04000120 	.word	0x04000120
 800cb98:	0800d95b 	.word	0x0800d95b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	f040 8146 	bne.w	800ce32 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbaa:	f003 0310 	and.w	r3, r3, #16
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	f000 813f 	beq.w	800ce32 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cbb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbb8:	f003 0310 	and.w	r3, r3, #16
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f000 8138 	beq.w	800ce32 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2210      	movs	r2, #16
 800cbc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd4:	2b40      	cmp	r3, #64	; 0x40
 800cbd6:	f040 80b4 	bne.w	800cd42 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cbe6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f000 815f 	beq.w	800ceae <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cbf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	f080 8157 	bcs.w	800ceae <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cc06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f003 0320 	and.w	r3, r3, #32
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	f040 8085 	bne.w	800cd26 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc28:	e853 3f00 	ldrex	r3, [r3]
 800cc2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cc30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	461a      	mov	r2, r3
 800cc42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cc4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cc52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cc56:	e841 2300 	strex	r3, r2, [r1]
 800cc5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cc5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d1da      	bne.n	800cc1c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	3308      	adds	r3, #8
 800cc6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc70:	e853 3f00 	ldrex	r3, [r3]
 800cc74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cc76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc78:	f023 0301 	bic.w	r3, r3, #1
 800cc7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	3308      	adds	r3, #8
 800cc86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cc8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cc8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cc92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cc96:	e841 2300 	strex	r3, r2, [r1]
 800cc9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cc9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1e1      	bne.n	800cc66 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	3308      	adds	r3, #8
 800cca8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccac:	e853 3f00 	ldrex	r3, [r3]
 800ccb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ccb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	3308      	adds	r3, #8
 800ccc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ccc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ccc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cccc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ccce:	e841 2300 	strex	r3, r2, [r1]
 800ccd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ccd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d1e3      	bne.n	800cca2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2220      	movs	r2, #32
 800ccde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccee:	e853 3f00 	ldrex	r3, [r3]
 800ccf2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ccf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccf6:	f023 0310 	bic.w	r3, r3, #16
 800ccfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	461a      	mov	r2, r3
 800cd04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cd08:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd10:	e841 2300 	strex	r3, r2, [r1]
 800cd14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cd16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d1e4      	bne.n	800cce6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fc fc16 	bl	8009552 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	1ad3      	subs	r3, r2, r3
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	4619      	mov	r1, r3
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 f8ca 	bl	800ced4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cd40:	e0b5      	b.n	800ceae <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f000 80a7 	beq.w	800ceb2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800cd64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f000 80a2 	beq.w	800ceb2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd76:	e853 3f00 	ldrex	r3, [r3]
 800cd7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cd90:	647b      	str	r3, [r7, #68]	; 0x44
 800cd92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd98:	e841 2300 	strex	r3, r2, [r1]
 800cd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1e4      	bne.n	800cd6e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	3308      	adds	r3, #8
 800cdaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdae:	e853 3f00 	ldrex	r3, [r3]
 800cdb2:	623b      	str	r3, [r7, #32]
   return(result);
 800cdb4:	6a3b      	ldr	r3, [r7, #32]
 800cdb6:	f023 0301 	bic.w	r3, r3, #1
 800cdba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	3308      	adds	r3, #8
 800cdc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cdc8:	633a      	str	r2, [r7, #48]	; 0x30
 800cdca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdd0:	e841 2300 	strex	r3, r2, [r1]
 800cdd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1e3      	bne.n	800cda4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2220      	movs	r2, #32
 800cde0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2200      	movs	r2, #0
 800cde6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	e853 3f00 	ldrex	r3, [r3]
 800cdfa:	60fb      	str	r3, [r7, #12]
   return(result);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f023 0310 	bic.w	r3, r3, #16
 800ce02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ce10:	61fb      	str	r3, [r7, #28]
 800ce12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce14:	69b9      	ldr	r1, [r7, #24]
 800ce16:	69fa      	ldr	r2, [r7, #28]
 800ce18:	e841 2300 	strex	r3, r2, [r1]
 800ce1c:	617b      	str	r3, [r7, #20]
   return(result);
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d1e4      	bne.n	800cdee <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ce24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce28:	4619      	mov	r1, r3
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f852 	bl	800ced4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce30:	e03f      	b.n	800ceb2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ce32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00e      	beq.n	800ce5c <HAL_UART_IRQHandler+0x560>
 800ce3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d008      	beq.n	800ce5c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ce52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 ffdc 	bl	800de12 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce5a:	e02d      	b.n	800ceb8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ce5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00e      	beq.n	800ce86 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ce68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d008      	beq.n	800ce86 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d01c      	beq.n	800ceb6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	4798      	blx	r3
    }
    return;
 800ce84:	e017      	b.n	800ceb6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ce86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d012      	beq.n	800ceb8 <HAL_UART_IRQHandler+0x5bc>
 800ce92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00c      	beq.n	800ceb8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fe2d 	bl	800dafe <UART_EndTransmit_IT>
    return;
 800cea4:	e008      	b.n	800ceb8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800cea6:	bf00      	nop
 800cea8:	e006      	b.n	800ceb8 <HAL_UART_IRQHandler+0x5bc>
    return;
 800ceaa:	bf00      	nop
 800ceac:	e004      	b.n	800ceb8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800ceae:	bf00      	nop
 800ceb0:	e002      	b.n	800ceb8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800ceb2:	bf00      	nop
 800ceb4:	e000      	b.n	800ceb8 <HAL_UART_IRQHandler+0x5bc>
    return;
 800ceb6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800ceb8:	37e8      	adds	r7, #232	; 0xe8
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop

0800cec0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	460b      	mov	r3, r1
 800cede:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ceec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cef0:	b08a      	sub	sp, #40	; 0x28
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cef6:	2300      	movs	r3, #0
 800cef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	689a      	ldr	r2, [r3, #8]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	691b      	ldr	r3, [r3, #16]
 800cf04:	431a      	orrs	r2, r3
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	695b      	ldr	r3, [r3, #20]
 800cf0a:	431a      	orrs	r2, r3
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	69db      	ldr	r3, [r3, #28]
 800cf10:	4313      	orrs	r3, r2
 800cf12:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	4b9e      	ldr	r3, [pc, #632]	; (800d194 <UART_SetConfig+0x2a8>)
 800cf1c:	4013      	ands	r3, r2
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	6812      	ldr	r2, [r2, #0]
 800cf22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf24:	430b      	orrs	r3, r1
 800cf26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	68da      	ldr	r2, [r3, #12]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	430a      	orrs	r2, r1
 800cf3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	699b      	ldr	r3, [r3, #24]
 800cf42:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a93      	ldr	r2, [pc, #588]	; (800d198 <UART_SetConfig+0x2ac>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d004      	beq.n	800cf58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	6a1b      	ldr	r3, [r3, #32]
 800cf52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf54:	4313      	orrs	r3, r2
 800cf56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	689b      	ldr	r3, [r3, #8]
 800cf5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf68:	430a      	orrs	r2, r1
 800cf6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a8a      	ldr	r2, [pc, #552]	; (800d19c <UART_SetConfig+0x2b0>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d126      	bne.n	800cfc4 <UART_SetConfig+0xd8>
 800cf76:	4b8a      	ldr	r3, [pc, #552]	; (800d1a0 <UART_SetConfig+0x2b4>)
 800cf78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf7c:	f003 0303 	and.w	r3, r3, #3
 800cf80:	2b03      	cmp	r3, #3
 800cf82:	d81b      	bhi.n	800cfbc <UART_SetConfig+0xd0>
 800cf84:	a201      	add	r2, pc, #4	; (adr r2, 800cf8c <UART_SetConfig+0xa0>)
 800cf86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf8a:	bf00      	nop
 800cf8c:	0800cf9d 	.word	0x0800cf9d
 800cf90:	0800cfad 	.word	0x0800cfad
 800cf94:	0800cfa5 	.word	0x0800cfa5
 800cf98:	0800cfb5 	.word	0x0800cfb5
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cfa2:	e0ab      	b.n	800d0fc <UART_SetConfig+0x210>
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cfaa:	e0a7      	b.n	800d0fc <UART_SetConfig+0x210>
 800cfac:	2304      	movs	r3, #4
 800cfae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cfb2:	e0a3      	b.n	800d0fc <UART_SetConfig+0x210>
 800cfb4:	2308      	movs	r3, #8
 800cfb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cfba:	e09f      	b.n	800d0fc <UART_SetConfig+0x210>
 800cfbc:	2310      	movs	r3, #16
 800cfbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cfc2:	e09b      	b.n	800d0fc <UART_SetConfig+0x210>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a76      	ldr	r2, [pc, #472]	; (800d1a4 <UART_SetConfig+0x2b8>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d138      	bne.n	800d040 <UART_SetConfig+0x154>
 800cfce:	4b74      	ldr	r3, [pc, #464]	; (800d1a0 <UART_SetConfig+0x2b4>)
 800cfd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfd4:	f003 030c 	and.w	r3, r3, #12
 800cfd8:	2b0c      	cmp	r3, #12
 800cfda:	d82d      	bhi.n	800d038 <UART_SetConfig+0x14c>
 800cfdc:	a201      	add	r2, pc, #4	; (adr r2, 800cfe4 <UART_SetConfig+0xf8>)
 800cfde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe2:	bf00      	nop
 800cfe4:	0800d019 	.word	0x0800d019
 800cfe8:	0800d039 	.word	0x0800d039
 800cfec:	0800d039 	.word	0x0800d039
 800cff0:	0800d039 	.word	0x0800d039
 800cff4:	0800d029 	.word	0x0800d029
 800cff8:	0800d039 	.word	0x0800d039
 800cffc:	0800d039 	.word	0x0800d039
 800d000:	0800d039 	.word	0x0800d039
 800d004:	0800d021 	.word	0x0800d021
 800d008:	0800d039 	.word	0x0800d039
 800d00c:	0800d039 	.word	0x0800d039
 800d010:	0800d039 	.word	0x0800d039
 800d014:	0800d031 	.word	0x0800d031
 800d018:	2300      	movs	r3, #0
 800d01a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d01e:	e06d      	b.n	800d0fc <UART_SetConfig+0x210>
 800d020:	2302      	movs	r3, #2
 800d022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d026:	e069      	b.n	800d0fc <UART_SetConfig+0x210>
 800d028:	2304      	movs	r3, #4
 800d02a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d02e:	e065      	b.n	800d0fc <UART_SetConfig+0x210>
 800d030:	2308      	movs	r3, #8
 800d032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d036:	e061      	b.n	800d0fc <UART_SetConfig+0x210>
 800d038:	2310      	movs	r3, #16
 800d03a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d03e:	e05d      	b.n	800d0fc <UART_SetConfig+0x210>
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a58      	ldr	r2, [pc, #352]	; (800d1a8 <UART_SetConfig+0x2bc>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d125      	bne.n	800d096 <UART_SetConfig+0x1aa>
 800d04a:	4b55      	ldr	r3, [pc, #340]	; (800d1a0 <UART_SetConfig+0x2b4>)
 800d04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d050:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d054:	2b30      	cmp	r3, #48	; 0x30
 800d056:	d016      	beq.n	800d086 <UART_SetConfig+0x19a>
 800d058:	2b30      	cmp	r3, #48	; 0x30
 800d05a:	d818      	bhi.n	800d08e <UART_SetConfig+0x1a2>
 800d05c:	2b20      	cmp	r3, #32
 800d05e:	d00a      	beq.n	800d076 <UART_SetConfig+0x18a>
 800d060:	2b20      	cmp	r3, #32
 800d062:	d814      	bhi.n	800d08e <UART_SetConfig+0x1a2>
 800d064:	2b00      	cmp	r3, #0
 800d066:	d002      	beq.n	800d06e <UART_SetConfig+0x182>
 800d068:	2b10      	cmp	r3, #16
 800d06a:	d008      	beq.n	800d07e <UART_SetConfig+0x192>
 800d06c:	e00f      	b.n	800d08e <UART_SetConfig+0x1a2>
 800d06e:	2300      	movs	r3, #0
 800d070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d074:	e042      	b.n	800d0fc <UART_SetConfig+0x210>
 800d076:	2302      	movs	r3, #2
 800d078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d07c:	e03e      	b.n	800d0fc <UART_SetConfig+0x210>
 800d07e:	2304      	movs	r3, #4
 800d080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d084:	e03a      	b.n	800d0fc <UART_SetConfig+0x210>
 800d086:	2308      	movs	r3, #8
 800d088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d08c:	e036      	b.n	800d0fc <UART_SetConfig+0x210>
 800d08e:	2310      	movs	r3, #16
 800d090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d094:	e032      	b.n	800d0fc <UART_SetConfig+0x210>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a3f      	ldr	r2, [pc, #252]	; (800d198 <UART_SetConfig+0x2ac>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d12a      	bne.n	800d0f6 <UART_SetConfig+0x20a>
 800d0a0:	4b3f      	ldr	r3, [pc, #252]	; (800d1a0 <UART_SetConfig+0x2b4>)
 800d0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d0aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d0ae:	d01a      	beq.n	800d0e6 <UART_SetConfig+0x1fa>
 800d0b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d0b4:	d81b      	bhi.n	800d0ee <UART_SetConfig+0x202>
 800d0b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0ba:	d00c      	beq.n	800d0d6 <UART_SetConfig+0x1ea>
 800d0bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0c0:	d815      	bhi.n	800d0ee <UART_SetConfig+0x202>
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d003      	beq.n	800d0ce <UART_SetConfig+0x1e2>
 800d0c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0ca:	d008      	beq.n	800d0de <UART_SetConfig+0x1f2>
 800d0cc:	e00f      	b.n	800d0ee <UART_SetConfig+0x202>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d0d4:	e012      	b.n	800d0fc <UART_SetConfig+0x210>
 800d0d6:	2302      	movs	r3, #2
 800d0d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d0dc:	e00e      	b.n	800d0fc <UART_SetConfig+0x210>
 800d0de:	2304      	movs	r3, #4
 800d0e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d0e4:	e00a      	b.n	800d0fc <UART_SetConfig+0x210>
 800d0e6:	2308      	movs	r3, #8
 800d0e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d0ec:	e006      	b.n	800d0fc <UART_SetConfig+0x210>
 800d0ee:	2310      	movs	r3, #16
 800d0f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d0f4:	e002      	b.n	800d0fc <UART_SetConfig+0x210>
 800d0f6:	2310      	movs	r3, #16
 800d0f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a25      	ldr	r2, [pc, #148]	; (800d198 <UART_SetConfig+0x2ac>)
 800d102:	4293      	cmp	r3, r2
 800d104:	f040 808a 	bne.w	800d21c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d108:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d10c:	2b08      	cmp	r3, #8
 800d10e:	d824      	bhi.n	800d15a <UART_SetConfig+0x26e>
 800d110:	a201      	add	r2, pc, #4	; (adr r2, 800d118 <UART_SetConfig+0x22c>)
 800d112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d116:	bf00      	nop
 800d118:	0800d13d 	.word	0x0800d13d
 800d11c:	0800d15b 	.word	0x0800d15b
 800d120:	0800d145 	.word	0x0800d145
 800d124:	0800d15b 	.word	0x0800d15b
 800d128:	0800d14b 	.word	0x0800d14b
 800d12c:	0800d15b 	.word	0x0800d15b
 800d130:	0800d15b 	.word	0x0800d15b
 800d134:	0800d15b 	.word	0x0800d15b
 800d138:	0800d153 	.word	0x0800d153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d13c:	f7fd fb6a 	bl	800a814 <HAL_RCC_GetPCLK1Freq>
 800d140:	61f8      	str	r0, [r7, #28]
        break;
 800d142:	e010      	b.n	800d166 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d144:	4b19      	ldr	r3, [pc, #100]	; (800d1ac <UART_SetConfig+0x2c0>)
 800d146:	61fb      	str	r3, [r7, #28]
        break;
 800d148:	e00d      	b.n	800d166 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d14a:	f7fd facb 	bl	800a6e4 <HAL_RCC_GetSysClockFreq>
 800d14e:	61f8      	str	r0, [r7, #28]
        break;
 800d150:	e009      	b.n	800d166 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d156:	61fb      	str	r3, [r7, #28]
        break;
 800d158:	e005      	b.n	800d166 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800d15a:	2300      	movs	r3, #0
 800d15c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d164:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f000 8109 	beq.w	800d380 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	4613      	mov	r3, r2
 800d174:	005b      	lsls	r3, r3, #1
 800d176:	4413      	add	r3, r2
 800d178:	69fa      	ldr	r2, [r7, #28]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d305      	bcc.n	800d18a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d184:	69fa      	ldr	r2, [r7, #28]
 800d186:	429a      	cmp	r2, r3
 800d188:	d912      	bls.n	800d1b0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800d18a:	2301      	movs	r3, #1
 800d18c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d190:	e0f6      	b.n	800d380 <UART_SetConfig+0x494>
 800d192:	bf00      	nop
 800d194:	efff69f3 	.word	0xefff69f3
 800d198:	40008000 	.word	0x40008000
 800d19c:	40013800 	.word	0x40013800
 800d1a0:	40021000 	.word	0x40021000
 800d1a4:	40004400 	.word	0x40004400
 800d1a8:	40004800 	.word	0x40004800
 800d1ac:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	461c      	mov	r4, r3
 800d1b6:	4615      	mov	r5, r2
 800d1b8:	f04f 0200 	mov.w	r2, #0
 800d1bc:	f04f 0300 	mov.w	r3, #0
 800d1c0:	022b      	lsls	r3, r5, #8
 800d1c2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d1c6:	0222      	lsls	r2, r4, #8
 800d1c8:	68f9      	ldr	r1, [r7, #12]
 800d1ca:	6849      	ldr	r1, [r1, #4]
 800d1cc:	0849      	lsrs	r1, r1, #1
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	4688      	mov	r8, r1
 800d1d2:	4681      	mov	r9, r0
 800d1d4:	eb12 0a08 	adds.w	sl, r2, r8
 800d1d8:	eb43 0b09 	adc.w	fp, r3, r9
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	603b      	str	r3, [r7, #0]
 800d1e4:	607a      	str	r2, [r7, #4]
 800d1e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1ea:	4650      	mov	r0, sl
 800d1ec:	4659      	mov	r1, fp
 800d1ee:	f7f3 f84f 	bl	8000290 <__aeabi_uldivmod>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1fa:	69bb      	ldr	r3, [r7, #24]
 800d1fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d200:	d308      	bcc.n	800d214 <UART_SetConfig+0x328>
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d208:	d204      	bcs.n	800d214 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	69ba      	ldr	r2, [r7, #24]
 800d210:	60da      	str	r2, [r3, #12]
 800d212:	e0b5      	b.n	800d380 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800d214:	2301      	movs	r3, #1
 800d216:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d21a:	e0b1      	b.n	800d380 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	69db      	ldr	r3, [r3, #28]
 800d220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d224:	d15d      	bne.n	800d2e2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800d226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d22a:	2b08      	cmp	r3, #8
 800d22c:	d827      	bhi.n	800d27e <UART_SetConfig+0x392>
 800d22e:	a201      	add	r2, pc, #4	; (adr r2, 800d234 <UART_SetConfig+0x348>)
 800d230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d234:	0800d259 	.word	0x0800d259
 800d238:	0800d261 	.word	0x0800d261
 800d23c:	0800d269 	.word	0x0800d269
 800d240:	0800d27f 	.word	0x0800d27f
 800d244:	0800d26f 	.word	0x0800d26f
 800d248:	0800d27f 	.word	0x0800d27f
 800d24c:	0800d27f 	.word	0x0800d27f
 800d250:	0800d27f 	.word	0x0800d27f
 800d254:	0800d277 	.word	0x0800d277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d258:	f7fd fadc 	bl	800a814 <HAL_RCC_GetPCLK1Freq>
 800d25c:	61f8      	str	r0, [r7, #28]
        break;
 800d25e:	e014      	b.n	800d28a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d260:	f7fd faee 	bl	800a840 <HAL_RCC_GetPCLK2Freq>
 800d264:	61f8      	str	r0, [r7, #28]
        break;
 800d266:	e010      	b.n	800d28a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d268:	4b4c      	ldr	r3, [pc, #304]	; (800d39c <UART_SetConfig+0x4b0>)
 800d26a:	61fb      	str	r3, [r7, #28]
        break;
 800d26c:	e00d      	b.n	800d28a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d26e:	f7fd fa39 	bl	800a6e4 <HAL_RCC_GetSysClockFreq>
 800d272:	61f8      	str	r0, [r7, #28]
        break;
 800d274:	e009      	b.n	800d28a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d27a:	61fb      	str	r3, [r7, #28]
        break;
 800d27c:	e005      	b.n	800d28a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800d27e:	2300      	movs	r3, #0
 800d280:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d077      	beq.n	800d380 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	005a      	lsls	r2, r3, #1
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	085b      	lsrs	r3, r3, #1
 800d29a:	441a      	add	r2, r3
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	2b0f      	cmp	r3, #15
 800d2aa:	d916      	bls.n	800d2da <UART_SetConfig+0x3ee>
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2b2:	d212      	bcs.n	800d2da <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	f023 030f 	bic.w	r3, r3, #15
 800d2bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	085b      	lsrs	r3, r3, #1
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	f003 0307 	and.w	r3, r3, #7
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	8afb      	ldrh	r3, [r7, #22]
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	8afa      	ldrh	r2, [r7, #22]
 800d2d6:	60da      	str	r2, [r3, #12]
 800d2d8:	e052      	b.n	800d380 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d2e0:	e04e      	b.n	800d380 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d2e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d2e6:	2b08      	cmp	r3, #8
 800d2e8:	d827      	bhi.n	800d33a <UART_SetConfig+0x44e>
 800d2ea:	a201      	add	r2, pc, #4	; (adr r2, 800d2f0 <UART_SetConfig+0x404>)
 800d2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f0:	0800d315 	.word	0x0800d315
 800d2f4:	0800d31d 	.word	0x0800d31d
 800d2f8:	0800d325 	.word	0x0800d325
 800d2fc:	0800d33b 	.word	0x0800d33b
 800d300:	0800d32b 	.word	0x0800d32b
 800d304:	0800d33b 	.word	0x0800d33b
 800d308:	0800d33b 	.word	0x0800d33b
 800d30c:	0800d33b 	.word	0x0800d33b
 800d310:	0800d333 	.word	0x0800d333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d314:	f7fd fa7e 	bl	800a814 <HAL_RCC_GetPCLK1Freq>
 800d318:	61f8      	str	r0, [r7, #28]
        break;
 800d31a:	e014      	b.n	800d346 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d31c:	f7fd fa90 	bl	800a840 <HAL_RCC_GetPCLK2Freq>
 800d320:	61f8      	str	r0, [r7, #28]
        break;
 800d322:	e010      	b.n	800d346 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d324:	4b1d      	ldr	r3, [pc, #116]	; (800d39c <UART_SetConfig+0x4b0>)
 800d326:	61fb      	str	r3, [r7, #28]
        break;
 800d328:	e00d      	b.n	800d346 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d32a:	f7fd f9db 	bl	800a6e4 <HAL_RCC_GetSysClockFreq>
 800d32e:	61f8      	str	r0, [r7, #28]
        break;
 800d330:	e009      	b.n	800d346 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d336:	61fb      	str	r3, [r7, #28]
        break;
 800d338:	e005      	b.n	800d346 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800d33a:	2300      	movs	r3, #0
 800d33c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d33e:	2301      	movs	r3, #1
 800d340:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d344:	bf00      	nop
    }

    if (pclk != 0U)
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d019      	beq.n	800d380 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	085a      	lsrs	r2, r3, #1
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	441a      	add	r2, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d35e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	2b0f      	cmp	r3, #15
 800d364:	d909      	bls.n	800d37a <UART_SetConfig+0x48e>
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d36c:	d205      	bcs.n	800d37a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	b29a      	uxth	r2, r3
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	60da      	str	r2, [r3, #12]
 800d378:	e002      	b.n	800d380 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800d37a:	2301      	movs	r3, #1
 800d37c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2200      	movs	r2, #0
 800d384:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2200      	movs	r2, #0
 800d38a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d38c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800d390:	4618      	mov	r0, r3
 800d392:	3728      	adds	r7, #40	; 0x28
 800d394:	46bd      	mov	sp, r7
 800d396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d39a:	bf00      	nop
 800d39c:	00f42400 	.word	0x00f42400

0800d3a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ac:	f003 0301 	and.w	r3, r3, #1
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00a      	beq.n	800d3ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	430a      	orrs	r2, r1
 800d3c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ce:	f003 0302 	and.w	r3, r3, #2
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00a      	beq.n	800d3ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	430a      	orrs	r2, r1
 800d3ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f0:	f003 0304 	and.w	r3, r3, #4
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d00a      	beq.n	800d40e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	430a      	orrs	r2, r1
 800d40c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d412:	f003 0308 	and.w	r3, r3, #8
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00a      	beq.n	800d430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	430a      	orrs	r2, r1
 800d42e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d434:	f003 0310 	and.w	r3, r3, #16
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d00a      	beq.n	800d452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	430a      	orrs	r2, r1
 800d450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d456:	f003 0320 	and.w	r3, r3, #32
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00a      	beq.n	800d474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	430a      	orrs	r2, r1
 800d472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d01a      	beq.n	800d4b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	430a      	orrs	r2, r1
 800d494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d49a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d49e:	d10a      	bne.n	800d4b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	430a      	orrs	r2, r1
 800d4b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00a      	beq.n	800d4d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	430a      	orrs	r2, r1
 800d4d6:	605a      	str	r2, [r3, #4]
  }
}
 800d4d8:	bf00      	nop
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af02      	add	r7, sp, #8
 800d4ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d4f4:	f7fb feec 	bl	80092d0 <HAL_GetTick>
 800d4f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f003 0308 	and.w	r3, r3, #8
 800d504:	2b08      	cmp	r3, #8
 800d506:	d10e      	bne.n	800d526 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2200      	movs	r2, #0
 800d512:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 f82d 	bl	800d576 <UART_WaitOnFlagUntilTimeout>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d001      	beq.n	800d526 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d522:	2303      	movs	r3, #3
 800d524:	e023      	b.n	800d56e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f003 0304 	and.w	r3, r3, #4
 800d530:	2b04      	cmp	r3, #4
 800d532:	d10e      	bne.n	800d552 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2200      	movs	r2, #0
 800d53e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f817 	bl	800d576 <UART_WaitOnFlagUntilTimeout>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d001      	beq.n	800d552 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d54e:	2303      	movs	r3, #3
 800d550:	e00d      	b.n	800d56e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2220      	movs	r2, #32
 800d556:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2220      	movs	r2, #32
 800d55c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b09c      	sub	sp, #112	; 0x70
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	60f8      	str	r0, [r7, #12]
 800d57e:	60b9      	str	r1, [r7, #8]
 800d580:	603b      	str	r3, [r7, #0]
 800d582:	4613      	mov	r3, r2
 800d584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d586:	e0a5      	b.n	800d6d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58e:	f000 80a1 	beq.w	800d6d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d592:	f7fb fe9d 	bl	80092d0 <HAL_GetTick>
 800d596:	4602      	mov	r2, r0
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d302      	bcc.n	800d5a8 <UART_WaitOnFlagUntilTimeout+0x32>
 800d5a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d13e      	bne.n	800d626 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5b0:	e853 3f00 	ldrex	r3, [r3]
 800d5b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d5b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d5bc:	667b      	str	r3, [r7, #100]	; 0x64
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d5cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5ce:	e841 2300 	strex	r3, r2, [r1]
 800d5d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d5d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d1e6      	bne.n	800d5a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	3308      	adds	r3, #8
 800d5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e4:	e853 3f00 	ldrex	r3, [r3]
 800d5e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ec:	f023 0301 	bic.w	r3, r3, #1
 800d5f0:	663b      	str	r3, [r7, #96]	; 0x60
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	3308      	adds	r3, #8
 800d5f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5fa:	64ba      	str	r2, [r7, #72]	; 0x48
 800d5fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d602:	e841 2300 	strex	r3, r2, [r1]
 800d606:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d1e5      	bne.n	800d5da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2220      	movs	r2, #32
 800d612:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2220      	movs	r2, #32
 800d618:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2200      	movs	r2, #0
 800d61e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d622:	2303      	movs	r3, #3
 800d624:	e067      	b.n	800d6f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f003 0304 	and.w	r3, r3, #4
 800d630:	2b00      	cmp	r3, #0
 800d632:	d04f      	beq.n	800d6d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	69db      	ldr	r3, [r3, #28]
 800d63a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d63e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d642:	d147      	bne.n	800d6d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d64c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d656:	e853 3f00 	ldrex	r3, [r3]
 800d65a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d662:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	461a      	mov	r2, r3
 800d66a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d66c:	637b      	str	r3, [r7, #52]	; 0x34
 800d66e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d674:	e841 2300 	strex	r3, r2, [r1]
 800d678:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1e6      	bne.n	800d64e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	3308      	adds	r3, #8
 800d686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	e853 3f00 	ldrex	r3, [r3]
 800d68e:	613b      	str	r3, [r7, #16]
   return(result);
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	f023 0301 	bic.w	r3, r3, #1
 800d696:	66bb      	str	r3, [r7, #104]	; 0x68
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	3308      	adds	r3, #8
 800d69e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d6a0:	623a      	str	r2, [r7, #32]
 800d6a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a4:	69f9      	ldr	r1, [r7, #28]
 800d6a6:	6a3a      	ldr	r2, [r7, #32]
 800d6a8:	e841 2300 	strex	r3, r2, [r1]
 800d6ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d1e5      	bne.n	800d680 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2220      	movs	r2, #32
 800d6b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2220      	movs	r2, #32
 800d6be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2220      	movs	r2, #32
 800d6c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800d6d0:	2303      	movs	r3, #3
 800d6d2:	e010      	b.n	800d6f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	69da      	ldr	r2, [r3, #28]
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	4013      	ands	r3, r2
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	bf0c      	ite	eq
 800d6e4:	2301      	moveq	r3, #1
 800d6e6:	2300      	movne	r3, #0
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	79fb      	ldrb	r3, [r7, #7]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	f43f af4a 	beq.w	800d588 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d6f4:	2300      	movs	r3, #0
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3770      	adds	r7, #112	; 0x70
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
	...

0800d700 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d700:	b480      	push	{r7}
 800d702:	b097      	sub	sp, #92	; 0x5c
 800d704:	af00      	add	r7, sp, #0
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	4613      	mov	r3, r2
 800d70c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	68ba      	ldr	r2, [r7, #8]
 800d712:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	88fa      	ldrh	r2, [r7, #6]
 800d718:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	88fa      	ldrh	r2, [r7, #6]
 800d720:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2200      	movs	r2, #0
 800d728:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d732:	d10e      	bne.n	800d752 <UART_Start_Receive_IT+0x52>
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	691b      	ldr	r3, [r3, #16]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d105      	bne.n	800d748 <UART_Start_Receive_IT+0x48>
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d742:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d746:	e02d      	b.n	800d7a4 <UART_Start_Receive_IT+0xa4>
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	22ff      	movs	r2, #255	; 0xff
 800d74c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d750:	e028      	b.n	800d7a4 <UART_Start_Receive_IT+0xa4>
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	689b      	ldr	r3, [r3, #8]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d10d      	bne.n	800d776 <UART_Start_Receive_IT+0x76>
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	691b      	ldr	r3, [r3, #16]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d104      	bne.n	800d76c <UART_Start_Receive_IT+0x6c>
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	22ff      	movs	r2, #255	; 0xff
 800d766:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d76a:	e01b      	b.n	800d7a4 <UART_Start_Receive_IT+0xa4>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	227f      	movs	r2, #127	; 0x7f
 800d770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d774:	e016      	b.n	800d7a4 <UART_Start_Receive_IT+0xa4>
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d77e:	d10d      	bne.n	800d79c <UART_Start_Receive_IT+0x9c>
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	691b      	ldr	r3, [r3, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d104      	bne.n	800d792 <UART_Start_Receive_IT+0x92>
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	227f      	movs	r2, #127	; 0x7f
 800d78c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d790:	e008      	b.n	800d7a4 <UART_Start_Receive_IT+0xa4>
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	223f      	movs	r2, #63	; 0x3f
 800d796:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d79a:	e003      	b.n	800d7a4 <UART_Start_Receive_IT+0xa4>
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2222      	movs	r2, #34	; 0x22
 800d7b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	3308      	adds	r3, #8
 800d7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7bc:	e853 3f00 	ldrex	r3, [r3]
 800d7c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c4:	f043 0301 	orr.w	r3, r3, #1
 800d7c8:	657b      	str	r3, [r7, #84]	; 0x54
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	3308      	adds	r3, #8
 800d7d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7d2:	64ba      	str	r2, [r7, #72]	; 0x48
 800d7d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d7d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7da:	e841 2300 	strex	r3, r2, [r1]
 800d7de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d7e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d1e5      	bne.n	800d7b2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7ee:	d107      	bne.n	800d800 <UART_Start_Receive_IT+0x100>
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d103      	bne.n	800d800 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	4a24      	ldr	r2, [pc, #144]	; (800d88c <UART_Start_Receive_IT+0x18c>)
 800d7fc:	665a      	str	r2, [r3, #100]	; 0x64
 800d7fe:	e002      	b.n	800d806 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	4a23      	ldr	r2, [pc, #140]	; (800d890 <UART_Start_Receive_IT+0x190>)
 800d804:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	691b      	ldr	r3, [r3, #16]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d019      	beq.n	800d84a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81e:	e853 3f00 	ldrex	r3, [r3]
 800d822:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d826:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d82a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	461a      	mov	r2, r3
 800d832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d834:	637b      	str	r3, [r7, #52]	; 0x34
 800d836:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d838:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d83a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d83c:	e841 2300 	strex	r3, r2, [r1]
 800d840:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1e6      	bne.n	800d816 <UART_Start_Receive_IT+0x116>
 800d848:	e018      	b.n	800d87c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	e853 3f00 	ldrex	r3, [r3]
 800d856:	613b      	str	r3, [r7, #16]
   return(result);
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	f043 0320 	orr.w	r3, r3, #32
 800d85e:	653b      	str	r3, [r7, #80]	; 0x50
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	461a      	mov	r2, r3
 800d866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d868:	623b      	str	r3, [r7, #32]
 800d86a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86c:	69f9      	ldr	r1, [r7, #28]
 800d86e:	6a3a      	ldr	r2, [r7, #32]
 800d870:	e841 2300 	strex	r3, r2, [r1]
 800d874:	61bb      	str	r3, [r7, #24]
   return(result);
 800d876:	69bb      	ldr	r3, [r7, #24]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d1e6      	bne.n	800d84a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800d87c:	2300      	movs	r3, #0
}
 800d87e:	4618      	mov	r0, r3
 800d880:	375c      	adds	r7, #92	; 0x5c
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop
 800d88c:	0800dcb3 	.word	0x0800dcb3
 800d890:	0800db53 	.word	0x0800db53

0800d894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d894:	b480      	push	{r7}
 800d896:	b095      	sub	sp, #84	; 0x54
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a4:	e853 3f00 	ldrex	r3, [r3]
 800d8a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8ba:	643b      	str	r3, [r7, #64]	; 0x40
 800d8bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8c2:	e841 2300 	strex	r3, r2, [r1]
 800d8c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d1e6      	bne.n	800d89c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	3308      	adds	r3, #8
 800d8d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	e853 3f00 	ldrex	r3, [r3]
 800d8dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	f023 0301 	bic.w	r3, r3, #1
 800d8e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	3308      	adds	r3, #8
 800d8ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d8f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8f6:	e841 2300 	strex	r3, r2, [r1]
 800d8fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1e5      	bne.n	800d8ce <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d906:	2b01      	cmp	r3, #1
 800d908:	d118      	bne.n	800d93c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	e853 3f00 	ldrex	r3, [r3]
 800d916:	60bb      	str	r3, [r7, #8]
   return(result);
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	f023 0310 	bic.w	r3, r3, #16
 800d91e:	647b      	str	r3, [r7, #68]	; 0x44
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	461a      	mov	r2, r3
 800d926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d928:	61bb      	str	r3, [r7, #24]
 800d92a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92c:	6979      	ldr	r1, [r7, #20]
 800d92e:	69ba      	ldr	r2, [r7, #24]
 800d930:	e841 2300 	strex	r3, r2, [r1]
 800d934:	613b      	str	r3, [r7, #16]
   return(result);
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1e6      	bne.n	800d90a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2220      	movs	r2, #32
 800d940:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d94e:	bf00      	nop
 800d950:	3754      	adds	r7, #84	; 0x54
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr

0800d95a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b084      	sub	sp, #16
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d966:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2200      	movs	r2, #0
 800d96c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2200      	movs	r2, #0
 800d974:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f7ff faa1 	bl	800cec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d97e:	bf00      	nop
 800d980:	3710      	adds	r7, #16
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d986:	b480      	push	{r7}
 800d988:	b08f      	sub	sp, #60	; 0x3c
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d992:	2b21      	cmp	r3, #33	; 0x21
 800d994:	d14d      	bne.n	800da32 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d132      	bne.n	800da08 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a8:	6a3b      	ldr	r3, [r7, #32]
 800d9aa:	e853 3f00 	ldrex	r3, [r3]
 800d9ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9b6:	637b      	str	r3, [r7, #52]	; 0x34
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	461a      	mov	r2, r3
 800d9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9c2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9c8:	e841 2300 	strex	r3, r2, [r1]
 800d9cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d1e6      	bne.n	800d9a2 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	e853 3f00 	ldrex	r3, [r3]
 800d9e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9e8:	633b      	str	r3, [r7, #48]	; 0x30
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f2:	61bb      	str	r3, [r7, #24]
 800d9f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f6:	6979      	ldr	r1, [r7, #20]
 800d9f8:	69ba      	ldr	r2, [r7, #24]
 800d9fa:	e841 2300 	strex	r3, r2, [r1]
 800d9fe:	613b      	str	r3, [r7, #16]
   return(result);
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d1e6      	bne.n	800d9d4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800da06:	e014      	b.n	800da32 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da0c:	781a      	ldrb	r2, [r3, #0]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	b292      	uxth	r2, r2
 800da14:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da1a:	1c5a      	adds	r2, r3, #1
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800da26:	b29b      	uxth	r3, r3
 800da28:	3b01      	subs	r3, #1
 800da2a:	b29a      	uxth	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800da32:	bf00      	nop
 800da34:	373c      	adds	r7, #60	; 0x3c
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr

0800da3e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800da3e:	b480      	push	{r7}
 800da40:	b091      	sub	sp, #68	; 0x44
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da4a:	2b21      	cmp	r3, #33	; 0x21
 800da4c:	d151      	bne.n	800daf2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800da54:	b29b      	uxth	r3, r3
 800da56:	2b00      	cmp	r3, #0
 800da58:	d132      	bne.n	800dac0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da62:	e853 3f00 	ldrex	r3, [r3]
 800da66:	623b      	str	r3, [r7, #32]
   return(result);
 800da68:	6a3b      	ldr	r3, [r7, #32]
 800da6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	461a      	mov	r2, r3
 800da76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da78:	633b      	str	r3, [r7, #48]	; 0x30
 800da7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da80:	e841 2300 	strex	r3, r2, [r1]
 800da84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d1e6      	bne.n	800da5a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	e853 3f00 	ldrex	r3, [r3]
 800da98:	60fb      	str	r3, [r7, #12]
   return(result);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daa0:	637b      	str	r3, [r7, #52]	; 0x34
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	461a      	mov	r2, r3
 800daa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daaa:	61fb      	str	r3, [r7, #28]
 800daac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daae:	69b9      	ldr	r1, [r7, #24]
 800dab0:	69fa      	ldr	r2, [r7, #28]
 800dab2:	e841 2300 	strex	r3, r2, [r1]
 800dab6:	617b      	str	r3, [r7, #20]
   return(result);
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d1e6      	bne.n	800da8c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800dabe:	e018      	b.n	800daf2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dac4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800dac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac8:	881a      	ldrh	r2, [r3, #0]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dad2:	b292      	uxth	r2, r2
 800dad4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dada:	1c9a      	adds	r2, r3, #2
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	3b01      	subs	r3, #1
 800daea:	b29a      	uxth	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800daf2:	bf00      	nop
 800daf4:	3744      	adds	r7, #68	; 0x44
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr

0800dafe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b088      	sub	sp, #32
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	e853 3f00 	ldrex	r3, [r3]
 800db12:	60bb      	str	r3, [r7, #8]
   return(result);
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db1a:	61fb      	str	r3, [r7, #28]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	461a      	mov	r2, r3
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	61bb      	str	r3, [r7, #24]
 800db26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db28:	6979      	ldr	r1, [r7, #20]
 800db2a:	69ba      	ldr	r2, [r7, #24]
 800db2c:	e841 2300 	strex	r3, r2, [r1]
 800db30:	613b      	str	r3, [r7, #16]
   return(result);
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1e6      	bne.n	800db06 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2220      	movs	r2, #32
 800db3c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f7fb f90f 	bl	8008d68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db4a:	bf00      	nop
 800db4c:	3720      	adds	r7, #32
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b096      	sub	sp, #88	; 0x58
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db68:	2b22      	cmp	r3, #34	; 0x22
 800db6a:	f040 8094 	bne.w	800dc96 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800db78:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800db7c:	b2d9      	uxtb	r1, r3
 800db7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800db82:	b2da      	uxtb	r2, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db88:	400a      	ands	r2, r1
 800db8a:	b2d2      	uxtb	r2, r2
 800db8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db92:	1c5a      	adds	r2, r3, #1
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	3b01      	subs	r3, #1
 800dba2:	b29a      	uxth	r2, r3
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d179      	bne.n	800dcaa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbbe:	e853 3f00 	ldrex	r3, [r3]
 800dbc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dbca:	653b      	str	r3, [r7, #80]	; 0x50
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbd4:	647b      	str	r3, [r7, #68]	; 0x44
 800dbd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dbda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbdc:	e841 2300 	strex	r3, r2, [r1]
 800dbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dbe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1e6      	bne.n	800dbb6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	3308      	adds	r3, #8
 800dbee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf2:	e853 3f00 	ldrex	r3, [r3]
 800dbf6:	623b      	str	r3, [r7, #32]
   return(result);
 800dbf8:	6a3b      	ldr	r3, [r7, #32]
 800dbfa:	f023 0301 	bic.w	r3, r3, #1
 800dbfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	3308      	adds	r3, #8
 800dc06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc08:	633a      	str	r2, [r7, #48]	; 0x30
 800dc0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc10:	e841 2300 	strex	r3, r2, [r1]
 800dc14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1e5      	bne.n	800dbe8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2220      	movs	r2, #32
 800dc20:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2200      	movs	r2, #0
 800dc26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d12e      	bne.n	800dc8e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	e853 3f00 	ldrex	r3, [r3]
 800dc42:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f023 0310 	bic.w	r3, r3, #16
 800dc4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	461a      	mov	r2, r3
 800dc52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc54:	61fb      	str	r3, [r7, #28]
 800dc56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc58:	69b9      	ldr	r1, [r7, #24]
 800dc5a:	69fa      	ldr	r2, [r7, #28]
 800dc5c:	e841 2300 	strex	r3, r2, [r1]
 800dc60:	617b      	str	r3, [r7, #20]
   return(result);
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1e6      	bne.n	800dc36 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	69db      	ldr	r3, [r3, #28]
 800dc6e:	f003 0310 	and.w	r3, r3, #16
 800dc72:	2b10      	cmp	r3, #16
 800dc74:	d103      	bne.n	800dc7e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2210      	movs	r2, #16
 800dc7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dc84:	4619      	mov	r1, r3
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7ff f924 	bl	800ced4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc8c:	e00d      	b.n	800dcaa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7f2 fcdc 	bl	800064c <HAL_UART_RxCpltCallback>
}
 800dc94:	e009      	b.n	800dcaa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	8b1b      	ldrh	r3, [r3, #24]
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f042 0208 	orr.w	r2, r2, #8
 800dca6:	b292      	uxth	r2, r2
 800dca8:	831a      	strh	r2, [r3, #24]
}
 800dcaa:	bf00      	nop
 800dcac:	3758      	adds	r7, #88	; 0x58
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b096      	sub	sp, #88	; 0x58
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dcc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcc8:	2b22      	cmp	r3, #34	; 0x22
 800dcca:	f040 8094 	bne.w	800ddf6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dcd4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcdc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800dcde:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800dce2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dce6:	4013      	ands	r3, r2
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcf2:	1c9a      	adds	r2, r3, #2
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	3b01      	subs	r3, #1
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d179      	bne.n	800de0a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd1e:	e853 3f00 	ldrex	r3, [r3]
 800dd22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	461a      	mov	r2, r3
 800dd32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd34:	643b      	str	r3, [r7, #64]	; 0x40
 800dd36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dd3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd3c:	e841 2300 	strex	r3, r2, [r1]
 800dd40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d1e6      	bne.n	800dd16 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3308      	adds	r3, #8
 800dd4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd50:	6a3b      	ldr	r3, [r7, #32]
 800dd52:	e853 3f00 	ldrex	r3, [r3]
 800dd56:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	f023 0301 	bic.w	r3, r3, #1
 800dd5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	3308      	adds	r3, #8
 800dd66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd68:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd70:	e841 2300 	strex	r3, r2, [r1]
 800dd74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d1e5      	bne.n	800dd48 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2220      	movs	r2, #32
 800dd80:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2200      	movs	r2, #0
 800dd86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d12e      	bne.n	800ddee <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2200      	movs	r2, #0
 800dd94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	e853 3f00 	ldrex	r3, [r3]
 800dda2:	60bb      	str	r3, [r7, #8]
   return(result);
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	f023 0310 	bic.w	r3, r3, #16
 800ddaa:	647b      	str	r3, [r7, #68]	; 0x44
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddb4:	61bb      	str	r3, [r7, #24]
 800ddb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb8:	6979      	ldr	r1, [r7, #20]
 800ddba:	69ba      	ldr	r2, [r7, #24]
 800ddbc:	e841 2300 	strex	r3, r2, [r1]
 800ddc0:	613b      	str	r3, [r7, #16]
   return(result);
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1e6      	bne.n	800dd96 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	69db      	ldr	r3, [r3, #28]
 800ddce:	f003 0310 	and.w	r3, r3, #16
 800ddd2:	2b10      	cmp	r3, #16
 800ddd4:	d103      	bne.n	800ddde <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2210      	movs	r2, #16
 800dddc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dde4:	4619      	mov	r1, r3
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f7ff f874 	bl	800ced4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ddec:	e00d      	b.n	800de0a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f7f2 fc2c 	bl	800064c <HAL_UART_RxCpltCallback>
}
 800ddf4:	e009      	b.n	800de0a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	8b1b      	ldrh	r3, [r3, #24]
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f042 0208 	orr.w	r2, r2, #8
 800de06:	b292      	uxth	r2, r2
 800de08:	831a      	strh	r2, [r3, #24]
}
 800de0a:	bf00      	nop
 800de0c:	3758      	adds	r7, #88	; 0x58
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800de12:	b480      	push	{r7}
 800de14:	b083      	sub	sp, #12
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800de1a:	bf00      	nop
 800de1c:	370c      	adds	r7, #12
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr

0800de26 <_ZdlPvj>:
 800de26:	f000 b800 	b.w	800de2a <_ZdlPv>

0800de2a <_ZdlPv>:
 800de2a:	f000 b833 	b.w	800de94 <free>
	...

0800de30 <__errno>:
 800de30:	4b01      	ldr	r3, [pc, #4]	; (800de38 <__errno+0x8>)
 800de32:	6818      	ldr	r0, [r3, #0]
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop
 800de38:	2000008c 	.word	0x2000008c

0800de3c <__libc_init_array>:
 800de3c:	b570      	push	{r4, r5, r6, lr}
 800de3e:	4d0d      	ldr	r5, [pc, #52]	; (800de74 <__libc_init_array+0x38>)
 800de40:	4c0d      	ldr	r4, [pc, #52]	; (800de78 <__libc_init_array+0x3c>)
 800de42:	1b64      	subs	r4, r4, r5
 800de44:	10a4      	asrs	r4, r4, #2
 800de46:	2600      	movs	r6, #0
 800de48:	42a6      	cmp	r6, r4
 800de4a:	d109      	bne.n	800de60 <__libc_init_array+0x24>
 800de4c:	4d0b      	ldr	r5, [pc, #44]	; (800de7c <__libc_init_array+0x40>)
 800de4e:	4c0c      	ldr	r4, [pc, #48]	; (800de80 <__libc_init_array+0x44>)
 800de50:	f001 fa3c 	bl	800f2cc <_init>
 800de54:	1b64      	subs	r4, r4, r5
 800de56:	10a4      	asrs	r4, r4, #2
 800de58:	2600      	movs	r6, #0
 800de5a:	42a6      	cmp	r6, r4
 800de5c:	d105      	bne.n	800de6a <__libc_init_array+0x2e>
 800de5e:	bd70      	pop	{r4, r5, r6, pc}
 800de60:	f855 3b04 	ldr.w	r3, [r5], #4
 800de64:	4798      	blx	r3
 800de66:	3601      	adds	r6, #1
 800de68:	e7ee      	b.n	800de48 <__libc_init_array+0xc>
 800de6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800de6e:	4798      	blx	r3
 800de70:	3601      	adds	r6, #1
 800de72:	e7f2      	b.n	800de5a <__libc_init_array+0x1e>
 800de74:	0800f690 	.word	0x0800f690
 800de78:	0800f690 	.word	0x0800f690
 800de7c:	0800f690 	.word	0x0800f690
 800de80:	0800f698 	.word	0x0800f698

0800de84 <malloc>:
 800de84:	4b02      	ldr	r3, [pc, #8]	; (800de90 <malloc+0xc>)
 800de86:	4601      	mov	r1, r0
 800de88:	6818      	ldr	r0, [r3, #0]
 800de8a:	f000 b88d 	b.w	800dfa8 <_malloc_r>
 800de8e:	bf00      	nop
 800de90:	2000008c 	.word	0x2000008c

0800de94 <free>:
 800de94:	4b02      	ldr	r3, [pc, #8]	; (800dea0 <free+0xc>)
 800de96:	4601      	mov	r1, r0
 800de98:	6818      	ldr	r0, [r3, #0]
 800de9a:	f000 b819 	b.w	800ded0 <_free_r>
 800de9e:	bf00      	nop
 800dea0:	2000008c 	.word	0x2000008c

0800dea4 <memcpy>:
 800dea4:	440a      	add	r2, r1
 800dea6:	4291      	cmp	r1, r2
 800dea8:	f100 33ff 	add.w	r3, r0, #4294967295
 800deac:	d100      	bne.n	800deb0 <memcpy+0xc>
 800deae:	4770      	bx	lr
 800deb0:	b510      	push	{r4, lr}
 800deb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800deba:	4291      	cmp	r1, r2
 800debc:	d1f9      	bne.n	800deb2 <memcpy+0xe>
 800debe:	bd10      	pop	{r4, pc}

0800dec0 <memset>:
 800dec0:	4402      	add	r2, r0
 800dec2:	4603      	mov	r3, r0
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d100      	bne.n	800deca <memset+0xa>
 800dec8:	4770      	bx	lr
 800deca:	f803 1b01 	strb.w	r1, [r3], #1
 800dece:	e7f9      	b.n	800dec4 <memset+0x4>

0800ded0 <_free_r>:
 800ded0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ded2:	2900      	cmp	r1, #0
 800ded4:	d044      	beq.n	800df60 <_free_r+0x90>
 800ded6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deda:	9001      	str	r0, [sp, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f1a1 0404 	sub.w	r4, r1, #4
 800dee2:	bfb8      	it	lt
 800dee4:	18e4      	addlt	r4, r4, r3
 800dee6:	f000 f971 	bl	800e1cc <__malloc_lock>
 800deea:	4a1e      	ldr	r2, [pc, #120]	; (800df64 <_free_r+0x94>)
 800deec:	9801      	ldr	r0, [sp, #4]
 800deee:	6813      	ldr	r3, [r2, #0]
 800def0:	b933      	cbnz	r3, 800df00 <_free_r+0x30>
 800def2:	6063      	str	r3, [r4, #4]
 800def4:	6014      	str	r4, [r2, #0]
 800def6:	b003      	add	sp, #12
 800def8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800defc:	f000 b96c 	b.w	800e1d8 <__malloc_unlock>
 800df00:	42a3      	cmp	r3, r4
 800df02:	d908      	bls.n	800df16 <_free_r+0x46>
 800df04:	6825      	ldr	r5, [r4, #0]
 800df06:	1961      	adds	r1, r4, r5
 800df08:	428b      	cmp	r3, r1
 800df0a:	bf01      	itttt	eq
 800df0c:	6819      	ldreq	r1, [r3, #0]
 800df0e:	685b      	ldreq	r3, [r3, #4]
 800df10:	1949      	addeq	r1, r1, r5
 800df12:	6021      	streq	r1, [r4, #0]
 800df14:	e7ed      	b.n	800def2 <_free_r+0x22>
 800df16:	461a      	mov	r2, r3
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	b10b      	cbz	r3, 800df20 <_free_r+0x50>
 800df1c:	42a3      	cmp	r3, r4
 800df1e:	d9fa      	bls.n	800df16 <_free_r+0x46>
 800df20:	6811      	ldr	r1, [r2, #0]
 800df22:	1855      	adds	r5, r2, r1
 800df24:	42a5      	cmp	r5, r4
 800df26:	d10b      	bne.n	800df40 <_free_r+0x70>
 800df28:	6824      	ldr	r4, [r4, #0]
 800df2a:	4421      	add	r1, r4
 800df2c:	1854      	adds	r4, r2, r1
 800df2e:	42a3      	cmp	r3, r4
 800df30:	6011      	str	r1, [r2, #0]
 800df32:	d1e0      	bne.n	800def6 <_free_r+0x26>
 800df34:	681c      	ldr	r4, [r3, #0]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	6053      	str	r3, [r2, #4]
 800df3a:	4421      	add	r1, r4
 800df3c:	6011      	str	r1, [r2, #0]
 800df3e:	e7da      	b.n	800def6 <_free_r+0x26>
 800df40:	d902      	bls.n	800df48 <_free_r+0x78>
 800df42:	230c      	movs	r3, #12
 800df44:	6003      	str	r3, [r0, #0]
 800df46:	e7d6      	b.n	800def6 <_free_r+0x26>
 800df48:	6825      	ldr	r5, [r4, #0]
 800df4a:	1961      	adds	r1, r4, r5
 800df4c:	428b      	cmp	r3, r1
 800df4e:	bf04      	itt	eq
 800df50:	6819      	ldreq	r1, [r3, #0]
 800df52:	685b      	ldreq	r3, [r3, #4]
 800df54:	6063      	str	r3, [r4, #4]
 800df56:	bf04      	itt	eq
 800df58:	1949      	addeq	r1, r1, r5
 800df5a:	6021      	streq	r1, [r4, #0]
 800df5c:	6054      	str	r4, [r2, #4]
 800df5e:	e7ca      	b.n	800def6 <_free_r+0x26>
 800df60:	b003      	add	sp, #12
 800df62:	bd30      	pop	{r4, r5, pc}
 800df64:	20002da8 	.word	0x20002da8

0800df68 <sbrk_aligned>:
 800df68:	b570      	push	{r4, r5, r6, lr}
 800df6a:	4e0e      	ldr	r6, [pc, #56]	; (800dfa4 <sbrk_aligned+0x3c>)
 800df6c:	460c      	mov	r4, r1
 800df6e:	6831      	ldr	r1, [r6, #0]
 800df70:	4605      	mov	r5, r0
 800df72:	b911      	cbnz	r1, 800df7a <sbrk_aligned+0x12>
 800df74:	f000 f8ca 	bl	800e10c <_sbrk_r>
 800df78:	6030      	str	r0, [r6, #0]
 800df7a:	4621      	mov	r1, r4
 800df7c:	4628      	mov	r0, r5
 800df7e:	f000 f8c5 	bl	800e10c <_sbrk_r>
 800df82:	1c43      	adds	r3, r0, #1
 800df84:	d00a      	beq.n	800df9c <sbrk_aligned+0x34>
 800df86:	1cc4      	adds	r4, r0, #3
 800df88:	f024 0403 	bic.w	r4, r4, #3
 800df8c:	42a0      	cmp	r0, r4
 800df8e:	d007      	beq.n	800dfa0 <sbrk_aligned+0x38>
 800df90:	1a21      	subs	r1, r4, r0
 800df92:	4628      	mov	r0, r5
 800df94:	f000 f8ba 	bl	800e10c <_sbrk_r>
 800df98:	3001      	adds	r0, #1
 800df9a:	d101      	bne.n	800dfa0 <sbrk_aligned+0x38>
 800df9c:	f04f 34ff 	mov.w	r4, #4294967295
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	bd70      	pop	{r4, r5, r6, pc}
 800dfa4:	20002dac 	.word	0x20002dac

0800dfa8 <_malloc_r>:
 800dfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfac:	1ccd      	adds	r5, r1, #3
 800dfae:	f025 0503 	bic.w	r5, r5, #3
 800dfb2:	3508      	adds	r5, #8
 800dfb4:	2d0c      	cmp	r5, #12
 800dfb6:	bf38      	it	cc
 800dfb8:	250c      	movcc	r5, #12
 800dfba:	2d00      	cmp	r5, #0
 800dfbc:	4607      	mov	r7, r0
 800dfbe:	db01      	blt.n	800dfc4 <_malloc_r+0x1c>
 800dfc0:	42a9      	cmp	r1, r5
 800dfc2:	d905      	bls.n	800dfd0 <_malloc_r+0x28>
 800dfc4:	230c      	movs	r3, #12
 800dfc6:	603b      	str	r3, [r7, #0]
 800dfc8:	2600      	movs	r6, #0
 800dfca:	4630      	mov	r0, r6
 800dfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfd0:	4e2e      	ldr	r6, [pc, #184]	; (800e08c <_malloc_r+0xe4>)
 800dfd2:	f000 f8fb 	bl	800e1cc <__malloc_lock>
 800dfd6:	6833      	ldr	r3, [r6, #0]
 800dfd8:	461c      	mov	r4, r3
 800dfda:	bb34      	cbnz	r4, 800e02a <_malloc_r+0x82>
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4638      	mov	r0, r7
 800dfe0:	f7ff ffc2 	bl	800df68 <sbrk_aligned>
 800dfe4:	1c43      	adds	r3, r0, #1
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	d14d      	bne.n	800e086 <_malloc_r+0xde>
 800dfea:	6834      	ldr	r4, [r6, #0]
 800dfec:	4626      	mov	r6, r4
 800dfee:	2e00      	cmp	r6, #0
 800dff0:	d140      	bne.n	800e074 <_malloc_r+0xcc>
 800dff2:	6823      	ldr	r3, [r4, #0]
 800dff4:	4631      	mov	r1, r6
 800dff6:	4638      	mov	r0, r7
 800dff8:	eb04 0803 	add.w	r8, r4, r3
 800dffc:	f000 f886 	bl	800e10c <_sbrk_r>
 800e000:	4580      	cmp	r8, r0
 800e002:	d13a      	bne.n	800e07a <_malloc_r+0xd2>
 800e004:	6821      	ldr	r1, [r4, #0]
 800e006:	3503      	adds	r5, #3
 800e008:	1a6d      	subs	r5, r5, r1
 800e00a:	f025 0503 	bic.w	r5, r5, #3
 800e00e:	3508      	adds	r5, #8
 800e010:	2d0c      	cmp	r5, #12
 800e012:	bf38      	it	cc
 800e014:	250c      	movcc	r5, #12
 800e016:	4629      	mov	r1, r5
 800e018:	4638      	mov	r0, r7
 800e01a:	f7ff ffa5 	bl	800df68 <sbrk_aligned>
 800e01e:	3001      	adds	r0, #1
 800e020:	d02b      	beq.n	800e07a <_malloc_r+0xd2>
 800e022:	6823      	ldr	r3, [r4, #0]
 800e024:	442b      	add	r3, r5
 800e026:	6023      	str	r3, [r4, #0]
 800e028:	e00e      	b.n	800e048 <_malloc_r+0xa0>
 800e02a:	6822      	ldr	r2, [r4, #0]
 800e02c:	1b52      	subs	r2, r2, r5
 800e02e:	d41e      	bmi.n	800e06e <_malloc_r+0xc6>
 800e030:	2a0b      	cmp	r2, #11
 800e032:	d916      	bls.n	800e062 <_malloc_r+0xba>
 800e034:	1961      	adds	r1, r4, r5
 800e036:	42a3      	cmp	r3, r4
 800e038:	6025      	str	r5, [r4, #0]
 800e03a:	bf18      	it	ne
 800e03c:	6059      	strne	r1, [r3, #4]
 800e03e:	6863      	ldr	r3, [r4, #4]
 800e040:	bf08      	it	eq
 800e042:	6031      	streq	r1, [r6, #0]
 800e044:	5162      	str	r2, [r4, r5]
 800e046:	604b      	str	r3, [r1, #4]
 800e048:	4638      	mov	r0, r7
 800e04a:	f104 060b 	add.w	r6, r4, #11
 800e04e:	f000 f8c3 	bl	800e1d8 <__malloc_unlock>
 800e052:	f026 0607 	bic.w	r6, r6, #7
 800e056:	1d23      	adds	r3, r4, #4
 800e058:	1af2      	subs	r2, r6, r3
 800e05a:	d0b6      	beq.n	800dfca <_malloc_r+0x22>
 800e05c:	1b9b      	subs	r3, r3, r6
 800e05e:	50a3      	str	r3, [r4, r2]
 800e060:	e7b3      	b.n	800dfca <_malloc_r+0x22>
 800e062:	6862      	ldr	r2, [r4, #4]
 800e064:	42a3      	cmp	r3, r4
 800e066:	bf0c      	ite	eq
 800e068:	6032      	streq	r2, [r6, #0]
 800e06a:	605a      	strne	r2, [r3, #4]
 800e06c:	e7ec      	b.n	800e048 <_malloc_r+0xa0>
 800e06e:	4623      	mov	r3, r4
 800e070:	6864      	ldr	r4, [r4, #4]
 800e072:	e7b2      	b.n	800dfda <_malloc_r+0x32>
 800e074:	4634      	mov	r4, r6
 800e076:	6876      	ldr	r6, [r6, #4]
 800e078:	e7b9      	b.n	800dfee <_malloc_r+0x46>
 800e07a:	230c      	movs	r3, #12
 800e07c:	603b      	str	r3, [r7, #0]
 800e07e:	4638      	mov	r0, r7
 800e080:	f000 f8aa 	bl	800e1d8 <__malloc_unlock>
 800e084:	e7a1      	b.n	800dfca <_malloc_r+0x22>
 800e086:	6025      	str	r5, [r4, #0]
 800e088:	e7de      	b.n	800e048 <_malloc_r+0xa0>
 800e08a:	bf00      	nop
 800e08c:	20002da8 	.word	0x20002da8

0800e090 <rand>:
 800e090:	4b16      	ldr	r3, [pc, #88]	; (800e0ec <rand+0x5c>)
 800e092:	b510      	push	{r4, lr}
 800e094:	681c      	ldr	r4, [r3, #0]
 800e096:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e098:	b9b3      	cbnz	r3, 800e0c8 <rand+0x38>
 800e09a:	2018      	movs	r0, #24
 800e09c:	f7ff fef2 	bl	800de84 <malloc>
 800e0a0:	63a0      	str	r0, [r4, #56]	; 0x38
 800e0a2:	b928      	cbnz	r0, 800e0b0 <rand+0x20>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	4b12      	ldr	r3, [pc, #72]	; (800e0f0 <rand+0x60>)
 800e0a8:	4812      	ldr	r0, [pc, #72]	; (800e0f4 <rand+0x64>)
 800e0aa:	214e      	movs	r1, #78	; 0x4e
 800e0ac:	f000 f85e 	bl	800e16c <__assert_func>
 800e0b0:	4a11      	ldr	r2, [pc, #68]	; (800e0f8 <rand+0x68>)
 800e0b2:	4b12      	ldr	r3, [pc, #72]	; (800e0fc <rand+0x6c>)
 800e0b4:	e9c0 2300 	strd	r2, r3, [r0]
 800e0b8:	4b11      	ldr	r3, [pc, #68]	; (800e100 <rand+0x70>)
 800e0ba:	6083      	str	r3, [r0, #8]
 800e0bc:	230b      	movs	r3, #11
 800e0be:	8183      	strh	r3, [r0, #12]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e0c8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800e0ca:	4a0e      	ldr	r2, [pc, #56]	; (800e104 <rand+0x74>)
 800e0cc:	6920      	ldr	r0, [r4, #16]
 800e0ce:	6963      	ldr	r3, [r4, #20]
 800e0d0:	490d      	ldr	r1, [pc, #52]	; (800e108 <rand+0x78>)
 800e0d2:	4342      	muls	r2, r0
 800e0d4:	fb01 2203 	mla	r2, r1, r3, r2
 800e0d8:	fba0 0101 	umull	r0, r1, r0, r1
 800e0dc:	1c43      	adds	r3, r0, #1
 800e0de:	eb42 0001 	adc.w	r0, r2, r1
 800e0e2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800e0e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e0ea:	bd10      	pop	{r4, pc}
 800e0ec:	2000008c 	.word	0x2000008c
 800e0f0:	0800f544 	.word	0x0800f544
 800e0f4:	0800f55b 	.word	0x0800f55b
 800e0f8:	abcd330e 	.word	0xabcd330e
 800e0fc:	e66d1234 	.word	0xe66d1234
 800e100:	0005deec 	.word	0x0005deec
 800e104:	5851f42d 	.word	0x5851f42d
 800e108:	4c957f2d 	.word	0x4c957f2d

0800e10c <_sbrk_r>:
 800e10c:	b538      	push	{r3, r4, r5, lr}
 800e10e:	4d06      	ldr	r5, [pc, #24]	; (800e128 <_sbrk_r+0x1c>)
 800e110:	2300      	movs	r3, #0
 800e112:	4604      	mov	r4, r0
 800e114:	4608      	mov	r0, r1
 800e116:	602b      	str	r3, [r5, #0]
 800e118:	f7f3 fa3e 	bl	8001598 <_sbrk>
 800e11c:	1c43      	adds	r3, r0, #1
 800e11e:	d102      	bne.n	800e126 <_sbrk_r+0x1a>
 800e120:	682b      	ldr	r3, [r5, #0]
 800e122:	b103      	cbz	r3, 800e126 <_sbrk_r+0x1a>
 800e124:	6023      	str	r3, [r4, #0]
 800e126:	bd38      	pop	{r3, r4, r5, pc}
 800e128:	20002db0 	.word	0x20002db0

0800e12c <siprintf>:
 800e12c:	b40e      	push	{r1, r2, r3}
 800e12e:	b500      	push	{lr}
 800e130:	b09c      	sub	sp, #112	; 0x70
 800e132:	ab1d      	add	r3, sp, #116	; 0x74
 800e134:	9002      	str	r0, [sp, #8]
 800e136:	9006      	str	r0, [sp, #24]
 800e138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e13c:	4809      	ldr	r0, [pc, #36]	; (800e164 <siprintf+0x38>)
 800e13e:	9107      	str	r1, [sp, #28]
 800e140:	9104      	str	r1, [sp, #16]
 800e142:	4909      	ldr	r1, [pc, #36]	; (800e168 <siprintf+0x3c>)
 800e144:	f853 2b04 	ldr.w	r2, [r3], #4
 800e148:	9105      	str	r1, [sp, #20]
 800e14a:	6800      	ldr	r0, [r0, #0]
 800e14c:	9301      	str	r3, [sp, #4]
 800e14e:	a902      	add	r1, sp, #8
 800e150:	f000 f8a4 	bl	800e29c <_svfiprintf_r>
 800e154:	9b02      	ldr	r3, [sp, #8]
 800e156:	2200      	movs	r2, #0
 800e158:	701a      	strb	r2, [r3, #0]
 800e15a:	b01c      	add	sp, #112	; 0x70
 800e15c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e160:	b003      	add	sp, #12
 800e162:	4770      	bx	lr
 800e164:	2000008c 	.word	0x2000008c
 800e168:	ffff0208 	.word	0xffff0208

0800e16c <__assert_func>:
 800e16c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e16e:	4614      	mov	r4, r2
 800e170:	461a      	mov	r2, r3
 800e172:	4b09      	ldr	r3, [pc, #36]	; (800e198 <__assert_func+0x2c>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4605      	mov	r5, r0
 800e178:	68d8      	ldr	r0, [r3, #12]
 800e17a:	b14c      	cbz	r4, 800e190 <__assert_func+0x24>
 800e17c:	4b07      	ldr	r3, [pc, #28]	; (800e19c <__assert_func+0x30>)
 800e17e:	9100      	str	r1, [sp, #0]
 800e180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e184:	4906      	ldr	r1, [pc, #24]	; (800e1a0 <__assert_func+0x34>)
 800e186:	462b      	mov	r3, r5
 800e188:	f000 f80e 	bl	800e1a8 <fiprintf>
 800e18c:	f000 fd34 	bl	800ebf8 <abort>
 800e190:	4b04      	ldr	r3, [pc, #16]	; (800e1a4 <__assert_func+0x38>)
 800e192:	461c      	mov	r4, r3
 800e194:	e7f3      	b.n	800e17e <__assert_func+0x12>
 800e196:	bf00      	nop
 800e198:	2000008c 	.word	0x2000008c
 800e19c:	0800f5b6 	.word	0x0800f5b6
 800e1a0:	0800f5c3 	.word	0x0800f5c3
 800e1a4:	0800f5f1 	.word	0x0800f5f1

0800e1a8 <fiprintf>:
 800e1a8:	b40e      	push	{r1, r2, r3}
 800e1aa:	b503      	push	{r0, r1, lr}
 800e1ac:	4601      	mov	r1, r0
 800e1ae:	ab03      	add	r3, sp, #12
 800e1b0:	4805      	ldr	r0, [pc, #20]	; (800e1c8 <fiprintf+0x20>)
 800e1b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1b6:	6800      	ldr	r0, [r0, #0]
 800e1b8:	9301      	str	r3, [sp, #4]
 800e1ba:	f000 f999 	bl	800e4f0 <_vfiprintf_r>
 800e1be:	b002      	add	sp, #8
 800e1c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1c4:	b003      	add	sp, #12
 800e1c6:	4770      	bx	lr
 800e1c8:	2000008c 	.word	0x2000008c

0800e1cc <__malloc_lock>:
 800e1cc:	4801      	ldr	r0, [pc, #4]	; (800e1d4 <__malloc_lock+0x8>)
 800e1ce:	f000 bed3 	b.w	800ef78 <__retarget_lock_acquire_recursive>
 800e1d2:	bf00      	nop
 800e1d4:	20002db4 	.word	0x20002db4

0800e1d8 <__malloc_unlock>:
 800e1d8:	4801      	ldr	r0, [pc, #4]	; (800e1e0 <__malloc_unlock+0x8>)
 800e1da:	f000 bece 	b.w	800ef7a <__retarget_lock_release_recursive>
 800e1de:	bf00      	nop
 800e1e0:	20002db4 	.word	0x20002db4

0800e1e4 <__ssputs_r>:
 800e1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1e8:	688e      	ldr	r6, [r1, #8]
 800e1ea:	429e      	cmp	r6, r3
 800e1ec:	4682      	mov	sl, r0
 800e1ee:	460c      	mov	r4, r1
 800e1f0:	4690      	mov	r8, r2
 800e1f2:	461f      	mov	r7, r3
 800e1f4:	d838      	bhi.n	800e268 <__ssputs_r+0x84>
 800e1f6:	898a      	ldrh	r2, [r1, #12]
 800e1f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1fc:	d032      	beq.n	800e264 <__ssputs_r+0x80>
 800e1fe:	6825      	ldr	r5, [r4, #0]
 800e200:	6909      	ldr	r1, [r1, #16]
 800e202:	eba5 0901 	sub.w	r9, r5, r1
 800e206:	6965      	ldr	r5, [r4, #20]
 800e208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e20c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e210:	3301      	adds	r3, #1
 800e212:	444b      	add	r3, r9
 800e214:	106d      	asrs	r5, r5, #1
 800e216:	429d      	cmp	r5, r3
 800e218:	bf38      	it	cc
 800e21a:	461d      	movcc	r5, r3
 800e21c:	0553      	lsls	r3, r2, #21
 800e21e:	d531      	bpl.n	800e284 <__ssputs_r+0xa0>
 800e220:	4629      	mov	r1, r5
 800e222:	f7ff fec1 	bl	800dfa8 <_malloc_r>
 800e226:	4606      	mov	r6, r0
 800e228:	b950      	cbnz	r0, 800e240 <__ssputs_r+0x5c>
 800e22a:	230c      	movs	r3, #12
 800e22c:	f8ca 3000 	str.w	r3, [sl]
 800e230:	89a3      	ldrh	r3, [r4, #12]
 800e232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e236:	81a3      	strh	r3, [r4, #12]
 800e238:	f04f 30ff 	mov.w	r0, #4294967295
 800e23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e240:	6921      	ldr	r1, [r4, #16]
 800e242:	464a      	mov	r2, r9
 800e244:	f7ff fe2e 	bl	800dea4 <memcpy>
 800e248:	89a3      	ldrh	r3, [r4, #12]
 800e24a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e24e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e252:	81a3      	strh	r3, [r4, #12]
 800e254:	6126      	str	r6, [r4, #16]
 800e256:	6165      	str	r5, [r4, #20]
 800e258:	444e      	add	r6, r9
 800e25a:	eba5 0509 	sub.w	r5, r5, r9
 800e25e:	6026      	str	r6, [r4, #0]
 800e260:	60a5      	str	r5, [r4, #8]
 800e262:	463e      	mov	r6, r7
 800e264:	42be      	cmp	r6, r7
 800e266:	d900      	bls.n	800e26a <__ssputs_r+0x86>
 800e268:	463e      	mov	r6, r7
 800e26a:	6820      	ldr	r0, [r4, #0]
 800e26c:	4632      	mov	r2, r6
 800e26e:	4641      	mov	r1, r8
 800e270:	f000 feea 	bl	800f048 <memmove>
 800e274:	68a3      	ldr	r3, [r4, #8]
 800e276:	1b9b      	subs	r3, r3, r6
 800e278:	60a3      	str	r3, [r4, #8]
 800e27a:	6823      	ldr	r3, [r4, #0]
 800e27c:	4433      	add	r3, r6
 800e27e:	6023      	str	r3, [r4, #0]
 800e280:	2000      	movs	r0, #0
 800e282:	e7db      	b.n	800e23c <__ssputs_r+0x58>
 800e284:	462a      	mov	r2, r5
 800e286:	f000 fef9 	bl	800f07c <_realloc_r>
 800e28a:	4606      	mov	r6, r0
 800e28c:	2800      	cmp	r0, #0
 800e28e:	d1e1      	bne.n	800e254 <__ssputs_r+0x70>
 800e290:	6921      	ldr	r1, [r4, #16]
 800e292:	4650      	mov	r0, sl
 800e294:	f7ff fe1c 	bl	800ded0 <_free_r>
 800e298:	e7c7      	b.n	800e22a <__ssputs_r+0x46>
	...

0800e29c <_svfiprintf_r>:
 800e29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a0:	4698      	mov	r8, r3
 800e2a2:	898b      	ldrh	r3, [r1, #12]
 800e2a4:	061b      	lsls	r3, r3, #24
 800e2a6:	b09d      	sub	sp, #116	; 0x74
 800e2a8:	4607      	mov	r7, r0
 800e2aa:	460d      	mov	r5, r1
 800e2ac:	4614      	mov	r4, r2
 800e2ae:	d50e      	bpl.n	800e2ce <_svfiprintf_r+0x32>
 800e2b0:	690b      	ldr	r3, [r1, #16]
 800e2b2:	b963      	cbnz	r3, 800e2ce <_svfiprintf_r+0x32>
 800e2b4:	2140      	movs	r1, #64	; 0x40
 800e2b6:	f7ff fe77 	bl	800dfa8 <_malloc_r>
 800e2ba:	6028      	str	r0, [r5, #0]
 800e2bc:	6128      	str	r0, [r5, #16]
 800e2be:	b920      	cbnz	r0, 800e2ca <_svfiprintf_r+0x2e>
 800e2c0:	230c      	movs	r3, #12
 800e2c2:	603b      	str	r3, [r7, #0]
 800e2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c8:	e0d1      	b.n	800e46e <_svfiprintf_r+0x1d2>
 800e2ca:	2340      	movs	r3, #64	; 0x40
 800e2cc:	616b      	str	r3, [r5, #20]
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e2d2:	2320      	movs	r3, #32
 800e2d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2dc:	2330      	movs	r3, #48	; 0x30
 800e2de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e488 <_svfiprintf_r+0x1ec>
 800e2e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2e6:	f04f 0901 	mov.w	r9, #1
 800e2ea:	4623      	mov	r3, r4
 800e2ec:	469a      	mov	sl, r3
 800e2ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2f2:	b10a      	cbz	r2, 800e2f8 <_svfiprintf_r+0x5c>
 800e2f4:	2a25      	cmp	r2, #37	; 0x25
 800e2f6:	d1f9      	bne.n	800e2ec <_svfiprintf_r+0x50>
 800e2f8:	ebba 0b04 	subs.w	fp, sl, r4
 800e2fc:	d00b      	beq.n	800e316 <_svfiprintf_r+0x7a>
 800e2fe:	465b      	mov	r3, fp
 800e300:	4622      	mov	r2, r4
 800e302:	4629      	mov	r1, r5
 800e304:	4638      	mov	r0, r7
 800e306:	f7ff ff6d 	bl	800e1e4 <__ssputs_r>
 800e30a:	3001      	adds	r0, #1
 800e30c:	f000 80aa 	beq.w	800e464 <_svfiprintf_r+0x1c8>
 800e310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e312:	445a      	add	r2, fp
 800e314:	9209      	str	r2, [sp, #36]	; 0x24
 800e316:	f89a 3000 	ldrb.w	r3, [sl]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	f000 80a2 	beq.w	800e464 <_svfiprintf_r+0x1c8>
 800e320:	2300      	movs	r3, #0
 800e322:	f04f 32ff 	mov.w	r2, #4294967295
 800e326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e32a:	f10a 0a01 	add.w	sl, sl, #1
 800e32e:	9304      	str	r3, [sp, #16]
 800e330:	9307      	str	r3, [sp, #28]
 800e332:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e336:	931a      	str	r3, [sp, #104]	; 0x68
 800e338:	4654      	mov	r4, sl
 800e33a:	2205      	movs	r2, #5
 800e33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e340:	4851      	ldr	r0, [pc, #324]	; (800e488 <_svfiprintf_r+0x1ec>)
 800e342:	f7f1 ff55 	bl	80001f0 <memchr>
 800e346:	9a04      	ldr	r2, [sp, #16]
 800e348:	b9d8      	cbnz	r0, 800e382 <_svfiprintf_r+0xe6>
 800e34a:	06d0      	lsls	r0, r2, #27
 800e34c:	bf44      	itt	mi
 800e34e:	2320      	movmi	r3, #32
 800e350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e354:	0711      	lsls	r1, r2, #28
 800e356:	bf44      	itt	mi
 800e358:	232b      	movmi	r3, #43	; 0x2b
 800e35a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e35e:	f89a 3000 	ldrb.w	r3, [sl]
 800e362:	2b2a      	cmp	r3, #42	; 0x2a
 800e364:	d015      	beq.n	800e392 <_svfiprintf_r+0xf6>
 800e366:	9a07      	ldr	r2, [sp, #28]
 800e368:	4654      	mov	r4, sl
 800e36a:	2000      	movs	r0, #0
 800e36c:	f04f 0c0a 	mov.w	ip, #10
 800e370:	4621      	mov	r1, r4
 800e372:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e376:	3b30      	subs	r3, #48	; 0x30
 800e378:	2b09      	cmp	r3, #9
 800e37a:	d94e      	bls.n	800e41a <_svfiprintf_r+0x17e>
 800e37c:	b1b0      	cbz	r0, 800e3ac <_svfiprintf_r+0x110>
 800e37e:	9207      	str	r2, [sp, #28]
 800e380:	e014      	b.n	800e3ac <_svfiprintf_r+0x110>
 800e382:	eba0 0308 	sub.w	r3, r0, r8
 800e386:	fa09 f303 	lsl.w	r3, r9, r3
 800e38a:	4313      	orrs	r3, r2
 800e38c:	9304      	str	r3, [sp, #16]
 800e38e:	46a2      	mov	sl, r4
 800e390:	e7d2      	b.n	800e338 <_svfiprintf_r+0x9c>
 800e392:	9b03      	ldr	r3, [sp, #12]
 800e394:	1d19      	adds	r1, r3, #4
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	9103      	str	r1, [sp, #12]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	bfbb      	ittet	lt
 800e39e:	425b      	neglt	r3, r3
 800e3a0:	f042 0202 	orrlt.w	r2, r2, #2
 800e3a4:	9307      	strge	r3, [sp, #28]
 800e3a6:	9307      	strlt	r3, [sp, #28]
 800e3a8:	bfb8      	it	lt
 800e3aa:	9204      	strlt	r2, [sp, #16]
 800e3ac:	7823      	ldrb	r3, [r4, #0]
 800e3ae:	2b2e      	cmp	r3, #46	; 0x2e
 800e3b0:	d10c      	bne.n	800e3cc <_svfiprintf_r+0x130>
 800e3b2:	7863      	ldrb	r3, [r4, #1]
 800e3b4:	2b2a      	cmp	r3, #42	; 0x2a
 800e3b6:	d135      	bne.n	800e424 <_svfiprintf_r+0x188>
 800e3b8:	9b03      	ldr	r3, [sp, #12]
 800e3ba:	1d1a      	adds	r2, r3, #4
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	9203      	str	r2, [sp, #12]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	bfb8      	it	lt
 800e3c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3c8:	3402      	adds	r4, #2
 800e3ca:	9305      	str	r3, [sp, #20]
 800e3cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e498 <_svfiprintf_r+0x1fc>
 800e3d0:	7821      	ldrb	r1, [r4, #0]
 800e3d2:	2203      	movs	r2, #3
 800e3d4:	4650      	mov	r0, sl
 800e3d6:	f7f1 ff0b 	bl	80001f0 <memchr>
 800e3da:	b140      	cbz	r0, 800e3ee <_svfiprintf_r+0x152>
 800e3dc:	2340      	movs	r3, #64	; 0x40
 800e3de:	eba0 000a 	sub.w	r0, r0, sl
 800e3e2:	fa03 f000 	lsl.w	r0, r3, r0
 800e3e6:	9b04      	ldr	r3, [sp, #16]
 800e3e8:	4303      	orrs	r3, r0
 800e3ea:	3401      	adds	r4, #1
 800e3ec:	9304      	str	r3, [sp, #16]
 800e3ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3f2:	4826      	ldr	r0, [pc, #152]	; (800e48c <_svfiprintf_r+0x1f0>)
 800e3f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3f8:	2206      	movs	r2, #6
 800e3fa:	f7f1 fef9 	bl	80001f0 <memchr>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d038      	beq.n	800e474 <_svfiprintf_r+0x1d8>
 800e402:	4b23      	ldr	r3, [pc, #140]	; (800e490 <_svfiprintf_r+0x1f4>)
 800e404:	bb1b      	cbnz	r3, 800e44e <_svfiprintf_r+0x1b2>
 800e406:	9b03      	ldr	r3, [sp, #12]
 800e408:	3307      	adds	r3, #7
 800e40a:	f023 0307 	bic.w	r3, r3, #7
 800e40e:	3308      	adds	r3, #8
 800e410:	9303      	str	r3, [sp, #12]
 800e412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e414:	4433      	add	r3, r6
 800e416:	9309      	str	r3, [sp, #36]	; 0x24
 800e418:	e767      	b.n	800e2ea <_svfiprintf_r+0x4e>
 800e41a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e41e:	460c      	mov	r4, r1
 800e420:	2001      	movs	r0, #1
 800e422:	e7a5      	b.n	800e370 <_svfiprintf_r+0xd4>
 800e424:	2300      	movs	r3, #0
 800e426:	3401      	adds	r4, #1
 800e428:	9305      	str	r3, [sp, #20]
 800e42a:	4619      	mov	r1, r3
 800e42c:	f04f 0c0a 	mov.w	ip, #10
 800e430:	4620      	mov	r0, r4
 800e432:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e436:	3a30      	subs	r2, #48	; 0x30
 800e438:	2a09      	cmp	r2, #9
 800e43a:	d903      	bls.n	800e444 <_svfiprintf_r+0x1a8>
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d0c5      	beq.n	800e3cc <_svfiprintf_r+0x130>
 800e440:	9105      	str	r1, [sp, #20]
 800e442:	e7c3      	b.n	800e3cc <_svfiprintf_r+0x130>
 800e444:	fb0c 2101 	mla	r1, ip, r1, r2
 800e448:	4604      	mov	r4, r0
 800e44a:	2301      	movs	r3, #1
 800e44c:	e7f0      	b.n	800e430 <_svfiprintf_r+0x194>
 800e44e:	ab03      	add	r3, sp, #12
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	462a      	mov	r2, r5
 800e454:	4b0f      	ldr	r3, [pc, #60]	; (800e494 <_svfiprintf_r+0x1f8>)
 800e456:	a904      	add	r1, sp, #16
 800e458:	4638      	mov	r0, r7
 800e45a:	f3af 8000 	nop.w
 800e45e:	1c42      	adds	r2, r0, #1
 800e460:	4606      	mov	r6, r0
 800e462:	d1d6      	bne.n	800e412 <_svfiprintf_r+0x176>
 800e464:	89ab      	ldrh	r3, [r5, #12]
 800e466:	065b      	lsls	r3, r3, #25
 800e468:	f53f af2c 	bmi.w	800e2c4 <_svfiprintf_r+0x28>
 800e46c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e46e:	b01d      	add	sp, #116	; 0x74
 800e470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e474:	ab03      	add	r3, sp, #12
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	462a      	mov	r2, r5
 800e47a:	4b06      	ldr	r3, [pc, #24]	; (800e494 <_svfiprintf_r+0x1f8>)
 800e47c:	a904      	add	r1, sp, #16
 800e47e:	4638      	mov	r0, r7
 800e480:	f000 f9d4 	bl	800e82c <_printf_i>
 800e484:	e7eb      	b.n	800e45e <_svfiprintf_r+0x1c2>
 800e486:	bf00      	nop
 800e488:	0800f5f2 	.word	0x0800f5f2
 800e48c:	0800f5fc 	.word	0x0800f5fc
 800e490:	00000000 	.word	0x00000000
 800e494:	0800e1e5 	.word	0x0800e1e5
 800e498:	0800f5f8 	.word	0x0800f5f8

0800e49c <__sfputc_r>:
 800e49c:	6893      	ldr	r3, [r2, #8]
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	b410      	push	{r4}
 800e4a4:	6093      	str	r3, [r2, #8]
 800e4a6:	da08      	bge.n	800e4ba <__sfputc_r+0x1e>
 800e4a8:	6994      	ldr	r4, [r2, #24]
 800e4aa:	42a3      	cmp	r3, r4
 800e4ac:	db01      	blt.n	800e4b2 <__sfputc_r+0x16>
 800e4ae:	290a      	cmp	r1, #10
 800e4b0:	d103      	bne.n	800e4ba <__sfputc_r+0x1e>
 800e4b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4b6:	f000 badf 	b.w	800ea78 <__swbuf_r>
 800e4ba:	6813      	ldr	r3, [r2, #0]
 800e4bc:	1c58      	adds	r0, r3, #1
 800e4be:	6010      	str	r0, [r2, #0]
 800e4c0:	7019      	strb	r1, [r3, #0]
 800e4c2:	4608      	mov	r0, r1
 800e4c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4c8:	4770      	bx	lr

0800e4ca <__sfputs_r>:
 800e4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4cc:	4606      	mov	r6, r0
 800e4ce:	460f      	mov	r7, r1
 800e4d0:	4614      	mov	r4, r2
 800e4d2:	18d5      	adds	r5, r2, r3
 800e4d4:	42ac      	cmp	r4, r5
 800e4d6:	d101      	bne.n	800e4dc <__sfputs_r+0x12>
 800e4d8:	2000      	movs	r0, #0
 800e4da:	e007      	b.n	800e4ec <__sfputs_r+0x22>
 800e4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e0:	463a      	mov	r2, r7
 800e4e2:	4630      	mov	r0, r6
 800e4e4:	f7ff ffda 	bl	800e49c <__sfputc_r>
 800e4e8:	1c43      	adds	r3, r0, #1
 800e4ea:	d1f3      	bne.n	800e4d4 <__sfputs_r+0xa>
 800e4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4f0 <_vfiprintf_r>:
 800e4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f4:	460d      	mov	r5, r1
 800e4f6:	b09d      	sub	sp, #116	; 0x74
 800e4f8:	4614      	mov	r4, r2
 800e4fa:	4698      	mov	r8, r3
 800e4fc:	4606      	mov	r6, r0
 800e4fe:	b118      	cbz	r0, 800e508 <_vfiprintf_r+0x18>
 800e500:	6983      	ldr	r3, [r0, #24]
 800e502:	b90b      	cbnz	r3, 800e508 <_vfiprintf_r+0x18>
 800e504:	f000 fc9a 	bl	800ee3c <__sinit>
 800e508:	4b89      	ldr	r3, [pc, #548]	; (800e730 <_vfiprintf_r+0x240>)
 800e50a:	429d      	cmp	r5, r3
 800e50c:	d11b      	bne.n	800e546 <_vfiprintf_r+0x56>
 800e50e:	6875      	ldr	r5, [r6, #4]
 800e510:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e512:	07d9      	lsls	r1, r3, #31
 800e514:	d405      	bmi.n	800e522 <_vfiprintf_r+0x32>
 800e516:	89ab      	ldrh	r3, [r5, #12]
 800e518:	059a      	lsls	r2, r3, #22
 800e51a:	d402      	bmi.n	800e522 <_vfiprintf_r+0x32>
 800e51c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e51e:	f000 fd2b 	bl	800ef78 <__retarget_lock_acquire_recursive>
 800e522:	89ab      	ldrh	r3, [r5, #12]
 800e524:	071b      	lsls	r3, r3, #28
 800e526:	d501      	bpl.n	800e52c <_vfiprintf_r+0x3c>
 800e528:	692b      	ldr	r3, [r5, #16]
 800e52a:	b9eb      	cbnz	r3, 800e568 <_vfiprintf_r+0x78>
 800e52c:	4629      	mov	r1, r5
 800e52e:	4630      	mov	r0, r6
 800e530:	f000 faf4 	bl	800eb1c <__swsetup_r>
 800e534:	b1c0      	cbz	r0, 800e568 <_vfiprintf_r+0x78>
 800e536:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e538:	07dc      	lsls	r4, r3, #31
 800e53a:	d50e      	bpl.n	800e55a <_vfiprintf_r+0x6a>
 800e53c:	f04f 30ff 	mov.w	r0, #4294967295
 800e540:	b01d      	add	sp, #116	; 0x74
 800e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e546:	4b7b      	ldr	r3, [pc, #492]	; (800e734 <_vfiprintf_r+0x244>)
 800e548:	429d      	cmp	r5, r3
 800e54a:	d101      	bne.n	800e550 <_vfiprintf_r+0x60>
 800e54c:	68b5      	ldr	r5, [r6, #8]
 800e54e:	e7df      	b.n	800e510 <_vfiprintf_r+0x20>
 800e550:	4b79      	ldr	r3, [pc, #484]	; (800e738 <_vfiprintf_r+0x248>)
 800e552:	429d      	cmp	r5, r3
 800e554:	bf08      	it	eq
 800e556:	68f5      	ldreq	r5, [r6, #12]
 800e558:	e7da      	b.n	800e510 <_vfiprintf_r+0x20>
 800e55a:	89ab      	ldrh	r3, [r5, #12]
 800e55c:	0598      	lsls	r0, r3, #22
 800e55e:	d4ed      	bmi.n	800e53c <_vfiprintf_r+0x4c>
 800e560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e562:	f000 fd0a 	bl	800ef7a <__retarget_lock_release_recursive>
 800e566:	e7e9      	b.n	800e53c <_vfiprintf_r+0x4c>
 800e568:	2300      	movs	r3, #0
 800e56a:	9309      	str	r3, [sp, #36]	; 0x24
 800e56c:	2320      	movs	r3, #32
 800e56e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e572:	f8cd 800c 	str.w	r8, [sp, #12]
 800e576:	2330      	movs	r3, #48	; 0x30
 800e578:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e73c <_vfiprintf_r+0x24c>
 800e57c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e580:	f04f 0901 	mov.w	r9, #1
 800e584:	4623      	mov	r3, r4
 800e586:	469a      	mov	sl, r3
 800e588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e58c:	b10a      	cbz	r2, 800e592 <_vfiprintf_r+0xa2>
 800e58e:	2a25      	cmp	r2, #37	; 0x25
 800e590:	d1f9      	bne.n	800e586 <_vfiprintf_r+0x96>
 800e592:	ebba 0b04 	subs.w	fp, sl, r4
 800e596:	d00b      	beq.n	800e5b0 <_vfiprintf_r+0xc0>
 800e598:	465b      	mov	r3, fp
 800e59a:	4622      	mov	r2, r4
 800e59c:	4629      	mov	r1, r5
 800e59e:	4630      	mov	r0, r6
 800e5a0:	f7ff ff93 	bl	800e4ca <__sfputs_r>
 800e5a4:	3001      	adds	r0, #1
 800e5a6:	f000 80aa 	beq.w	800e6fe <_vfiprintf_r+0x20e>
 800e5aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5ac:	445a      	add	r2, fp
 800e5ae:	9209      	str	r2, [sp, #36]	; 0x24
 800e5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f000 80a2 	beq.w	800e6fe <_vfiprintf_r+0x20e>
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5c4:	f10a 0a01 	add.w	sl, sl, #1
 800e5c8:	9304      	str	r3, [sp, #16]
 800e5ca:	9307      	str	r3, [sp, #28]
 800e5cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5d0:	931a      	str	r3, [sp, #104]	; 0x68
 800e5d2:	4654      	mov	r4, sl
 800e5d4:	2205      	movs	r2, #5
 800e5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5da:	4858      	ldr	r0, [pc, #352]	; (800e73c <_vfiprintf_r+0x24c>)
 800e5dc:	f7f1 fe08 	bl	80001f0 <memchr>
 800e5e0:	9a04      	ldr	r2, [sp, #16]
 800e5e2:	b9d8      	cbnz	r0, 800e61c <_vfiprintf_r+0x12c>
 800e5e4:	06d1      	lsls	r1, r2, #27
 800e5e6:	bf44      	itt	mi
 800e5e8:	2320      	movmi	r3, #32
 800e5ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5ee:	0713      	lsls	r3, r2, #28
 800e5f0:	bf44      	itt	mi
 800e5f2:	232b      	movmi	r3, #43	; 0x2b
 800e5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e5fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e5fe:	d015      	beq.n	800e62c <_vfiprintf_r+0x13c>
 800e600:	9a07      	ldr	r2, [sp, #28]
 800e602:	4654      	mov	r4, sl
 800e604:	2000      	movs	r0, #0
 800e606:	f04f 0c0a 	mov.w	ip, #10
 800e60a:	4621      	mov	r1, r4
 800e60c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e610:	3b30      	subs	r3, #48	; 0x30
 800e612:	2b09      	cmp	r3, #9
 800e614:	d94e      	bls.n	800e6b4 <_vfiprintf_r+0x1c4>
 800e616:	b1b0      	cbz	r0, 800e646 <_vfiprintf_r+0x156>
 800e618:	9207      	str	r2, [sp, #28]
 800e61a:	e014      	b.n	800e646 <_vfiprintf_r+0x156>
 800e61c:	eba0 0308 	sub.w	r3, r0, r8
 800e620:	fa09 f303 	lsl.w	r3, r9, r3
 800e624:	4313      	orrs	r3, r2
 800e626:	9304      	str	r3, [sp, #16]
 800e628:	46a2      	mov	sl, r4
 800e62a:	e7d2      	b.n	800e5d2 <_vfiprintf_r+0xe2>
 800e62c:	9b03      	ldr	r3, [sp, #12]
 800e62e:	1d19      	adds	r1, r3, #4
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	9103      	str	r1, [sp, #12]
 800e634:	2b00      	cmp	r3, #0
 800e636:	bfbb      	ittet	lt
 800e638:	425b      	neglt	r3, r3
 800e63a:	f042 0202 	orrlt.w	r2, r2, #2
 800e63e:	9307      	strge	r3, [sp, #28]
 800e640:	9307      	strlt	r3, [sp, #28]
 800e642:	bfb8      	it	lt
 800e644:	9204      	strlt	r2, [sp, #16]
 800e646:	7823      	ldrb	r3, [r4, #0]
 800e648:	2b2e      	cmp	r3, #46	; 0x2e
 800e64a:	d10c      	bne.n	800e666 <_vfiprintf_r+0x176>
 800e64c:	7863      	ldrb	r3, [r4, #1]
 800e64e:	2b2a      	cmp	r3, #42	; 0x2a
 800e650:	d135      	bne.n	800e6be <_vfiprintf_r+0x1ce>
 800e652:	9b03      	ldr	r3, [sp, #12]
 800e654:	1d1a      	adds	r2, r3, #4
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	9203      	str	r2, [sp, #12]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	bfb8      	it	lt
 800e65e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e662:	3402      	adds	r4, #2
 800e664:	9305      	str	r3, [sp, #20]
 800e666:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e74c <_vfiprintf_r+0x25c>
 800e66a:	7821      	ldrb	r1, [r4, #0]
 800e66c:	2203      	movs	r2, #3
 800e66e:	4650      	mov	r0, sl
 800e670:	f7f1 fdbe 	bl	80001f0 <memchr>
 800e674:	b140      	cbz	r0, 800e688 <_vfiprintf_r+0x198>
 800e676:	2340      	movs	r3, #64	; 0x40
 800e678:	eba0 000a 	sub.w	r0, r0, sl
 800e67c:	fa03 f000 	lsl.w	r0, r3, r0
 800e680:	9b04      	ldr	r3, [sp, #16]
 800e682:	4303      	orrs	r3, r0
 800e684:	3401      	adds	r4, #1
 800e686:	9304      	str	r3, [sp, #16]
 800e688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e68c:	482c      	ldr	r0, [pc, #176]	; (800e740 <_vfiprintf_r+0x250>)
 800e68e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e692:	2206      	movs	r2, #6
 800e694:	f7f1 fdac 	bl	80001f0 <memchr>
 800e698:	2800      	cmp	r0, #0
 800e69a:	d03f      	beq.n	800e71c <_vfiprintf_r+0x22c>
 800e69c:	4b29      	ldr	r3, [pc, #164]	; (800e744 <_vfiprintf_r+0x254>)
 800e69e:	bb1b      	cbnz	r3, 800e6e8 <_vfiprintf_r+0x1f8>
 800e6a0:	9b03      	ldr	r3, [sp, #12]
 800e6a2:	3307      	adds	r3, #7
 800e6a4:	f023 0307 	bic.w	r3, r3, #7
 800e6a8:	3308      	adds	r3, #8
 800e6aa:	9303      	str	r3, [sp, #12]
 800e6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ae:	443b      	add	r3, r7
 800e6b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e6b2:	e767      	b.n	800e584 <_vfiprintf_r+0x94>
 800e6b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6b8:	460c      	mov	r4, r1
 800e6ba:	2001      	movs	r0, #1
 800e6bc:	e7a5      	b.n	800e60a <_vfiprintf_r+0x11a>
 800e6be:	2300      	movs	r3, #0
 800e6c0:	3401      	adds	r4, #1
 800e6c2:	9305      	str	r3, [sp, #20]
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	f04f 0c0a 	mov.w	ip, #10
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6d0:	3a30      	subs	r2, #48	; 0x30
 800e6d2:	2a09      	cmp	r2, #9
 800e6d4:	d903      	bls.n	800e6de <_vfiprintf_r+0x1ee>
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d0c5      	beq.n	800e666 <_vfiprintf_r+0x176>
 800e6da:	9105      	str	r1, [sp, #20]
 800e6dc:	e7c3      	b.n	800e666 <_vfiprintf_r+0x176>
 800e6de:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e7f0      	b.n	800e6ca <_vfiprintf_r+0x1da>
 800e6e8:	ab03      	add	r3, sp, #12
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	462a      	mov	r2, r5
 800e6ee:	4b16      	ldr	r3, [pc, #88]	; (800e748 <_vfiprintf_r+0x258>)
 800e6f0:	a904      	add	r1, sp, #16
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	f3af 8000 	nop.w
 800e6f8:	4607      	mov	r7, r0
 800e6fa:	1c78      	adds	r0, r7, #1
 800e6fc:	d1d6      	bne.n	800e6ac <_vfiprintf_r+0x1bc>
 800e6fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e700:	07d9      	lsls	r1, r3, #31
 800e702:	d405      	bmi.n	800e710 <_vfiprintf_r+0x220>
 800e704:	89ab      	ldrh	r3, [r5, #12]
 800e706:	059a      	lsls	r2, r3, #22
 800e708:	d402      	bmi.n	800e710 <_vfiprintf_r+0x220>
 800e70a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e70c:	f000 fc35 	bl	800ef7a <__retarget_lock_release_recursive>
 800e710:	89ab      	ldrh	r3, [r5, #12]
 800e712:	065b      	lsls	r3, r3, #25
 800e714:	f53f af12 	bmi.w	800e53c <_vfiprintf_r+0x4c>
 800e718:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e71a:	e711      	b.n	800e540 <_vfiprintf_r+0x50>
 800e71c:	ab03      	add	r3, sp, #12
 800e71e:	9300      	str	r3, [sp, #0]
 800e720:	462a      	mov	r2, r5
 800e722:	4b09      	ldr	r3, [pc, #36]	; (800e748 <_vfiprintf_r+0x258>)
 800e724:	a904      	add	r1, sp, #16
 800e726:	4630      	mov	r0, r6
 800e728:	f000 f880 	bl	800e82c <_printf_i>
 800e72c:	e7e4      	b.n	800e6f8 <_vfiprintf_r+0x208>
 800e72e:	bf00      	nop
 800e730:	0800f648 	.word	0x0800f648
 800e734:	0800f668 	.word	0x0800f668
 800e738:	0800f628 	.word	0x0800f628
 800e73c:	0800f5f2 	.word	0x0800f5f2
 800e740:	0800f5fc 	.word	0x0800f5fc
 800e744:	00000000 	.word	0x00000000
 800e748:	0800e4cb 	.word	0x0800e4cb
 800e74c:	0800f5f8 	.word	0x0800f5f8

0800e750 <_printf_common>:
 800e750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e754:	4616      	mov	r6, r2
 800e756:	4699      	mov	r9, r3
 800e758:	688a      	ldr	r2, [r1, #8]
 800e75a:	690b      	ldr	r3, [r1, #16]
 800e75c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e760:	4293      	cmp	r3, r2
 800e762:	bfb8      	it	lt
 800e764:	4613      	movlt	r3, r2
 800e766:	6033      	str	r3, [r6, #0]
 800e768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e76c:	4607      	mov	r7, r0
 800e76e:	460c      	mov	r4, r1
 800e770:	b10a      	cbz	r2, 800e776 <_printf_common+0x26>
 800e772:	3301      	adds	r3, #1
 800e774:	6033      	str	r3, [r6, #0]
 800e776:	6823      	ldr	r3, [r4, #0]
 800e778:	0699      	lsls	r1, r3, #26
 800e77a:	bf42      	ittt	mi
 800e77c:	6833      	ldrmi	r3, [r6, #0]
 800e77e:	3302      	addmi	r3, #2
 800e780:	6033      	strmi	r3, [r6, #0]
 800e782:	6825      	ldr	r5, [r4, #0]
 800e784:	f015 0506 	ands.w	r5, r5, #6
 800e788:	d106      	bne.n	800e798 <_printf_common+0x48>
 800e78a:	f104 0a19 	add.w	sl, r4, #25
 800e78e:	68e3      	ldr	r3, [r4, #12]
 800e790:	6832      	ldr	r2, [r6, #0]
 800e792:	1a9b      	subs	r3, r3, r2
 800e794:	42ab      	cmp	r3, r5
 800e796:	dc26      	bgt.n	800e7e6 <_printf_common+0x96>
 800e798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e79c:	1e13      	subs	r3, r2, #0
 800e79e:	6822      	ldr	r2, [r4, #0]
 800e7a0:	bf18      	it	ne
 800e7a2:	2301      	movne	r3, #1
 800e7a4:	0692      	lsls	r2, r2, #26
 800e7a6:	d42b      	bmi.n	800e800 <_printf_common+0xb0>
 800e7a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7ac:	4649      	mov	r1, r9
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	47c0      	blx	r8
 800e7b2:	3001      	adds	r0, #1
 800e7b4:	d01e      	beq.n	800e7f4 <_printf_common+0xa4>
 800e7b6:	6823      	ldr	r3, [r4, #0]
 800e7b8:	68e5      	ldr	r5, [r4, #12]
 800e7ba:	6832      	ldr	r2, [r6, #0]
 800e7bc:	f003 0306 	and.w	r3, r3, #6
 800e7c0:	2b04      	cmp	r3, #4
 800e7c2:	bf08      	it	eq
 800e7c4:	1aad      	subeq	r5, r5, r2
 800e7c6:	68a3      	ldr	r3, [r4, #8]
 800e7c8:	6922      	ldr	r2, [r4, #16]
 800e7ca:	bf0c      	ite	eq
 800e7cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7d0:	2500      	movne	r5, #0
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	bfc4      	itt	gt
 800e7d6:	1a9b      	subgt	r3, r3, r2
 800e7d8:	18ed      	addgt	r5, r5, r3
 800e7da:	2600      	movs	r6, #0
 800e7dc:	341a      	adds	r4, #26
 800e7de:	42b5      	cmp	r5, r6
 800e7e0:	d11a      	bne.n	800e818 <_printf_common+0xc8>
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	e008      	b.n	800e7f8 <_printf_common+0xa8>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	4652      	mov	r2, sl
 800e7ea:	4649      	mov	r1, r9
 800e7ec:	4638      	mov	r0, r7
 800e7ee:	47c0      	blx	r8
 800e7f0:	3001      	adds	r0, #1
 800e7f2:	d103      	bne.n	800e7fc <_printf_common+0xac>
 800e7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7fc:	3501      	adds	r5, #1
 800e7fe:	e7c6      	b.n	800e78e <_printf_common+0x3e>
 800e800:	18e1      	adds	r1, r4, r3
 800e802:	1c5a      	adds	r2, r3, #1
 800e804:	2030      	movs	r0, #48	; 0x30
 800e806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e80a:	4422      	add	r2, r4
 800e80c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e814:	3302      	adds	r3, #2
 800e816:	e7c7      	b.n	800e7a8 <_printf_common+0x58>
 800e818:	2301      	movs	r3, #1
 800e81a:	4622      	mov	r2, r4
 800e81c:	4649      	mov	r1, r9
 800e81e:	4638      	mov	r0, r7
 800e820:	47c0      	blx	r8
 800e822:	3001      	adds	r0, #1
 800e824:	d0e6      	beq.n	800e7f4 <_printf_common+0xa4>
 800e826:	3601      	adds	r6, #1
 800e828:	e7d9      	b.n	800e7de <_printf_common+0x8e>
	...

0800e82c <_printf_i>:
 800e82c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e830:	7e0f      	ldrb	r7, [r1, #24]
 800e832:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e834:	2f78      	cmp	r7, #120	; 0x78
 800e836:	4691      	mov	r9, r2
 800e838:	4680      	mov	r8, r0
 800e83a:	460c      	mov	r4, r1
 800e83c:	469a      	mov	sl, r3
 800e83e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e842:	d807      	bhi.n	800e854 <_printf_i+0x28>
 800e844:	2f62      	cmp	r7, #98	; 0x62
 800e846:	d80a      	bhi.n	800e85e <_printf_i+0x32>
 800e848:	2f00      	cmp	r7, #0
 800e84a:	f000 80d8 	beq.w	800e9fe <_printf_i+0x1d2>
 800e84e:	2f58      	cmp	r7, #88	; 0x58
 800e850:	f000 80a3 	beq.w	800e99a <_printf_i+0x16e>
 800e854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e85c:	e03a      	b.n	800e8d4 <_printf_i+0xa8>
 800e85e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e862:	2b15      	cmp	r3, #21
 800e864:	d8f6      	bhi.n	800e854 <_printf_i+0x28>
 800e866:	a101      	add	r1, pc, #4	; (adr r1, 800e86c <_printf_i+0x40>)
 800e868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e86c:	0800e8c5 	.word	0x0800e8c5
 800e870:	0800e8d9 	.word	0x0800e8d9
 800e874:	0800e855 	.word	0x0800e855
 800e878:	0800e855 	.word	0x0800e855
 800e87c:	0800e855 	.word	0x0800e855
 800e880:	0800e855 	.word	0x0800e855
 800e884:	0800e8d9 	.word	0x0800e8d9
 800e888:	0800e855 	.word	0x0800e855
 800e88c:	0800e855 	.word	0x0800e855
 800e890:	0800e855 	.word	0x0800e855
 800e894:	0800e855 	.word	0x0800e855
 800e898:	0800e9e5 	.word	0x0800e9e5
 800e89c:	0800e909 	.word	0x0800e909
 800e8a0:	0800e9c7 	.word	0x0800e9c7
 800e8a4:	0800e855 	.word	0x0800e855
 800e8a8:	0800e855 	.word	0x0800e855
 800e8ac:	0800ea07 	.word	0x0800ea07
 800e8b0:	0800e855 	.word	0x0800e855
 800e8b4:	0800e909 	.word	0x0800e909
 800e8b8:	0800e855 	.word	0x0800e855
 800e8bc:	0800e855 	.word	0x0800e855
 800e8c0:	0800e9cf 	.word	0x0800e9cf
 800e8c4:	682b      	ldr	r3, [r5, #0]
 800e8c6:	1d1a      	adds	r2, r3, #4
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	602a      	str	r2, [r5, #0]
 800e8cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e0a3      	b.n	800ea20 <_printf_i+0x1f4>
 800e8d8:	6820      	ldr	r0, [r4, #0]
 800e8da:	6829      	ldr	r1, [r5, #0]
 800e8dc:	0606      	lsls	r6, r0, #24
 800e8de:	f101 0304 	add.w	r3, r1, #4
 800e8e2:	d50a      	bpl.n	800e8fa <_printf_i+0xce>
 800e8e4:	680e      	ldr	r6, [r1, #0]
 800e8e6:	602b      	str	r3, [r5, #0]
 800e8e8:	2e00      	cmp	r6, #0
 800e8ea:	da03      	bge.n	800e8f4 <_printf_i+0xc8>
 800e8ec:	232d      	movs	r3, #45	; 0x2d
 800e8ee:	4276      	negs	r6, r6
 800e8f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8f4:	485e      	ldr	r0, [pc, #376]	; (800ea70 <_printf_i+0x244>)
 800e8f6:	230a      	movs	r3, #10
 800e8f8:	e019      	b.n	800e92e <_printf_i+0x102>
 800e8fa:	680e      	ldr	r6, [r1, #0]
 800e8fc:	602b      	str	r3, [r5, #0]
 800e8fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e902:	bf18      	it	ne
 800e904:	b236      	sxthne	r6, r6
 800e906:	e7ef      	b.n	800e8e8 <_printf_i+0xbc>
 800e908:	682b      	ldr	r3, [r5, #0]
 800e90a:	6820      	ldr	r0, [r4, #0]
 800e90c:	1d19      	adds	r1, r3, #4
 800e90e:	6029      	str	r1, [r5, #0]
 800e910:	0601      	lsls	r1, r0, #24
 800e912:	d501      	bpl.n	800e918 <_printf_i+0xec>
 800e914:	681e      	ldr	r6, [r3, #0]
 800e916:	e002      	b.n	800e91e <_printf_i+0xf2>
 800e918:	0646      	lsls	r6, r0, #25
 800e91a:	d5fb      	bpl.n	800e914 <_printf_i+0xe8>
 800e91c:	881e      	ldrh	r6, [r3, #0]
 800e91e:	4854      	ldr	r0, [pc, #336]	; (800ea70 <_printf_i+0x244>)
 800e920:	2f6f      	cmp	r7, #111	; 0x6f
 800e922:	bf0c      	ite	eq
 800e924:	2308      	moveq	r3, #8
 800e926:	230a      	movne	r3, #10
 800e928:	2100      	movs	r1, #0
 800e92a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e92e:	6865      	ldr	r5, [r4, #4]
 800e930:	60a5      	str	r5, [r4, #8]
 800e932:	2d00      	cmp	r5, #0
 800e934:	bfa2      	ittt	ge
 800e936:	6821      	ldrge	r1, [r4, #0]
 800e938:	f021 0104 	bicge.w	r1, r1, #4
 800e93c:	6021      	strge	r1, [r4, #0]
 800e93e:	b90e      	cbnz	r6, 800e944 <_printf_i+0x118>
 800e940:	2d00      	cmp	r5, #0
 800e942:	d04d      	beq.n	800e9e0 <_printf_i+0x1b4>
 800e944:	4615      	mov	r5, r2
 800e946:	fbb6 f1f3 	udiv	r1, r6, r3
 800e94a:	fb03 6711 	mls	r7, r3, r1, r6
 800e94e:	5dc7      	ldrb	r7, [r0, r7]
 800e950:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e954:	4637      	mov	r7, r6
 800e956:	42bb      	cmp	r3, r7
 800e958:	460e      	mov	r6, r1
 800e95a:	d9f4      	bls.n	800e946 <_printf_i+0x11a>
 800e95c:	2b08      	cmp	r3, #8
 800e95e:	d10b      	bne.n	800e978 <_printf_i+0x14c>
 800e960:	6823      	ldr	r3, [r4, #0]
 800e962:	07de      	lsls	r6, r3, #31
 800e964:	d508      	bpl.n	800e978 <_printf_i+0x14c>
 800e966:	6923      	ldr	r3, [r4, #16]
 800e968:	6861      	ldr	r1, [r4, #4]
 800e96a:	4299      	cmp	r1, r3
 800e96c:	bfde      	ittt	le
 800e96e:	2330      	movle	r3, #48	; 0x30
 800e970:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e974:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e978:	1b52      	subs	r2, r2, r5
 800e97a:	6122      	str	r2, [r4, #16]
 800e97c:	f8cd a000 	str.w	sl, [sp]
 800e980:	464b      	mov	r3, r9
 800e982:	aa03      	add	r2, sp, #12
 800e984:	4621      	mov	r1, r4
 800e986:	4640      	mov	r0, r8
 800e988:	f7ff fee2 	bl	800e750 <_printf_common>
 800e98c:	3001      	adds	r0, #1
 800e98e:	d14c      	bne.n	800ea2a <_printf_i+0x1fe>
 800e990:	f04f 30ff 	mov.w	r0, #4294967295
 800e994:	b004      	add	sp, #16
 800e996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e99a:	4835      	ldr	r0, [pc, #212]	; (800ea70 <_printf_i+0x244>)
 800e99c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e9a0:	6829      	ldr	r1, [r5, #0]
 800e9a2:	6823      	ldr	r3, [r4, #0]
 800e9a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e9a8:	6029      	str	r1, [r5, #0]
 800e9aa:	061d      	lsls	r5, r3, #24
 800e9ac:	d514      	bpl.n	800e9d8 <_printf_i+0x1ac>
 800e9ae:	07df      	lsls	r7, r3, #31
 800e9b0:	bf44      	itt	mi
 800e9b2:	f043 0320 	orrmi.w	r3, r3, #32
 800e9b6:	6023      	strmi	r3, [r4, #0]
 800e9b8:	b91e      	cbnz	r6, 800e9c2 <_printf_i+0x196>
 800e9ba:	6823      	ldr	r3, [r4, #0]
 800e9bc:	f023 0320 	bic.w	r3, r3, #32
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	2310      	movs	r3, #16
 800e9c4:	e7b0      	b.n	800e928 <_printf_i+0xfc>
 800e9c6:	6823      	ldr	r3, [r4, #0]
 800e9c8:	f043 0320 	orr.w	r3, r3, #32
 800e9cc:	6023      	str	r3, [r4, #0]
 800e9ce:	2378      	movs	r3, #120	; 0x78
 800e9d0:	4828      	ldr	r0, [pc, #160]	; (800ea74 <_printf_i+0x248>)
 800e9d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9d6:	e7e3      	b.n	800e9a0 <_printf_i+0x174>
 800e9d8:	0659      	lsls	r1, r3, #25
 800e9da:	bf48      	it	mi
 800e9dc:	b2b6      	uxthmi	r6, r6
 800e9de:	e7e6      	b.n	800e9ae <_printf_i+0x182>
 800e9e0:	4615      	mov	r5, r2
 800e9e2:	e7bb      	b.n	800e95c <_printf_i+0x130>
 800e9e4:	682b      	ldr	r3, [r5, #0]
 800e9e6:	6826      	ldr	r6, [r4, #0]
 800e9e8:	6961      	ldr	r1, [r4, #20]
 800e9ea:	1d18      	adds	r0, r3, #4
 800e9ec:	6028      	str	r0, [r5, #0]
 800e9ee:	0635      	lsls	r5, r6, #24
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	d501      	bpl.n	800e9f8 <_printf_i+0x1cc>
 800e9f4:	6019      	str	r1, [r3, #0]
 800e9f6:	e002      	b.n	800e9fe <_printf_i+0x1d2>
 800e9f8:	0670      	lsls	r0, r6, #25
 800e9fa:	d5fb      	bpl.n	800e9f4 <_printf_i+0x1c8>
 800e9fc:	8019      	strh	r1, [r3, #0]
 800e9fe:	2300      	movs	r3, #0
 800ea00:	6123      	str	r3, [r4, #16]
 800ea02:	4615      	mov	r5, r2
 800ea04:	e7ba      	b.n	800e97c <_printf_i+0x150>
 800ea06:	682b      	ldr	r3, [r5, #0]
 800ea08:	1d1a      	adds	r2, r3, #4
 800ea0a:	602a      	str	r2, [r5, #0]
 800ea0c:	681d      	ldr	r5, [r3, #0]
 800ea0e:	6862      	ldr	r2, [r4, #4]
 800ea10:	2100      	movs	r1, #0
 800ea12:	4628      	mov	r0, r5
 800ea14:	f7f1 fbec 	bl	80001f0 <memchr>
 800ea18:	b108      	cbz	r0, 800ea1e <_printf_i+0x1f2>
 800ea1a:	1b40      	subs	r0, r0, r5
 800ea1c:	6060      	str	r0, [r4, #4]
 800ea1e:	6863      	ldr	r3, [r4, #4]
 800ea20:	6123      	str	r3, [r4, #16]
 800ea22:	2300      	movs	r3, #0
 800ea24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea28:	e7a8      	b.n	800e97c <_printf_i+0x150>
 800ea2a:	6923      	ldr	r3, [r4, #16]
 800ea2c:	462a      	mov	r2, r5
 800ea2e:	4649      	mov	r1, r9
 800ea30:	4640      	mov	r0, r8
 800ea32:	47d0      	blx	sl
 800ea34:	3001      	adds	r0, #1
 800ea36:	d0ab      	beq.n	800e990 <_printf_i+0x164>
 800ea38:	6823      	ldr	r3, [r4, #0]
 800ea3a:	079b      	lsls	r3, r3, #30
 800ea3c:	d413      	bmi.n	800ea66 <_printf_i+0x23a>
 800ea3e:	68e0      	ldr	r0, [r4, #12]
 800ea40:	9b03      	ldr	r3, [sp, #12]
 800ea42:	4298      	cmp	r0, r3
 800ea44:	bfb8      	it	lt
 800ea46:	4618      	movlt	r0, r3
 800ea48:	e7a4      	b.n	800e994 <_printf_i+0x168>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	4632      	mov	r2, r6
 800ea4e:	4649      	mov	r1, r9
 800ea50:	4640      	mov	r0, r8
 800ea52:	47d0      	blx	sl
 800ea54:	3001      	adds	r0, #1
 800ea56:	d09b      	beq.n	800e990 <_printf_i+0x164>
 800ea58:	3501      	adds	r5, #1
 800ea5a:	68e3      	ldr	r3, [r4, #12]
 800ea5c:	9903      	ldr	r1, [sp, #12]
 800ea5e:	1a5b      	subs	r3, r3, r1
 800ea60:	42ab      	cmp	r3, r5
 800ea62:	dcf2      	bgt.n	800ea4a <_printf_i+0x21e>
 800ea64:	e7eb      	b.n	800ea3e <_printf_i+0x212>
 800ea66:	2500      	movs	r5, #0
 800ea68:	f104 0619 	add.w	r6, r4, #25
 800ea6c:	e7f5      	b.n	800ea5a <_printf_i+0x22e>
 800ea6e:	bf00      	nop
 800ea70:	0800f603 	.word	0x0800f603
 800ea74:	0800f614 	.word	0x0800f614

0800ea78 <__swbuf_r>:
 800ea78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea7a:	460e      	mov	r6, r1
 800ea7c:	4614      	mov	r4, r2
 800ea7e:	4605      	mov	r5, r0
 800ea80:	b118      	cbz	r0, 800ea8a <__swbuf_r+0x12>
 800ea82:	6983      	ldr	r3, [r0, #24]
 800ea84:	b90b      	cbnz	r3, 800ea8a <__swbuf_r+0x12>
 800ea86:	f000 f9d9 	bl	800ee3c <__sinit>
 800ea8a:	4b21      	ldr	r3, [pc, #132]	; (800eb10 <__swbuf_r+0x98>)
 800ea8c:	429c      	cmp	r4, r3
 800ea8e:	d12b      	bne.n	800eae8 <__swbuf_r+0x70>
 800ea90:	686c      	ldr	r4, [r5, #4]
 800ea92:	69a3      	ldr	r3, [r4, #24]
 800ea94:	60a3      	str	r3, [r4, #8]
 800ea96:	89a3      	ldrh	r3, [r4, #12]
 800ea98:	071a      	lsls	r2, r3, #28
 800ea9a:	d52f      	bpl.n	800eafc <__swbuf_r+0x84>
 800ea9c:	6923      	ldr	r3, [r4, #16]
 800ea9e:	b36b      	cbz	r3, 800eafc <__swbuf_r+0x84>
 800eaa0:	6923      	ldr	r3, [r4, #16]
 800eaa2:	6820      	ldr	r0, [r4, #0]
 800eaa4:	1ac0      	subs	r0, r0, r3
 800eaa6:	6963      	ldr	r3, [r4, #20]
 800eaa8:	b2f6      	uxtb	r6, r6
 800eaaa:	4283      	cmp	r3, r0
 800eaac:	4637      	mov	r7, r6
 800eaae:	dc04      	bgt.n	800eaba <__swbuf_r+0x42>
 800eab0:	4621      	mov	r1, r4
 800eab2:	4628      	mov	r0, r5
 800eab4:	f000 f92e 	bl	800ed14 <_fflush_r>
 800eab8:	bb30      	cbnz	r0, 800eb08 <__swbuf_r+0x90>
 800eaba:	68a3      	ldr	r3, [r4, #8]
 800eabc:	3b01      	subs	r3, #1
 800eabe:	60a3      	str	r3, [r4, #8]
 800eac0:	6823      	ldr	r3, [r4, #0]
 800eac2:	1c5a      	adds	r2, r3, #1
 800eac4:	6022      	str	r2, [r4, #0]
 800eac6:	701e      	strb	r6, [r3, #0]
 800eac8:	6963      	ldr	r3, [r4, #20]
 800eaca:	3001      	adds	r0, #1
 800eacc:	4283      	cmp	r3, r0
 800eace:	d004      	beq.n	800eada <__swbuf_r+0x62>
 800ead0:	89a3      	ldrh	r3, [r4, #12]
 800ead2:	07db      	lsls	r3, r3, #31
 800ead4:	d506      	bpl.n	800eae4 <__swbuf_r+0x6c>
 800ead6:	2e0a      	cmp	r6, #10
 800ead8:	d104      	bne.n	800eae4 <__swbuf_r+0x6c>
 800eada:	4621      	mov	r1, r4
 800eadc:	4628      	mov	r0, r5
 800eade:	f000 f919 	bl	800ed14 <_fflush_r>
 800eae2:	b988      	cbnz	r0, 800eb08 <__swbuf_r+0x90>
 800eae4:	4638      	mov	r0, r7
 800eae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eae8:	4b0a      	ldr	r3, [pc, #40]	; (800eb14 <__swbuf_r+0x9c>)
 800eaea:	429c      	cmp	r4, r3
 800eaec:	d101      	bne.n	800eaf2 <__swbuf_r+0x7a>
 800eaee:	68ac      	ldr	r4, [r5, #8]
 800eaf0:	e7cf      	b.n	800ea92 <__swbuf_r+0x1a>
 800eaf2:	4b09      	ldr	r3, [pc, #36]	; (800eb18 <__swbuf_r+0xa0>)
 800eaf4:	429c      	cmp	r4, r3
 800eaf6:	bf08      	it	eq
 800eaf8:	68ec      	ldreq	r4, [r5, #12]
 800eafa:	e7ca      	b.n	800ea92 <__swbuf_r+0x1a>
 800eafc:	4621      	mov	r1, r4
 800eafe:	4628      	mov	r0, r5
 800eb00:	f000 f80c 	bl	800eb1c <__swsetup_r>
 800eb04:	2800      	cmp	r0, #0
 800eb06:	d0cb      	beq.n	800eaa0 <__swbuf_r+0x28>
 800eb08:	f04f 37ff 	mov.w	r7, #4294967295
 800eb0c:	e7ea      	b.n	800eae4 <__swbuf_r+0x6c>
 800eb0e:	bf00      	nop
 800eb10:	0800f648 	.word	0x0800f648
 800eb14:	0800f668 	.word	0x0800f668
 800eb18:	0800f628 	.word	0x0800f628

0800eb1c <__swsetup_r>:
 800eb1c:	4b32      	ldr	r3, [pc, #200]	; (800ebe8 <__swsetup_r+0xcc>)
 800eb1e:	b570      	push	{r4, r5, r6, lr}
 800eb20:	681d      	ldr	r5, [r3, #0]
 800eb22:	4606      	mov	r6, r0
 800eb24:	460c      	mov	r4, r1
 800eb26:	b125      	cbz	r5, 800eb32 <__swsetup_r+0x16>
 800eb28:	69ab      	ldr	r3, [r5, #24]
 800eb2a:	b913      	cbnz	r3, 800eb32 <__swsetup_r+0x16>
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	f000 f985 	bl	800ee3c <__sinit>
 800eb32:	4b2e      	ldr	r3, [pc, #184]	; (800ebec <__swsetup_r+0xd0>)
 800eb34:	429c      	cmp	r4, r3
 800eb36:	d10f      	bne.n	800eb58 <__swsetup_r+0x3c>
 800eb38:	686c      	ldr	r4, [r5, #4]
 800eb3a:	89a3      	ldrh	r3, [r4, #12]
 800eb3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb40:	0719      	lsls	r1, r3, #28
 800eb42:	d42c      	bmi.n	800eb9e <__swsetup_r+0x82>
 800eb44:	06dd      	lsls	r5, r3, #27
 800eb46:	d411      	bmi.n	800eb6c <__swsetup_r+0x50>
 800eb48:	2309      	movs	r3, #9
 800eb4a:	6033      	str	r3, [r6, #0]
 800eb4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eb50:	81a3      	strh	r3, [r4, #12]
 800eb52:	f04f 30ff 	mov.w	r0, #4294967295
 800eb56:	e03e      	b.n	800ebd6 <__swsetup_r+0xba>
 800eb58:	4b25      	ldr	r3, [pc, #148]	; (800ebf0 <__swsetup_r+0xd4>)
 800eb5a:	429c      	cmp	r4, r3
 800eb5c:	d101      	bne.n	800eb62 <__swsetup_r+0x46>
 800eb5e:	68ac      	ldr	r4, [r5, #8]
 800eb60:	e7eb      	b.n	800eb3a <__swsetup_r+0x1e>
 800eb62:	4b24      	ldr	r3, [pc, #144]	; (800ebf4 <__swsetup_r+0xd8>)
 800eb64:	429c      	cmp	r4, r3
 800eb66:	bf08      	it	eq
 800eb68:	68ec      	ldreq	r4, [r5, #12]
 800eb6a:	e7e6      	b.n	800eb3a <__swsetup_r+0x1e>
 800eb6c:	0758      	lsls	r0, r3, #29
 800eb6e:	d512      	bpl.n	800eb96 <__swsetup_r+0x7a>
 800eb70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb72:	b141      	cbz	r1, 800eb86 <__swsetup_r+0x6a>
 800eb74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb78:	4299      	cmp	r1, r3
 800eb7a:	d002      	beq.n	800eb82 <__swsetup_r+0x66>
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	f7ff f9a7 	bl	800ded0 <_free_r>
 800eb82:	2300      	movs	r3, #0
 800eb84:	6363      	str	r3, [r4, #52]	; 0x34
 800eb86:	89a3      	ldrh	r3, [r4, #12]
 800eb88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eb8c:	81a3      	strh	r3, [r4, #12]
 800eb8e:	2300      	movs	r3, #0
 800eb90:	6063      	str	r3, [r4, #4]
 800eb92:	6923      	ldr	r3, [r4, #16]
 800eb94:	6023      	str	r3, [r4, #0]
 800eb96:	89a3      	ldrh	r3, [r4, #12]
 800eb98:	f043 0308 	orr.w	r3, r3, #8
 800eb9c:	81a3      	strh	r3, [r4, #12]
 800eb9e:	6923      	ldr	r3, [r4, #16]
 800eba0:	b94b      	cbnz	r3, 800ebb6 <__swsetup_r+0x9a>
 800eba2:	89a3      	ldrh	r3, [r4, #12]
 800eba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebac:	d003      	beq.n	800ebb6 <__swsetup_r+0x9a>
 800ebae:	4621      	mov	r1, r4
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	f000 fa09 	bl	800efc8 <__smakebuf_r>
 800ebb6:	89a0      	ldrh	r0, [r4, #12]
 800ebb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebbc:	f010 0301 	ands.w	r3, r0, #1
 800ebc0:	d00a      	beq.n	800ebd8 <__swsetup_r+0xbc>
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	60a3      	str	r3, [r4, #8]
 800ebc6:	6963      	ldr	r3, [r4, #20]
 800ebc8:	425b      	negs	r3, r3
 800ebca:	61a3      	str	r3, [r4, #24]
 800ebcc:	6923      	ldr	r3, [r4, #16]
 800ebce:	b943      	cbnz	r3, 800ebe2 <__swsetup_r+0xc6>
 800ebd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ebd4:	d1ba      	bne.n	800eb4c <__swsetup_r+0x30>
 800ebd6:	bd70      	pop	{r4, r5, r6, pc}
 800ebd8:	0781      	lsls	r1, r0, #30
 800ebda:	bf58      	it	pl
 800ebdc:	6963      	ldrpl	r3, [r4, #20]
 800ebde:	60a3      	str	r3, [r4, #8]
 800ebe0:	e7f4      	b.n	800ebcc <__swsetup_r+0xb0>
 800ebe2:	2000      	movs	r0, #0
 800ebe4:	e7f7      	b.n	800ebd6 <__swsetup_r+0xba>
 800ebe6:	bf00      	nop
 800ebe8:	2000008c 	.word	0x2000008c
 800ebec:	0800f648 	.word	0x0800f648
 800ebf0:	0800f668 	.word	0x0800f668
 800ebf4:	0800f628 	.word	0x0800f628

0800ebf8 <abort>:
 800ebf8:	b508      	push	{r3, lr}
 800ebfa:	2006      	movs	r0, #6
 800ebfc:	f000 fa96 	bl	800f12c <raise>
 800ec00:	2001      	movs	r0, #1
 800ec02:	f7f2 fc51 	bl	80014a8 <_exit>
	...

0800ec08 <__sflush_r>:
 800ec08:	898a      	ldrh	r2, [r1, #12]
 800ec0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec0e:	4605      	mov	r5, r0
 800ec10:	0710      	lsls	r0, r2, #28
 800ec12:	460c      	mov	r4, r1
 800ec14:	d458      	bmi.n	800ecc8 <__sflush_r+0xc0>
 800ec16:	684b      	ldr	r3, [r1, #4]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	dc05      	bgt.n	800ec28 <__sflush_r+0x20>
 800ec1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	dc02      	bgt.n	800ec28 <__sflush_r+0x20>
 800ec22:	2000      	movs	r0, #0
 800ec24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec2a:	2e00      	cmp	r6, #0
 800ec2c:	d0f9      	beq.n	800ec22 <__sflush_r+0x1a>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec34:	682f      	ldr	r7, [r5, #0]
 800ec36:	602b      	str	r3, [r5, #0]
 800ec38:	d032      	beq.n	800eca0 <__sflush_r+0x98>
 800ec3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec3c:	89a3      	ldrh	r3, [r4, #12]
 800ec3e:	075a      	lsls	r2, r3, #29
 800ec40:	d505      	bpl.n	800ec4e <__sflush_r+0x46>
 800ec42:	6863      	ldr	r3, [r4, #4]
 800ec44:	1ac0      	subs	r0, r0, r3
 800ec46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec48:	b10b      	cbz	r3, 800ec4e <__sflush_r+0x46>
 800ec4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec4c:	1ac0      	subs	r0, r0, r3
 800ec4e:	2300      	movs	r3, #0
 800ec50:	4602      	mov	r2, r0
 800ec52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec54:	6a21      	ldr	r1, [r4, #32]
 800ec56:	4628      	mov	r0, r5
 800ec58:	47b0      	blx	r6
 800ec5a:	1c43      	adds	r3, r0, #1
 800ec5c:	89a3      	ldrh	r3, [r4, #12]
 800ec5e:	d106      	bne.n	800ec6e <__sflush_r+0x66>
 800ec60:	6829      	ldr	r1, [r5, #0]
 800ec62:	291d      	cmp	r1, #29
 800ec64:	d82c      	bhi.n	800ecc0 <__sflush_r+0xb8>
 800ec66:	4a2a      	ldr	r2, [pc, #168]	; (800ed10 <__sflush_r+0x108>)
 800ec68:	40ca      	lsrs	r2, r1
 800ec6a:	07d6      	lsls	r6, r2, #31
 800ec6c:	d528      	bpl.n	800ecc0 <__sflush_r+0xb8>
 800ec6e:	2200      	movs	r2, #0
 800ec70:	6062      	str	r2, [r4, #4]
 800ec72:	04d9      	lsls	r1, r3, #19
 800ec74:	6922      	ldr	r2, [r4, #16]
 800ec76:	6022      	str	r2, [r4, #0]
 800ec78:	d504      	bpl.n	800ec84 <__sflush_r+0x7c>
 800ec7a:	1c42      	adds	r2, r0, #1
 800ec7c:	d101      	bne.n	800ec82 <__sflush_r+0x7a>
 800ec7e:	682b      	ldr	r3, [r5, #0]
 800ec80:	b903      	cbnz	r3, 800ec84 <__sflush_r+0x7c>
 800ec82:	6560      	str	r0, [r4, #84]	; 0x54
 800ec84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec86:	602f      	str	r7, [r5, #0]
 800ec88:	2900      	cmp	r1, #0
 800ec8a:	d0ca      	beq.n	800ec22 <__sflush_r+0x1a>
 800ec8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec90:	4299      	cmp	r1, r3
 800ec92:	d002      	beq.n	800ec9a <__sflush_r+0x92>
 800ec94:	4628      	mov	r0, r5
 800ec96:	f7ff f91b 	bl	800ded0 <_free_r>
 800ec9a:	2000      	movs	r0, #0
 800ec9c:	6360      	str	r0, [r4, #52]	; 0x34
 800ec9e:	e7c1      	b.n	800ec24 <__sflush_r+0x1c>
 800eca0:	6a21      	ldr	r1, [r4, #32]
 800eca2:	2301      	movs	r3, #1
 800eca4:	4628      	mov	r0, r5
 800eca6:	47b0      	blx	r6
 800eca8:	1c41      	adds	r1, r0, #1
 800ecaa:	d1c7      	bne.n	800ec3c <__sflush_r+0x34>
 800ecac:	682b      	ldr	r3, [r5, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d0c4      	beq.n	800ec3c <__sflush_r+0x34>
 800ecb2:	2b1d      	cmp	r3, #29
 800ecb4:	d001      	beq.n	800ecba <__sflush_r+0xb2>
 800ecb6:	2b16      	cmp	r3, #22
 800ecb8:	d101      	bne.n	800ecbe <__sflush_r+0xb6>
 800ecba:	602f      	str	r7, [r5, #0]
 800ecbc:	e7b1      	b.n	800ec22 <__sflush_r+0x1a>
 800ecbe:	89a3      	ldrh	r3, [r4, #12]
 800ecc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecc4:	81a3      	strh	r3, [r4, #12]
 800ecc6:	e7ad      	b.n	800ec24 <__sflush_r+0x1c>
 800ecc8:	690f      	ldr	r7, [r1, #16]
 800ecca:	2f00      	cmp	r7, #0
 800eccc:	d0a9      	beq.n	800ec22 <__sflush_r+0x1a>
 800ecce:	0793      	lsls	r3, r2, #30
 800ecd0:	680e      	ldr	r6, [r1, #0]
 800ecd2:	bf08      	it	eq
 800ecd4:	694b      	ldreq	r3, [r1, #20]
 800ecd6:	600f      	str	r7, [r1, #0]
 800ecd8:	bf18      	it	ne
 800ecda:	2300      	movne	r3, #0
 800ecdc:	eba6 0807 	sub.w	r8, r6, r7
 800ece0:	608b      	str	r3, [r1, #8]
 800ece2:	f1b8 0f00 	cmp.w	r8, #0
 800ece6:	dd9c      	ble.n	800ec22 <__sflush_r+0x1a>
 800ece8:	6a21      	ldr	r1, [r4, #32]
 800ecea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ecec:	4643      	mov	r3, r8
 800ecee:	463a      	mov	r2, r7
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	47b0      	blx	r6
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	dc06      	bgt.n	800ed06 <__sflush_r+0xfe>
 800ecf8:	89a3      	ldrh	r3, [r4, #12]
 800ecfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecfe:	81a3      	strh	r3, [r4, #12]
 800ed00:	f04f 30ff 	mov.w	r0, #4294967295
 800ed04:	e78e      	b.n	800ec24 <__sflush_r+0x1c>
 800ed06:	4407      	add	r7, r0
 800ed08:	eba8 0800 	sub.w	r8, r8, r0
 800ed0c:	e7e9      	b.n	800ece2 <__sflush_r+0xda>
 800ed0e:	bf00      	nop
 800ed10:	20400001 	.word	0x20400001

0800ed14 <_fflush_r>:
 800ed14:	b538      	push	{r3, r4, r5, lr}
 800ed16:	690b      	ldr	r3, [r1, #16]
 800ed18:	4605      	mov	r5, r0
 800ed1a:	460c      	mov	r4, r1
 800ed1c:	b913      	cbnz	r3, 800ed24 <_fflush_r+0x10>
 800ed1e:	2500      	movs	r5, #0
 800ed20:	4628      	mov	r0, r5
 800ed22:	bd38      	pop	{r3, r4, r5, pc}
 800ed24:	b118      	cbz	r0, 800ed2e <_fflush_r+0x1a>
 800ed26:	6983      	ldr	r3, [r0, #24]
 800ed28:	b90b      	cbnz	r3, 800ed2e <_fflush_r+0x1a>
 800ed2a:	f000 f887 	bl	800ee3c <__sinit>
 800ed2e:	4b14      	ldr	r3, [pc, #80]	; (800ed80 <_fflush_r+0x6c>)
 800ed30:	429c      	cmp	r4, r3
 800ed32:	d11b      	bne.n	800ed6c <_fflush_r+0x58>
 800ed34:	686c      	ldr	r4, [r5, #4]
 800ed36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d0ef      	beq.n	800ed1e <_fflush_r+0xa>
 800ed3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed40:	07d0      	lsls	r0, r2, #31
 800ed42:	d404      	bmi.n	800ed4e <_fflush_r+0x3a>
 800ed44:	0599      	lsls	r1, r3, #22
 800ed46:	d402      	bmi.n	800ed4e <_fflush_r+0x3a>
 800ed48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed4a:	f000 f915 	bl	800ef78 <__retarget_lock_acquire_recursive>
 800ed4e:	4628      	mov	r0, r5
 800ed50:	4621      	mov	r1, r4
 800ed52:	f7ff ff59 	bl	800ec08 <__sflush_r>
 800ed56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed58:	07da      	lsls	r2, r3, #31
 800ed5a:	4605      	mov	r5, r0
 800ed5c:	d4e0      	bmi.n	800ed20 <_fflush_r+0xc>
 800ed5e:	89a3      	ldrh	r3, [r4, #12]
 800ed60:	059b      	lsls	r3, r3, #22
 800ed62:	d4dd      	bmi.n	800ed20 <_fflush_r+0xc>
 800ed64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed66:	f000 f908 	bl	800ef7a <__retarget_lock_release_recursive>
 800ed6a:	e7d9      	b.n	800ed20 <_fflush_r+0xc>
 800ed6c:	4b05      	ldr	r3, [pc, #20]	; (800ed84 <_fflush_r+0x70>)
 800ed6e:	429c      	cmp	r4, r3
 800ed70:	d101      	bne.n	800ed76 <_fflush_r+0x62>
 800ed72:	68ac      	ldr	r4, [r5, #8]
 800ed74:	e7df      	b.n	800ed36 <_fflush_r+0x22>
 800ed76:	4b04      	ldr	r3, [pc, #16]	; (800ed88 <_fflush_r+0x74>)
 800ed78:	429c      	cmp	r4, r3
 800ed7a:	bf08      	it	eq
 800ed7c:	68ec      	ldreq	r4, [r5, #12]
 800ed7e:	e7da      	b.n	800ed36 <_fflush_r+0x22>
 800ed80:	0800f648 	.word	0x0800f648
 800ed84:	0800f668 	.word	0x0800f668
 800ed88:	0800f628 	.word	0x0800f628

0800ed8c <std>:
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	b510      	push	{r4, lr}
 800ed90:	4604      	mov	r4, r0
 800ed92:	e9c0 3300 	strd	r3, r3, [r0]
 800ed96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed9a:	6083      	str	r3, [r0, #8]
 800ed9c:	8181      	strh	r1, [r0, #12]
 800ed9e:	6643      	str	r3, [r0, #100]	; 0x64
 800eda0:	81c2      	strh	r2, [r0, #14]
 800eda2:	6183      	str	r3, [r0, #24]
 800eda4:	4619      	mov	r1, r3
 800eda6:	2208      	movs	r2, #8
 800eda8:	305c      	adds	r0, #92	; 0x5c
 800edaa:	f7ff f889 	bl	800dec0 <memset>
 800edae:	4b05      	ldr	r3, [pc, #20]	; (800edc4 <std+0x38>)
 800edb0:	6263      	str	r3, [r4, #36]	; 0x24
 800edb2:	4b05      	ldr	r3, [pc, #20]	; (800edc8 <std+0x3c>)
 800edb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800edb6:	4b05      	ldr	r3, [pc, #20]	; (800edcc <std+0x40>)
 800edb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800edba:	4b05      	ldr	r3, [pc, #20]	; (800edd0 <std+0x44>)
 800edbc:	6224      	str	r4, [r4, #32]
 800edbe:	6323      	str	r3, [r4, #48]	; 0x30
 800edc0:	bd10      	pop	{r4, pc}
 800edc2:	bf00      	nop
 800edc4:	0800f165 	.word	0x0800f165
 800edc8:	0800f187 	.word	0x0800f187
 800edcc:	0800f1bf 	.word	0x0800f1bf
 800edd0:	0800f1e3 	.word	0x0800f1e3

0800edd4 <_cleanup_r>:
 800edd4:	4901      	ldr	r1, [pc, #4]	; (800eddc <_cleanup_r+0x8>)
 800edd6:	f000 b8af 	b.w	800ef38 <_fwalk_reent>
 800edda:	bf00      	nop
 800eddc:	0800ed15 	.word	0x0800ed15

0800ede0 <__sfmoreglue>:
 800ede0:	b570      	push	{r4, r5, r6, lr}
 800ede2:	2268      	movs	r2, #104	; 0x68
 800ede4:	1e4d      	subs	r5, r1, #1
 800ede6:	4355      	muls	r5, r2
 800ede8:	460e      	mov	r6, r1
 800edea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800edee:	f7ff f8db 	bl	800dfa8 <_malloc_r>
 800edf2:	4604      	mov	r4, r0
 800edf4:	b140      	cbz	r0, 800ee08 <__sfmoreglue+0x28>
 800edf6:	2100      	movs	r1, #0
 800edf8:	e9c0 1600 	strd	r1, r6, [r0]
 800edfc:	300c      	adds	r0, #12
 800edfe:	60a0      	str	r0, [r4, #8]
 800ee00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee04:	f7ff f85c 	bl	800dec0 <memset>
 800ee08:	4620      	mov	r0, r4
 800ee0a:	bd70      	pop	{r4, r5, r6, pc}

0800ee0c <__sfp_lock_acquire>:
 800ee0c:	4801      	ldr	r0, [pc, #4]	; (800ee14 <__sfp_lock_acquire+0x8>)
 800ee0e:	f000 b8b3 	b.w	800ef78 <__retarget_lock_acquire_recursive>
 800ee12:	bf00      	nop
 800ee14:	20002db5 	.word	0x20002db5

0800ee18 <__sfp_lock_release>:
 800ee18:	4801      	ldr	r0, [pc, #4]	; (800ee20 <__sfp_lock_release+0x8>)
 800ee1a:	f000 b8ae 	b.w	800ef7a <__retarget_lock_release_recursive>
 800ee1e:	bf00      	nop
 800ee20:	20002db5 	.word	0x20002db5

0800ee24 <__sinit_lock_acquire>:
 800ee24:	4801      	ldr	r0, [pc, #4]	; (800ee2c <__sinit_lock_acquire+0x8>)
 800ee26:	f000 b8a7 	b.w	800ef78 <__retarget_lock_acquire_recursive>
 800ee2a:	bf00      	nop
 800ee2c:	20002db6 	.word	0x20002db6

0800ee30 <__sinit_lock_release>:
 800ee30:	4801      	ldr	r0, [pc, #4]	; (800ee38 <__sinit_lock_release+0x8>)
 800ee32:	f000 b8a2 	b.w	800ef7a <__retarget_lock_release_recursive>
 800ee36:	bf00      	nop
 800ee38:	20002db6 	.word	0x20002db6

0800ee3c <__sinit>:
 800ee3c:	b510      	push	{r4, lr}
 800ee3e:	4604      	mov	r4, r0
 800ee40:	f7ff fff0 	bl	800ee24 <__sinit_lock_acquire>
 800ee44:	69a3      	ldr	r3, [r4, #24]
 800ee46:	b11b      	cbz	r3, 800ee50 <__sinit+0x14>
 800ee48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee4c:	f7ff bff0 	b.w	800ee30 <__sinit_lock_release>
 800ee50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee54:	6523      	str	r3, [r4, #80]	; 0x50
 800ee56:	4b13      	ldr	r3, [pc, #76]	; (800eea4 <__sinit+0x68>)
 800ee58:	4a13      	ldr	r2, [pc, #76]	; (800eea8 <__sinit+0x6c>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ee5e:	42a3      	cmp	r3, r4
 800ee60:	bf04      	itt	eq
 800ee62:	2301      	moveq	r3, #1
 800ee64:	61a3      	streq	r3, [r4, #24]
 800ee66:	4620      	mov	r0, r4
 800ee68:	f000 f820 	bl	800eeac <__sfp>
 800ee6c:	6060      	str	r0, [r4, #4]
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f000 f81c 	bl	800eeac <__sfp>
 800ee74:	60a0      	str	r0, [r4, #8]
 800ee76:	4620      	mov	r0, r4
 800ee78:	f000 f818 	bl	800eeac <__sfp>
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	60e0      	str	r0, [r4, #12]
 800ee80:	2104      	movs	r1, #4
 800ee82:	6860      	ldr	r0, [r4, #4]
 800ee84:	f7ff ff82 	bl	800ed8c <std>
 800ee88:	68a0      	ldr	r0, [r4, #8]
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	2109      	movs	r1, #9
 800ee8e:	f7ff ff7d 	bl	800ed8c <std>
 800ee92:	68e0      	ldr	r0, [r4, #12]
 800ee94:	2202      	movs	r2, #2
 800ee96:	2112      	movs	r1, #18
 800ee98:	f7ff ff78 	bl	800ed8c <std>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	61a3      	str	r3, [r4, #24]
 800eea0:	e7d2      	b.n	800ee48 <__sinit+0xc>
 800eea2:	bf00      	nop
 800eea4:	0800f540 	.word	0x0800f540
 800eea8:	0800edd5 	.word	0x0800edd5

0800eeac <__sfp>:
 800eeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeae:	4607      	mov	r7, r0
 800eeb0:	f7ff ffac 	bl	800ee0c <__sfp_lock_acquire>
 800eeb4:	4b1e      	ldr	r3, [pc, #120]	; (800ef30 <__sfp+0x84>)
 800eeb6:	681e      	ldr	r6, [r3, #0]
 800eeb8:	69b3      	ldr	r3, [r6, #24]
 800eeba:	b913      	cbnz	r3, 800eec2 <__sfp+0x16>
 800eebc:	4630      	mov	r0, r6
 800eebe:	f7ff ffbd 	bl	800ee3c <__sinit>
 800eec2:	3648      	adds	r6, #72	; 0x48
 800eec4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eec8:	3b01      	subs	r3, #1
 800eeca:	d503      	bpl.n	800eed4 <__sfp+0x28>
 800eecc:	6833      	ldr	r3, [r6, #0]
 800eece:	b30b      	cbz	r3, 800ef14 <__sfp+0x68>
 800eed0:	6836      	ldr	r6, [r6, #0]
 800eed2:	e7f7      	b.n	800eec4 <__sfp+0x18>
 800eed4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eed8:	b9d5      	cbnz	r5, 800ef10 <__sfp+0x64>
 800eeda:	4b16      	ldr	r3, [pc, #88]	; (800ef34 <__sfp+0x88>)
 800eedc:	60e3      	str	r3, [r4, #12]
 800eede:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eee2:	6665      	str	r5, [r4, #100]	; 0x64
 800eee4:	f000 f847 	bl	800ef76 <__retarget_lock_init_recursive>
 800eee8:	f7ff ff96 	bl	800ee18 <__sfp_lock_release>
 800eeec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eef0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eef4:	6025      	str	r5, [r4, #0]
 800eef6:	61a5      	str	r5, [r4, #24]
 800eef8:	2208      	movs	r2, #8
 800eefa:	4629      	mov	r1, r5
 800eefc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef00:	f7fe ffde 	bl	800dec0 <memset>
 800ef04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef10:	3468      	adds	r4, #104	; 0x68
 800ef12:	e7d9      	b.n	800eec8 <__sfp+0x1c>
 800ef14:	2104      	movs	r1, #4
 800ef16:	4638      	mov	r0, r7
 800ef18:	f7ff ff62 	bl	800ede0 <__sfmoreglue>
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	6030      	str	r0, [r6, #0]
 800ef20:	2800      	cmp	r0, #0
 800ef22:	d1d5      	bne.n	800eed0 <__sfp+0x24>
 800ef24:	f7ff ff78 	bl	800ee18 <__sfp_lock_release>
 800ef28:	230c      	movs	r3, #12
 800ef2a:	603b      	str	r3, [r7, #0]
 800ef2c:	e7ee      	b.n	800ef0c <__sfp+0x60>
 800ef2e:	bf00      	nop
 800ef30:	0800f540 	.word	0x0800f540
 800ef34:	ffff0001 	.word	0xffff0001

0800ef38 <_fwalk_reent>:
 800ef38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef3c:	4606      	mov	r6, r0
 800ef3e:	4688      	mov	r8, r1
 800ef40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef44:	2700      	movs	r7, #0
 800ef46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef4a:	f1b9 0901 	subs.w	r9, r9, #1
 800ef4e:	d505      	bpl.n	800ef5c <_fwalk_reent+0x24>
 800ef50:	6824      	ldr	r4, [r4, #0]
 800ef52:	2c00      	cmp	r4, #0
 800ef54:	d1f7      	bne.n	800ef46 <_fwalk_reent+0xe>
 800ef56:	4638      	mov	r0, r7
 800ef58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef5c:	89ab      	ldrh	r3, [r5, #12]
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d907      	bls.n	800ef72 <_fwalk_reent+0x3a>
 800ef62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef66:	3301      	adds	r3, #1
 800ef68:	d003      	beq.n	800ef72 <_fwalk_reent+0x3a>
 800ef6a:	4629      	mov	r1, r5
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	47c0      	blx	r8
 800ef70:	4307      	orrs	r7, r0
 800ef72:	3568      	adds	r5, #104	; 0x68
 800ef74:	e7e9      	b.n	800ef4a <_fwalk_reent+0x12>

0800ef76 <__retarget_lock_init_recursive>:
 800ef76:	4770      	bx	lr

0800ef78 <__retarget_lock_acquire_recursive>:
 800ef78:	4770      	bx	lr

0800ef7a <__retarget_lock_release_recursive>:
 800ef7a:	4770      	bx	lr

0800ef7c <__swhatbuf_r>:
 800ef7c:	b570      	push	{r4, r5, r6, lr}
 800ef7e:	460e      	mov	r6, r1
 800ef80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef84:	2900      	cmp	r1, #0
 800ef86:	b096      	sub	sp, #88	; 0x58
 800ef88:	4614      	mov	r4, r2
 800ef8a:	461d      	mov	r5, r3
 800ef8c:	da08      	bge.n	800efa0 <__swhatbuf_r+0x24>
 800ef8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef92:	2200      	movs	r2, #0
 800ef94:	602a      	str	r2, [r5, #0]
 800ef96:	061a      	lsls	r2, r3, #24
 800ef98:	d410      	bmi.n	800efbc <__swhatbuf_r+0x40>
 800ef9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef9e:	e00e      	b.n	800efbe <__swhatbuf_r+0x42>
 800efa0:	466a      	mov	r2, sp
 800efa2:	f000 f945 	bl	800f230 <_fstat_r>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	dbf1      	blt.n	800ef8e <__swhatbuf_r+0x12>
 800efaa:	9a01      	ldr	r2, [sp, #4]
 800efac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800efb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800efb4:	425a      	negs	r2, r3
 800efb6:	415a      	adcs	r2, r3
 800efb8:	602a      	str	r2, [r5, #0]
 800efba:	e7ee      	b.n	800ef9a <__swhatbuf_r+0x1e>
 800efbc:	2340      	movs	r3, #64	; 0x40
 800efbe:	2000      	movs	r0, #0
 800efc0:	6023      	str	r3, [r4, #0]
 800efc2:	b016      	add	sp, #88	; 0x58
 800efc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800efc8 <__smakebuf_r>:
 800efc8:	898b      	ldrh	r3, [r1, #12]
 800efca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efcc:	079d      	lsls	r5, r3, #30
 800efce:	4606      	mov	r6, r0
 800efd0:	460c      	mov	r4, r1
 800efd2:	d507      	bpl.n	800efe4 <__smakebuf_r+0x1c>
 800efd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800efd8:	6023      	str	r3, [r4, #0]
 800efda:	6123      	str	r3, [r4, #16]
 800efdc:	2301      	movs	r3, #1
 800efde:	6163      	str	r3, [r4, #20]
 800efe0:	b002      	add	sp, #8
 800efe2:	bd70      	pop	{r4, r5, r6, pc}
 800efe4:	ab01      	add	r3, sp, #4
 800efe6:	466a      	mov	r2, sp
 800efe8:	f7ff ffc8 	bl	800ef7c <__swhatbuf_r>
 800efec:	9900      	ldr	r1, [sp, #0]
 800efee:	4605      	mov	r5, r0
 800eff0:	4630      	mov	r0, r6
 800eff2:	f7fe ffd9 	bl	800dfa8 <_malloc_r>
 800eff6:	b948      	cbnz	r0, 800f00c <__smakebuf_r+0x44>
 800eff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800effc:	059a      	lsls	r2, r3, #22
 800effe:	d4ef      	bmi.n	800efe0 <__smakebuf_r+0x18>
 800f000:	f023 0303 	bic.w	r3, r3, #3
 800f004:	f043 0302 	orr.w	r3, r3, #2
 800f008:	81a3      	strh	r3, [r4, #12]
 800f00a:	e7e3      	b.n	800efd4 <__smakebuf_r+0xc>
 800f00c:	4b0d      	ldr	r3, [pc, #52]	; (800f044 <__smakebuf_r+0x7c>)
 800f00e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f010:	89a3      	ldrh	r3, [r4, #12]
 800f012:	6020      	str	r0, [r4, #0]
 800f014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f018:	81a3      	strh	r3, [r4, #12]
 800f01a:	9b00      	ldr	r3, [sp, #0]
 800f01c:	6163      	str	r3, [r4, #20]
 800f01e:	9b01      	ldr	r3, [sp, #4]
 800f020:	6120      	str	r0, [r4, #16]
 800f022:	b15b      	cbz	r3, 800f03c <__smakebuf_r+0x74>
 800f024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f028:	4630      	mov	r0, r6
 800f02a:	f000 f913 	bl	800f254 <_isatty_r>
 800f02e:	b128      	cbz	r0, 800f03c <__smakebuf_r+0x74>
 800f030:	89a3      	ldrh	r3, [r4, #12]
 800f032:	f023 0303 	bic.w	r3, r3, #3
 800f036:	f043 0301 	orr.w	r3, r3, #1
 800f03a:	81a3      	strh	r3, [r4, #12]
 800f03c:	89a0      	ldrh	r0, [r4, #12]
 800f03e:	4305      	orrs	r5, r0
 800f040:	81a5      	strh	r5, [r4, #12]
 800f042:	e7cd      	b.n	800efe0 <__smakebuf_r+0x18>
 800f044:	0800edd5 	.word	0x0800edd5

0800f048 <memmove>:
 800f048:	4288      	cmp	r0, r1
 800f04a:	b510      	push	{r4, lr}
 800f04c:	eb01 0402 	add.w	r4, r1, r2
 800f050:	d902      	bls.n	800f058 <memmove+0x10>
 800f052:	4284      	cmp	r4, r0
 800f054:	4623      	mov	r3, r4
 800f056:	d807      	bhi.n	800f068 <memmove+0x20>
 800f058:	1e43      	subs	r3, r0, #1
 800f05a:	42a1      	cmp	r1, r4
 800f05c:	d008      	beq.n	800f070 <memmove+0x28>
 800f05e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f062:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f066:	e7f8      	b.n	800f05a <memmove+0x12>
 800f068:	4402      	add	r2, r0
 800f06a:	4601      	mov	r1, r0
 800f06c:	428a      	cmp	r2, r1
 800f06e:	d100      	bne.n	800f072 <memmove+0x2a>
 800f070:	bd10      	pop	{r4, pc}
 800f072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f07a:	e7f7      	b.n	800f06c <memmove+0x24>

0800f07c <_realloc_r>:
 800f07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f080:	4680      	mov	r8, r0
 800f082:	4614      	mov	r4, r2
 800f084:	460e      	mov	r6, r1
 800f086:	b921      	cbnz	r1, 800f092 <_realloc_r+0x16>
 800f088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f08c:	4611      	mov	r1, r2
 800f08e:	f7fe bf8b 	b.w	800dfa8 <_malloc_r>
 800f092:	b92a      	cbnz	r2, 800f0a0 <_realloc_r+0x24>
 800f094:	f7fe ff1c 	bl	800ded0 <_free_r>
 800f098:	4625      	mov	r5, r4
 800f09a:	4628      	mov	r0, r5
 800f09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a0:	f000 f8fa 	bl	800f298 <_malloc_usable_size_r>
 800f0a4:	4284      	cmp	r4, r0
 800f0a6:	4607      	mov	r7, r0
 800f0a8:	d802      	bhi.n	800f0b0 <_realloc_r+0x34>
 800f0aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f0ae:	d812      	bhi.n	800f0d6 <_realloc_r+0x5a>
 800f0b0:	4621      	mov	r1, r4
 800f0b2:	4640      	mov	r0, r8
 800f0b4:	f7fe ff78 	bl	800dfa8 <_malloc_r>
 800f0b8:	4605      	mov	r5, r0
 800f0ba:	2800      	cmp	r0, #0
 800f0bc:	d0ed      	beq.n	800f09a <_realloc_r+0x1e>
 800f0be:	42bc      	cmp	r4, r7
 800f0c0:	4622      	mov	r2, r4
 800f0c2:	4631      	mov	r1, r6
 800f0c4:	bf28      	it	cs
 800f0c6:	463a      	movcs	r2, r7
 800f0c8:	f7fe feec 	bl	800dea4 <memcpy>
 800f0cc:	4631      	mov	r1, r6
 800f0ce:	4640      	mov	r0, r8
 800f0d0:	f7fe fefe 	bl	800ded0 <_free_r>
 800f0d4:	e7e1      	b.n	800f09a <_realloc_r+0x1e>
 800f0d6:	4635      	mov	r5, r6
 800f0d8:	e7df      	b.n	800f09a <_realloc_r+0x1e>

0800f0da <_raise_r>:
 800f0da:	291f      	cmp	r1, #31
 800f0dc:	b538      	push	{r3, r4, r5, lr}
 800f0de:	4604      	mov	r4, r0
 800f0e0:	460d      	mov	r5, r1
 800f0e2:	d904      	bls.n	800f0ee <_raise_r+0x14>
 800f0e4:	2316      	movs	r3, #22
 800f0e6:	6003      	str	r3, [r0, #0]
 800f0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ec:	bd38      	pop	{r3, r4, r5, pc}
 800f0ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f0f0:	b112      	cbz	r2, 800f0f8 <_raise_r+0x1e>
 800f0f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f0f6:	b94b      	cbnz	r3, 800f10c <_raise_r+0x32>
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f000 f831 	bl	800f160 <_getpid_r>
 800f0fe:	462a      	mov	r2, r5
 800f100:	4601      	mov	r1, r0
 800f102:	4620      	mov	r0, r4
 800f104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f108:	f000 b818 	b.w	800f13c <_kill_r>
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d00a      	beq.n	800f126 <_raise_r+0x4c>
 800f110:	1c59      	adds	r1, r3, #1
 800f112:	d103      	bne.n	800f11c <_raise_r+0x42>
 800f114:	2316      	movs	r3, #22
 800f116:	6003      	str	r3, [r0, #0]
 800f118:	2001      	movs	r0, #1
 800f11a:	e7e7      	b.n	800f0ec <_raise_r+0x12>
 800f11c:	2400      	movs	r4, #0
 800f11e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f122:	4628      	mov	r0, r5
 800f124:	4798      	blx	r3
 800f126:	2000      	movs	r0, #0
 800f128:	e7e0      	b.n	800f0ec <_raise_r+0x12>
	...

0800f12c <raise>:
 800f12c:	4b02      	ldr	r3, [pc, #8]	; (800f138 <raise+0xc>)
 800f12e:	4601      	mov	r1, r0
 800f130:	6818      	ldr	r0, [r3, #0]
 800f132:	f7ff bfd2 	b.w	800f0da <_raise_r>
 800f136:	bf00      	nop
 800f138:	2000008c 	.word	0x2000008c

0800f13c <_kill_r>:
 800f13c:	b538      	push	{r3, r4, r5, lr}
 800f13e:	4d07      	ldr	r5, [pc, #28]	; (800f15c <_kill_r+0x20>)
 800f140:	2300      	movs	r3, #0
 800f142:	4604      	mov	r4, r0
 800f144:	4608      	mov	r0, r1
 800f146:	4611      	mov	r1, r2
 800f148:	602b      	str	r3, [r5, #0]
 800f14a:	f7f2 f99d 	bl	8001488 <_kill>
 800f14e:	1c43      	adds	r3, r0, #1
 800f150:	d102      	bne.n	800f158 <_kill_r+0x1c>
 800f152:	682b      	ldr	r3, [r5, #0]
 800f154:	b103      	cbz	r3, 800f158 <_kill_r+0x1c>
 800f156:	6023      	str	r3, [r4, #0]
 800f158:	bd38      	pop	{r3, r4, r5, pc}
 800f15a:	bf00      	nop
 800f15c:	20002db0 	.word	0x20002db0

0800f160 <_getpid_r>:
 800f160:	f7f2 b98a 	b.w	8001478 <_getpid>

0800f164 <__sread>:
 800f164:	b510      	push	{r4, lr}
 800f166:	460c      	mov	r4, r1
 800f168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f16c:	f000 f89c 	bl	800f2a8 <_read_r>
 800f170:	2800      	cmp	r0, #0
 800f172:	bfab      	itete	ge
 800f174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f176:	89a3      	ldrhlt	r3, [r4, #12]
 800f178:	181b      	addge	r3, r3, r0
 800f17a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f17e:	bfac      	ite	ge
 800f180:	6563      	strge	r3, [r4, #84]	; 0x54
 800f182:	81a3      	strhlt	r3, [r4, #12]
 800f184:	bd10      	pop	{r4, pc}

0800f186 <__swrite>:
 800f186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f18a:	461f      	mov	r7, r3
 800f18c:	898b      	ldrh	r3, [r1, #12]
 800f18e:	05db      	lsls	r3, r3, #23
 800f190:	4605      	mov	r5, r0
 800f192:	460c      	mov	r4, r1
 800f194:	4616      	mov	r6, r2
 800f196:	d505      	bpl.n	800f1a4 <__swrite+0x1e>
 800f198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f19c:	2302      	movs	r3, #2
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f000 f868 	bl	800f274 <_lseek_r>
 800f1a4:	89a3      	ldrh	r3, [r4, #12]
 800f1a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1ae:	81a3      	strh	r3, [r4, #12]
 800f1b0:	4632      	mov	r2, r6
 800f1b2:	463b      	mov	r3, r7
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ba:	f000 b817 	b.w	800f1ec <_write_r>

0800f1be <__sseek>:
 800f1be:	b510      	push	{r4, lr}
 800f1c0:	460c      	mov	r4, r1
 800f1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1c6:	f000 f855 	bl	800f274 <_lseek_r>
 800f1ca:	1c43      	adds	r3, r0, #1
 800f1cc:	89a3      	ldrh	r3, [r4, #12]
 800f1ce:	bf15      	itete	ne
 800f1d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1da:	81a3      	strheq	r3, [r4, #12]
 800f1dc:	bf18      	it	ne
 800f1de:	81a3      	strhne	r3, [r4, #12]
 800f1e0:	bd10      	pop	{r4, pc}

0800f1e2 <__sclose>:
 800f1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1e6:	f000 b813 	b.w	800f210 <_close_r>
	...

0800f1ec <_write_r>:
 800f1ec:	b538      	push	{r3, r4, r5, lr}
 800f1ee:	4d07      	ldr	r5, [pc, #28]	; (800f20c <_write_r+0x20>)
 800f1f0:	4604      	mov	r4, r0
 800f1f2:	4608      	mov	r0, r1
 800f1f4:	4611      	mov	r1, r2
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	602a      	str	r2, [r5, #0]
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	f7f2 f97b 	bl	80014f6 <_write>
 800f200:	1c43      	adds	r3, r0, #1
 800f202:	d102      	bne.n	800f20a <_write_r+0x1e>
 800f204:	682b      	ldr	r3, [r5, #0]
 800f206:	b103      	cbz	r3, 800f20a <_write_r+0x1e>
 800f208:	6023      	str	r3, [r4, #0]
 800f20a:	bd38      	pop	{r3, r4, r5, pc}
 800f20c:	20002db0 	.word	0x20002db0

0800f210 <_close_r>:
 800f210:	b538      	push	{r3, r4, r5, lr}
 800f212:	4d06      	ldr	r5, [pc, #24]	; (800f22c <_close_r+0x1c>)
 800f214:	2300      	movs	r3, #0
 800f216:	4604      	mov	r4, r0
 800f218:	4608      	mov	r0, r1
 800f21a:	602b      	str	r3, [r5, #0]
 800f21c:	f7f2 f987 	bl	800152e <_close>
 800f220:	1c43      	adds	r3, r0, #1
 800f222:	d102      	bne.n	800f22a <_close_r+0x1a>
 800f224:	682b      	ldr	r3, [r5, #0]
 800f226:	b103      	cbz	r3, 800f22a <_close_r+0x1a>
 800f228:	6023      	str	r3, [r4, #0]
 800f22a:	bd38      	pop	{r3, r4, r5, pc}
 800f22c:	20002db0 	.word	0x20002db0

0800f230 <_fstat_r>:
 800f230:	b538      	push	{r3, r4, r5, lr}
 800f232:	4d07      	ldr	r5, [pc, #28]	; (800f250 <_fstat_r+0x20>)
 800f234:	2300      	movs	r3, #0
 800f236:	4604      	mov	r4, r0
 800f238:	4608      	mov	r0, r1
 800f23a:	4611      	mov	r1, r2
 800f23c:	602b      	str	r3, [r5, #0]
 800f23e:	f7f2 f982 	bl	8001546 <_fstat>
 800f242:	1c43      	adds	r3, r0, #1
 800f244:	d102      	bne.n	800f24c <_fstat_r+0x1c>
 800f246:	682b      	ldr	r3, [r5, #0]
 800f248:	b103      	cbz	r3, 800f24c <_fstat_r+0x1c>
 800f24a:	6023      	str	r3, [r4, #0]
 800f24c:	bd38      	pop	{r3, r4, r5, pc}
 800f24e:	bf00      	nop
 800f250:	20002db0 	.word	0x20002db0

0800f254 <_isatty_r>:
 800f254:	b538      	push	{r3, r4, r5, lr}
 800f256:	4d06      	ldr	r5, [pc, #24]	; (800f270 <_isatty_r+0x1c>)
 800f258:	2300      	movs	r3, #0
 800f25a:	4604      	mov	r4, r0
 800f25c:	4608      	mov	r0, r1
 800f25e:	602b      	str	r3, [r5, #0]
 800f260:	f7f2 f981 	bl	8001566 <_isatty>
 800f264:	1c43      	adds	r3, r0, #1
 800f266:	d102      	bne.n	800f26e <_isatty_r+0x1a>
 800f268:	682b      	ldr	r3, [r5, #0]
 800f26a:	b103      	cbz	r3, 800f26e <_isatty_r+0x1a>
 800f26c:	6023      	str	r3, [r4, #0]
 800f26e:	bd38      	pop	{r3, r4, r5, pc}
 800f270:	20002db0 	.word	0x20002db0

0800f274 <_lseek_r>:
 800f274:	b538      	push	{r3, r4, r5, lr}
 800f276:	4d07      	ldr	r5, [pc, #28]	; (800f294 <_lseek_r+0x20>)
 800f278:	4604      	mov	r4, r0
 800f27a:	4608      	mov	r0, r1
 800f27c:	4611      	mov	r1, r2
 800f27e:	2200      	movs	r2, #0
 800f280:	602a      	str	r2, [r5, #0]
 800f282:	461a      	mov	r2, r3
 800f284:	f7f2 f97a 	bl	800157c <_lseek>
 800f288:	1c43      	adds	r3, r0, #1
 800f28a:	d102      	bne.n	800f292 <_lseek_r+0x1e>
 800f28c:	682b      	ldr	r3, [r5, #0]
 800f28e:	b103      	cbz	r3, 800f292 <_lseek_r+0x1e>
 800f290:	6023      	str	r3, [r4, #0]
 800f292:	bd38      	pop	{r3, r4, r5, pc}
 800f294:	20002db0 	.word	0x20002db0

0800f298 <_malloc_usable_size_r>:
 800f298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f29c:	1f18      	subs	r0, r3, #4
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	bfbc      	itt	lt
 800f2a2:	580b      	ldrlt	r3, [r1, r0]
 800f2a4:	18c0      	addlt	r0, r0, r3
 800f2a6:	4770      	bx	lr

0800f2a8 <_read_r>:
 800f2a8:	b538      	push	{r3, r4, r5, lr}
 800f2aa:	4d07      	ldr	r5, [pc, #28]	; (800f2c8 <_read_r+0x20>)
 800f2ac:	4604      	mov	r4, r0
 800f2ae:	4608      	mov	r0, r1
 800f2b0:	4611      	mov	r1, r2
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	602a      	str	r2, [r5, #0]
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	f7f2 f900 	bl	80014bc <_read>
 800f2bc:	1c43      	adds	r3, r0, #1
 800f2be:	d102      	bne.n	800f2c6 <_read_r+0x1e>
 800f2c0:	682b      	ldr	r3, [r5, #0]
 800f2c2:	b103      	cbz	r3, 800f2c6 <_read_r+0x1e>
 800f2c4:	6023      	str	r3, [r4, #0]
 800f2c6:	bd38      	pop	{r3, r4, r5, pc}
 800f2c8:	20002db0 	.word	0x20002db0

0800f2cc <_init>:
 800f2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ce:	bf00      	nop
 800f2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2d2:	bc08      	pop	{r3}
 800f2d4:	469e      	mov	lr, r3
 800f2d6:	4770      	bx	lr

0800f2d8 <_fini>:
 800f2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2da:	bf00      	nop
 800f2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2de:	bc08      	pop	{r3}
 800f2e0:	469e      	mov	lr, r3
 800f2e2:	4770      	bx	lr
